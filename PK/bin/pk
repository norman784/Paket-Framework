#! /usr/bin/env php
<?php
$files["config"]["database.php"] = "PD9waHAKLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tClNldCB0aGUgZGF0YWJhc2UgY29ubmVjdGlvbgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCnN3aXRjaCAoJF9TRVJWRVJbJ0hUVFBfSE9TVCddKSB7Ci8vIGRldmVsb3BtZW50CmNhc2UgJ2xvY2FsaG9zdCc6CgkkY29uZmlnWydkYmhvc3QnXSAgICAgPSAnbG9jYWxob3N0JzsKCSRjb25maWdbJ2RidXNlciddICAgICA9ICdyb290JzsKCSRjb25maWdbJ2RicGFzcyddICAgICA9ICcnOwoJJGNvbmZpZ1snZGJuYW1lJ10gICAgID0gJ3Rlc3QnOwoJJGNvbmZpZ1snZGJlbmdpbmUnXSAgID0gJ215c3FsJzsKCSRjb25maWdbJ2RicG9ydCddICAgICA9IDA7CgkkY29uZmlnWydkYnByZWZpeCddICAgICA9ICcnOwoJCgkkY29uZmlnWydkZWJ1ZyddWydlbmFibGVkJ10gPSB0cnVlOwoJCglicmVhazsKLy8gcHJvZHVjdGlvbgpkZWZhdWx0OgoJJGNvbmZpZ1snZGJob3N0J10gICAgID0gJ2xvY2FsaG9zdCc7CgkkY29uZmlnWydkYnVzZXInXSAgICAgPSAnJzsKCSRjb25maWdbJ2RicGFzcyddICAgICA9ICcnOwoJJGNvbmZpZ1snZGJuYW1lJ10gICAgID0gJyc7CgkkY29uZmlnWydkYmVuZ2luZSddICAgPSAnbXlzcWwnOwoJJGNvbmZpZ1snZGJwb3J0J10gICAgID0gMDsKCSRjb25maWdbJ2RicHJlZml4J10gICAgID0gJyc7CgkKCSRjb25maWdbJ2RlYnVnJ11bJ2VuYWJsZWQnXSA9IGZhbHNlOwoJCi8vCSRjb25maWdbJ2RlYnVnJ11bJ2VuYWJsZWQnXSA9IHRydWU7Ci8vCSRjb25maWdbJ2RlYnVnJ11bJ3Nob3dfYWxsJ10gPSB0cnVlOwoJCglicmVhazsKfQoKLy9kZWZpbmVkKCdLRVlXT1JEUycpIG9yIGRlZmluZSgnS0VZV09SRFMnLCAnJyk7";
$files["config"]["routes.php"] = "PD9waHAKLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCkRlZmluaW1vcyBsYXMgcnV0YXMKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgpkZWZpbmUoJ1BLX01PREVMX0RJUicsIFBLX0FQUF9ESVIuJ21vZGVsLycpOwpkZWZpbmUoJ1BLX0NPTlRST0xMRVJfRElSJywgUEtfQVBQX0RJUi4nY29udHJvbGxlci8nKTsKZGVmaW5lKCdQS19WSUVXX0RJUicsIFBLX0FQUF9ESVIuJ3ZpZXcvJyk7CmRlZmluZSgnUEtfTEFZT1VUX0RJUicsIFBLX0FQUF9ESVIuJ2xheW91dHMvJyk7CmRlZmluZSgnUEtfVVBMT0FEX0RJUicsIFBLX0FQUF9ESVIuJ3VwbG9hZHMvJyk7CgppZiAoIWlzX2RpcihQS19VUExPQURfRElSKSkKCW1rZGlyKFBLX1VQTE9BRF9ESVIsIDA3NzcpOwoKQGNobW9kKFBLX1VQTE9BRF9ESVIsIDA3NzcpOwoKLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCkRlZmluaW1vcyBsb3MgYXJjaGl2b3MgcG9yIGRlZmVjdG8gcGFyYSBsYXMgdmlzdGFzCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKZGVmaW5lKCdFUlJfNDAzJywgUEtfQVBQX0RJUi4ndmlldy9lcnJvci80MDMucGhwJyk7CmRlZmluZSgnRVJSXzQwM19ERUYnLCBQS19ST09UX0RJUi4nUEsvdmlldy9lcnJvci80MDMucGhwJyk7CgpkZWZpbmUoJ0VSUl80MDQnLCBQS19BUFBfRElSLid2aWV3L2Vycm9yLzQwNC5waHAnKTsKZGVmaW5lKCdFUlJfNDA0X0RFRicsIFBLX1JPT1RfRElSLidQSy92aWV3L2Vycm9yLzQwNC5waHAnKTsKCmRlZmluZSgnVklFV19DT05UUk9MTEVSJywgJ2hvbWUnKTsKZGVmaW5lKCdWSUVXX0RFRl9DT05UUk9MTEVSJywgJ2RlZmF1bHQnKTsKCmRlZmluZSgnVklFV19BQ1RJT04nLCAnaW5kZXgnKTsKZGVmaW5lKCdBQ1RJT05fU1VGSVgnLCAnQWN0aW9uJyk7CmRlZmluZSgnQUNUSU9OX1BSRUZJWCcsIEFDVElPTl9TVUZJWCk7IC8vIGVzIHVuIHN1Zmlqbywgbm8gdW4gcHJlZmlqbyA6UwoKZGVmaW5lKCdTSVRFX1RJVExFJywgJ0VzdG8gZXMgQnJhbmRvbicpOyAKCi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpEZWZpbmltb3MgbG9zIGFyY2hpdm9zIGRlIGltYWdlbiBwb3IgZGVmZWN0bwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCmRlZmluZSgnREVGX0lNRycsICcvX2RlZmF1bHQvX2RlZmF1bHQnKTsKPz4=";
$files["controller"]["home_controller.php"] = "PD9waHAKY2xhc3MgSG9tZV9jb250cm9sbGVyIGV4dGVuZHMgUEtfQ29udHJvbGxlcgp7CglwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoKSB7CgkJJHRoaXMtPmluaXQoKTsKCX0gLy8gX19jb25zdHJ1Y3QKCQoJZnVuY3Rpb24gaW5kZXhBY3Rpb24oKQoJewoJCSR0aGlzLT52aWV3LT5yZW5kZXIoKTsKCX0KfQ==";
$files["layouts"]["default.php"] = "PCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBYSFRNTCAxLjAgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL3hodG1sMS9EVEQveGh0bWwxLXRyYW5zaXRpb25hbC5kdGQiPgo8aHRtbCB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCIgbGFuZz0iZXMiIHhtbDpsYW5nPSJlcyI+Cgo8aGVhZD4KPGJhc2UgaHJlZj0iPD9waHAgZWNobyBTRVJWRVJfVVJMOyA/PiIgLz4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9PD9waHAgZWNobyBDSEFSU0VUID8+IiAvPgoKPD9waHAgaWYgKGZpbGVfZXhpc3RzKFBLX1JPT1RfRElSLidway1pY29uLmljbycpKSB7ID8+CjxsaW5rIHJlbD0ic2hvcnRjdXQgaWNvbiIgaHJlZj0icGstaWNvbi5pY28iIC8+Cjw/cGhwIH0gPz4KCjxtZXRhIG5hbWU9ImtleXdvcmRzIiBjb250ZW50PSI8P3BocCBlY2hvIEtFWVdPUkRTID8+IiAvPgo8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iPD9waHAgZWNobyBERVNDUklQVElPTiA/PiIgLz4KCjx0aXRsZT5QYWtldCBGcmFtZXdvcms8L3RpdGxlPgoKPD9waHAgZWNobyAkcm93X1RlbXBsYXRlWydtZXRhJ11bJ3NjYWZmb2xkaW5nJ10gPz4KCjwvaGVhZD4KCjxib2R5PgoKCTxoMT5QYWtldCBGcmFtZXdvcmsgZXhhbXBsZSBhcHA8L2gxPgoKCTw/cGhwICR0aGlzLT5yZW5kZXIoJ3ZpZXcnKSA/PgoJCgk8P3BocCBQS19kZWJ1ZygnJywgJycsICdvdXRwdXQnKSA/PgoKPC9ib2R5Pgo8L2h0bWw+Cg==";
$files["public/js"][".DS_Store"] = "AAAAAUJ1ZDEAABAAAAAIAAAAEAAAAAAlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAggsgAAAAAEAAAEAAAAAAQAAAgAAAAABAAAEAAAAAAIAAAgAAAAYAAAAAAAAAAABAAAgAAAAAAEAAEAAAAAAAQAAgAAAAAABAAEAAAAAAAEAAgAAAAAAAQAEAAAAAAABAAgAAAAAAAEAEAAAAAAAAQAgAAAAAAABAEAAAAAAAAEAgAAAAAAAAQEAAAAAAAABAgAAAAAAAAEEAAAAAAAAAQgAAAAAAAABEAAAAAAAAAEgAAAAAAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==";
$files["public/js"][".gitkeep"] = "";
$files["public/js"]["custom.modernizr.js"] = "";
$files["public/js"]["foundation.min.js"] = "";
$files["public/js"]["zepto.js"] = "";
$files["public/css"][".DS_Store"] = "AAAAAUJ1ZDEAABAAAAAIAAAAEAAAAAAlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAggsgAAAAAEAAAEAAAAAAQAAAgAAAAABAAAEAAAAAAIAAAgAAAAYAAAAAAAAAAABAAAgAAAAAAEAAEAAAAAAAQAAgAAAAAABAAEAAAAAAAEAAgAAAAAAAQAEAAAAAAABAAgAAAAAAAEAEAAAAAAAAQAgAAAAAAABAEAAAAAAAAEAgAAAAAAAAQEAAAAAAAABAgAAAAAAAAEEAAAAAAAAAQgAAAAAAAABEAAAAAAAAAEg
$files["public/css"][".gitkeep"] = "";
$files["public/css"]["foundation.min.css"] = "KiwqOmJlZm9yZSwqOmFmdGVyey1tb3otYm94LXNpemluZzpib3JkZXItYm94Oy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveH1odG1sLGJvZHl7Zm9udC1zaXplOjEwMCV9Ym9keXtiYWNrZ3JvdW5kOiNmZmY7Y29sb3I6IzIyMjtwYWRkaW5nOjA7bWFyZ2luOjA7Zm9udC1mYW1pbHk6IkhlbHZldGljYSBOZXVlIiwiSGVsdmV0aWNhIixIZWx2ZXRpY2EsQXJpYWwsc2Fucy1zZXJpZjtmb250LXdlaWdodDpub3JtYWw7Zm9udC1zdHlsZTpub3JtYWw7bGluZS1oZWlnaHQ6MTtwb3NpdGlvbjpyZWxhdGl2ZX1hOmZvY3Vze291dGxpbmU6bm9uZX1pbWcsb2JqZWN0LGVtYmVke21heC13aWR0aDoxMDAlO2hlaWdodDphdXRvfW9iamVjdCxlbWJlZHtoZWlnaHQ6MTAwJX1pbWd7LW1zLWludGVycG9sYXRpb24tbW9kZTpiaWN1YmljfSNtYXBfY2FudmFzIGltZywjbWFwX2NhbnZhcyBlbWJlZCwjbWFwX2NhbnZhcyBvYmplY3QsLm1hcF9jYW52YXMgaW1nLC5tYXBfY2FudmFzIGVtYmVkLC5tYXBfY2FudmFzIG9iamVjdHttYXgtd2lkdGg6bm9uZSAhaW1wb3J0YW50fS5sZWZ0e2Zsb2F0OmxlZnQgIWltcG9ydGFudH0ucmlnaHR7ZmxvYXQ6cmlnaHQgIWltcG9ydGFudH0udGV4dC1sZWZ0e3RleHQtYWxpZ246bGVmdCAhaW1wb3J0YW50fS50ZXh0LXJpZ2h0e3RleHQtYWxpZ246cmlnaHQgIWltcG9ydGFudH0udGV4dC1jZW50ZXJ7dGV4dC1hbGlnbjpjZW50ZXIgIWltcG9ydGFudH0udGV4dC1qdXN0aWZ5e3RleHQtYWxpZ246anVzdGlmeSAhaW1wb3J0YW50fS5oaWRle2Rpc3BsYXk6bm9uZX0uYW50aWFsaWFzZWR7LXdlYmtpdC1mb250LXNtb290aGluZzphbnRpYWxpYXNlZH1pbWd7ZGlzcGxheTppbmxpbmUtYmxvY2t9dGV4dGFyZWF7aGVpZ2h0OmF1dG87bWluLWhlaWdodDo1MHB4fXNlbGVjdHt3aWR0aDoxMDAlfS5yb3d7d2lkdGg6MTAwJTttYXJnaW4tbGVmdDphdXRvO21hcmdpbi1yaWdodDphdXRvO21hcmdpbi10b3A6MDttYXJnaW4tYm90dG9tOjA7bWF4LXdpZHRoOjYyLjVlbTsqem9vbToxfS5yb3c6YmVmb3JlLC5yb3c6YWZ0ZXJ7Y29udGVudDoiICI7ZGlzcGxheTp0YWJsZX0ucm93OmFmdGVye2NsZWFyOmJvdGh9LnJvdyAuY29sdW1uLC5yb3cgLmNvbHVtbnN7cG9zaXRpb246cmVsYXRpdmU7cGFkZGluZy1sZWZ0OjAuOTM3NWVtO3BhZGRpbmctcmlnaHQ6MC45Mzc1ZW07d2lkdGg6MTAwJTtmbG9hdDpsZWZ0fS5yb3cuY29sbGFwc2UgLmNvbHVtbiwucm93LmNvbGxhcHNlIC5jb2x1bW5ze3Bvc2l0aW9uOnJlbGF0aXZlO3BhZGRpbmctbGVmdDowO3BhZGRpbmctcmlnaHQ6MDtmbG9hdDpsZWZ0fS5yb3cgLnJvd3t3aWR0aDphdXRvO21hcmdpbi1sZWZ0Oi0wLjkzNzVlbTttYXJnaW4tcmlnaHQ6LTAuOTM3NWVtO21hcmdpbi10b3A6MDttYXJnaW4tYm90dG9tOjA7bWF4LXdpZHRoOm5vbmU7Knpvb206MX0ucm93IC5yb3c6YmVmb3JlLC5yb3cgLnJvdzphZnRlcntjb250ZW50OiIgIjtkaXNwbGF5OnRhYmxlfS5yb3cgLnJvdzphZnRlcntjbGVhcjpib3RofS5yb3cgLnJvdy5jb2xsYXBzZXt3aWR0aDphdXRvO21hcmdpbjowO21heC13aWR0aDpub25lOyp6b29tOjF9LnJvdyAucm93LmNvbGxhcHNlOmJlZm9yZSwucm93IC5yb3cuY29sbGFwc2U6YWZ0ZXJ7Y29udGVudDoiICI7ZGlzcGxheTp0YWJsZX0ucm93IC5yb3cuY29sbGFwc2U6YWZ0ZXJ7Y2xlYXI6Ym90aH1AbWVkaWEgb25seSBzY3JlZW57LnJvdyAuY29sdW1uLC5yb3cgLmNvbHVtbnN7cG9zaXRpb246cmVsYXRpdmU7cGFkZGluZy1sZWZ0OjAuOTM3NWVtO3BhZGRpbmctcmlnaHQ6MC45Mzc1ZW07ZmxvYXQ6bGVmdH0ucm93IC5zbWFsbC0xe3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjguMzMzMzMlfS5yb3cgLnNtYWxsLTJ7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MTYuNjY2NjclfS5yb3cgLnNtYWxsLTN7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MjUlfS5yb3cgLnNtYWxsLTR7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MzMuMzMzMzMlfS5yb3cgLnNtYWxsLTV7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6NDEuNjY2NjclfS5yb3cgLnNtYWxsLTZ7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6NTAlfS5yb3cgLnNtYWxsLTd7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6NTguMzMzMzMlfS5yb3cgLnNtYWxsLTh7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6NjYuNjY2NjclfS5yb3cgLnNtYWxsLTl7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6NzUlfS5yb3cgLnNtYWxsLTEwe3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjgzLjMzMzMzJX0ucm93IC5zbWFsbC0xMXtwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDo5MS42NjY2NyV9LnJvdyAuc21hbGwtMTJ7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MTAwJX0ucm93IC5zbWFsbC1vZmZzZXQtMXtwb3NpdGlvbjpyZWxhdGl2ZTttYXJnaW4tbGVmdDo4LjMzMzMzJX0ucm93IC5zbWFsbC1vZmZzZXQtMntwb3NpdGlvbjpyZWxhdGl2ZTttYXJnaW4tbGVmdDoxNi42NjY2NyV9LnJvdyAuc21hbGwtb2Zmc2V0LTN7cG9zaXRpb246cmVsYXRpdmU7bWFyZ2luLWxlZnQ6MjUlfS5yb3cgLnNtYWxsLW9mZnNldC00e3Bvc2l0aW9uOnJlbGF0aXZlO21hcmdpbi1sZWZ0OjMzLjMzMzMzJX0ucm93IC5zbWFsbC1vZmZzZXQtNXtwb3NpdGlvbjpyZWxhdGl2ZTttYXJnaW4tbGVmdDo0MS42NjY2NyV9LnJvdyAuc21hbGwtb2Zmc2V0LTZ7cG9zaXRpb246cmVsYXRpdmU7bWFyZ2luLWxlZnQ6NTAlfS5yb3cgLnNtYWxsLW9mZnNldC03e3Bvc2l0aW9uOnJlbGF0aXZlO21hcmdpbi1sZWZ0OjU4LjMzMzMzJX0ucm93IC5zbWFsbC1vZmZzZXQtOHtwb3NpdGlvbjpyZWxhdGl2ZTttYXJnaW4tbGVmdDo2Ni42NjY2NyV9LnJvdyAuc21hbGwtb2Zmc2V0LTl7cG9zaXRpb246cmVsYXRpdmU7bWFyZ2luLWxlZnQ6NzUlfS5yb3cgLnNtYWxsLW9mZnNldC0xMHtwb3NpdGlvbjpyZWxhdGl2ZTttYXJnaW4tbGVmdDo4My4zMzMzMyV9W2NsYXNzKj0iY29sdW1uIl0rW2NsYXNzKj0iY29sdW1uIl06bGFzdC1jaGlsZHtmbG9hdDpyaWdodH1bY2xhc3MqPSJjb2x1bW4iXStbY2xhc3MqPSJjb2x1bW4iXS5lbmR7ZmxvYXQ6bGVmdH0uY29sdW1uLnNtYWxsLWNlbnRlcmVkLC5jb2x1bW5zLnNtYWxsLWNlbnRlcmVke3Bvc2l0aW9uOnJlbGF0aXZlO21hcmdpbi1sZWZ0OmF1dG87bWFyZ2luLXJpZ2h0OmF1dG87ZmxvYXQ6bm9uZSAhaW1wb3J0YW50fX1AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDQ4ZW0pey5yb3cgLmxhcmdlLTF7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6OC4zMzMzMyV9LnJvdyAubGFyZ2UtMntwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDoxNi42NjY2NyV9LnJvdyAubGFyZ2UtM3twb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDoyNSV9LnJvdyAubGFyZ2UtNHtwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDozMy4zMzMzMyV9LnJvdyAubGFyZ2UtNXtwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDo0MS42NjY2NyV9LnJvdyAubGFyZ2UtNntwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDo1MCV9LnJvdyAubGFyZ2UtN3twb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDo1OC4zMzMzMyV9LnJvdyAubGFyZ2UtOHtwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDo2Ni42NjY2NyV9LnJvdyAubGFyZ2UtOXtwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDo3NSV9LnJvdyAubGFyZ2UtMTB7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6ODMuMzMzMzMlfS5yb3cgLmxhcmdlLTExe3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjkxLjY2NjY3JX0ucm93IC5sYXJnZS0xMntwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDoxMDAlfS5yb3cgLmxhcmdlLW9mZnNldC0xe3Bvc2l0aW9uOnJlbGF0aXZlO21hcmdpbi1sZWZ0OjguMzMzMzMlfS5yb3cgLmxhcmdlLW9mZnNldC0ye3Bvc2l0aW9uOnJlbGF0aXZlO21hcmdpbi1sZWZ0OjE2LjY2NjY3JX0ucm93IC5sYXJnZS1vZmZzZXQtM3twb3NpdGlvbjpyZWxhdGl2ZTttYXJnaW4tbGVmdDoyNSV9LnJvdyAubGFyZ2Utb2Zmc2V0LTR7cG9zaXRpb246cmVsYXRpdmU7bWFyZ2luLWxlZnQ6MzMuMzMzMzMlfS5yb3cgLmxhcmdlLW9mZnNldC01e3Bvc2l0aW9uOnJlbGF0aXZlO21hcmdpbi1sZWZ0OjQxLjY2NjY3JX0ucm93IC5sYXJnZS1vZmZzZXQtNntwb3NpdGlvbjpyZWxhdGl2ZTttYXJnaW4tbGVmdDo1MCV9LnJvdyAubGFyZ2Utb2Zmc2V0LTd7cG9zaXRpb246cmVsYXRpdmU7bWFyZ2luLWxlZnQ6NTguMzMzMzMlfS5yb3cgLmxhcmdlLW9mZnNldC04e3Bvc2l0aW9uOnJlbGF0aXZlO21hcmdpbi1sZWZ0OjY2LjY2NjY3JX0ucm93IC5sYXJnZS1vZmZzZXQtOXtwb3NpdGlvbjpyZWxhdGl2ZTttYXJnaW4tbGVmdDo3NSV9LnJvdyAubGFyZ2Utb2Zmc2V0LTEwe3Bvc2l0aW9uOnJlbGF0aXZlO21hcmdpbi1sZWZ0OjgzLjMzMzMzJX0ucHVzaC0ye3Bvc2l0aW9uOnJlbGF0aXZlO2xlZnQ6MTYuNjY2NjclO3JpZ2h0OmF1dG99LnB1bGwtMntwb3NpdGlvbjpyZWxhdGl2ZTtyaWdodDoxNi42NjY2NyU7bGVmdDphdXRvfS5wdXNoLTN7cG9zaXRpb246cmVsYXRpdmU7bGVmdDoyNSU7cmlnaHQ6YXV0b30ucHVsbC0ze3Bvc2l0aW9uOnJlbGF0aXZlO3JpZ2h0OjI1JTtsZWZ0OmF1dG99LnB1c2gtNHtwb3NpdGlvbjpyZWxhdGl2ZTtsZWZ0OjMzLjMzMzMzJTtyaWdodDphdXRvfS5wdWxsLTR7cG9zaXRpb246cmVsYXRpdmU7cmlnaHQ6MzMuMzMzMzMlO2xlZnQ6YXV0b30ucHVzaC01e3Bvc2l0aW9uOnJlbGF0aXZlO2xlZnQ6NDEuNjY2NjclO3JpZ2h0OmF1dG99LnB1bGwtNXtwb3NpdGlvbjpyZWxhdGl2ZTtyaWdodDo0MS42NjY2NyU7bGVmdDphdXRvfS5wdXNoLTZ7cG9zaXRpb246cmVsYXRpdmU7bGVmdDo1MCU7cmlnaHQ6YXV0b30ucHVsbC02e3Bvc2l0aW9uOnJlbGF0aXZlO3JpZ2h0OjUwJTtsZWZ0OmF1dG99LnB1c2gtN3twb3NpdGlvbjpyZWxhdGl2ZTtsZWZ0OjU4LjMzMzMzJTtyaWdodDphdXRvfS5wdWxsLTd7cG9zaXRpb246cmVsYXRpdmU7cmlnaHQ6NTguMzMzMzMlO2xlZnQ6YXV0b30ucHVzaC04e3Bvc2l0aW9uOnJlbGF0aXZlO2xlZnQ6NjYuNjY2NjclO3JpZ2h0OmF1dG99LnB1bGwtOHtwb3NpdGlvbjpyZWxhdGl2ZTtyaWdodDo2Ni42NjY2NyU7bGVmdDphdXRvfS5wdXNoLTl7cG9zaXRpb246cmVsYXRpdmU7bGVmdDo3NSU7cmlnaHQ6YXV0b30ucHVsbC05e3Bvc2l0aW9uOnJlbGF0aXZlO3JpZ2h0Ojc1JTtsZWZ0OmF1dG99LnB1c2gtMTB7cG9zaXRpb246cmVsYXRpdmU7bGVmdDo4My4zMzMzMyU7cmlnaHQ6YXV0b30ucHVsbC0xMHtwb3NpdGlvbjpyZWxhdGl2ZTtyaWdodDo4My4zMzMzMyU7bGVmdDphdXRvfS5zbWFsbC1wdXNoLTJ7bGVmdDppbmhlcml0fS5zbWFsbC1wdWxsLTJ7cmlnaHQ6aW5oZXJpdH0uc21hbGwtcHVzaC0ze2xlZnQ6aW5oZXJpdH0uc21hbGwtcHVsbC0ze3JpZ2h0OmluaGVyaXR9LnNtYWxsLXB1c2gtNHtsZWZ0OmluaGVyaXR9LnNtYWxsLXB1bGwtNHtyaWdodDppbmhlcml0fS5zbWFsbC1wdXNoLTV7bGVmdDppbmhlcml0fS5zbWFsbC1wdWxsLTV7cmlnaHQ6aW5oZXJpdH0uc21hbGwtcHVzaC02e2xlZnQ6aW5oZXJpdH0uc21hbGwtcHVsbC02e3JpZ2h0OmluaGVyaXR9LnNtYWxsLXB1c2gtN3tsZWZ0OmluaGVyaXR9LnNtYWxsLXB1bGwtN3tyaWdodDppbmhlcml0fS5zbWFsbC1wdXNoLTh7bGVmdDppbmhlcml0fS5zbWFsbC1wdWxsLTh7cmlnaHQ6aW5oZXJpdH0uc21hbGwtcHVzaC05e2xlZnQ6aW5oZXJpdH0uc21hbGwtcHVsbC05e3JpZ2h0OmluaGVyaXR9LnNtYWxsLXB1c2gtMTB7bGVmdDppbmhlcml0fS5zbWFsbC1wdWxsLTEwe3JpZ2h0OmluaGVyaXR9LmNvbHVtbi5sYXJnZS1jZW50ZXJlZCwuY29sdW1ucy5sYXJnZS1jZW50ZXJlZHtwb3NpdGlvbjpyZWxhdGl2ZTttYXJnaW4tbGVmdDphdXRvO21hcmdpbi1yaWdodDphdXRvO2Zsb2F0Om5vbmUgIWltcG9ydGFudH19LnNob3ctZm9yLXNtYWxsLC5zaG93LWZvci1tZWRpdW0tZG93biwuc2hvdy1mb3ItbGFyZ2UtZG93bntkaXNwbGF5OmluaGVyaXQgIWltcG9ydGFudH0uc2hvdy1mb3ItbWVkaXVtLC5zaG93LWZvci1tZWRpdW0tdXAsLnNob3ctZm9yLWxhcmdlLC5zaG93LWZvci1sYXJnZS11cCwuc2hvdy1mb3IteGxhcmdle2Rpc3BsYXk6bm9uZSAhaW1wb3J0YW50fS5oaWRlLWZvci1tZWRpdW0sLmhpZGUtZm9yLW1lZGl1bS11cCwuaGlkZS1mb3ItbGFyZ2UsLmhpZGUtZm9yLWxhcmdlLXVwLC5oaWRlLWZvci14bGFyZ2V7ZGlzcGxheTppbmhlcml0ICFpbXBvcnRhbnR9LmhpZGUtZm9yLXNtYWxsLC5oaWRlLWZvci1tZWRpdW0tZG93biwuaGlkZS1mb3ItbGFyZ2UtZG93bntkaXNwbGF5Om5vbmUgIWltcG9ydGFudH10YWJsZS5zaG93LWZvci1zbWFsbCx0YWJsZS5zaG93LWZvci1tZWRpdW0tZG93bix0YWJsZS5zaG93LWZvci1sYXJnZS1kb3duLHRhYmxlLmhpZGUtZm9yLW1lZGl1bSx0YWJsZS5oaWRlLWZvci1tZWRpdW0tdXAsdGFibGUuaGlkZS1mb3ItbGFyZ2UsdGFibGUuaGlkZS1mb3ItbGFyZ2UtdXAsdGFibGUuaGlkZS1mb3IteGxhcmdle2Rpc3BsYXk6dGFibGV9dGhlYWQuc2hvdy1mb3Itc21hbGwsdGhlYWQuc2hvdy1mb3ItbWVkaXVtLWRvd24sdGhlYWQuc2hvdy1mb3ItbGFyZ2UtZG93bix0aGVhZC5oaWRlLWZvci1tZWRpdW0sdGhlYWQuaGlkZS1mb3ItbWVkaXVtLXVwLHRoZWFkLmhpZGUtZm9yLWxhcmdlLHRoZWFkLmhpZGUtZm9yLWxhcmdlLXVwLHRoZWFkLmhpZGUtZm9yLXhsYXJnZXtkaXNwbGF5OnRhYmxlLWhlYWRlci1ncm91cCAhaW1wb3J0YW50fXRib2R5LnNob3ctZm9yLXNtYWxsLHRib2R5LnNob3ctZm9yLW1lZGl1bS1kb3duLHRib2R5LnNob3ctZm9yLWxhcmdlLWRvd24sdGJvZHkuaGlkZS1mb3ItbWVkaXVtLHRib2R5LmhpZGUtZm9yLW1lZGl1bS11cCx0Ym9keS5oaWRlLWZvci1sYXJnZSx0Ym9keS5oaWRlLWZvci1sYXJnZS11cCx0Ym9keS5oaWRlLWZvci14bGFyZ2V7ZGlzcGxheTp0YWJsZS1yb3ctZ3JvdXAgIWltcG9ydGFudH10ci5zaG93LWZvci1zbWFsbCx0ci5zaG93LWZvci1tZWRpdW0tZG93bix0ci5zaG93LWZvci1sYXJnZS1kb3duLHRyLmhpZGUtZm9yLW1lZGl1bSx0ci5oaWRlLWZvci1tZWRpdW0tdXAsdHIuaGlkZS1mb3ItbGFyZ2UsdHIuaGlkZS1mb3ItbGFyZ2UtdXAsdHIuaGlkZS1mb3IteGxhcmdle2Rpc3BsYXk6dGFibGUtcm93ICFpbXBvcnRhbnR9dGQuc2hvdy1mb3Itc21hbGwsdGQuc2hvdy1mb3ItbWVkaXVtLWRvd24sdGQuc2hvdy1mb3ItbGFyZ2UtZG93bix0ZC5oaWRlLWZvci1tZWRpdW0sdGQuaGlkZS1mb3ItbWVkaXVtLXVwLHRkLmhpZGUtZm9yLWxhcmdlLHRkLmhpZGUtZm9yLWxhcmdlLXVwLHRkLmhpZGUtZm9yLXhsYXJnZSx0aC5zaG93LWZvci1zbWFsbCx0aC5zaG93LWZvci1tZWRpdW0tZG93bix0aC5zaG93LWZvci1sYXJnZS1kb3duLHRoLmhpZGUtZm9yLW1lZGl1bSx0aC5oaWRlLWZvci1tZWRpdW0tdXAsdGguaGlkZS1mb3ItbGFyZ2UsdGguaGlkZS1mb3ItbGFyZ2UtdXAsdGguaGlkZS1mb3IteGxhcmdle2Rpc3BsYXk6dGFibGUtY2VsbCAhaW1wb3J0YW50fUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNDhlbSl7LnNob3ctZm9yLW1lZGl1bSwuc2hvdy1mb3ItbWVkaXVtLXVwe2Rpc3BsYXk6aW5oZXJpdCAhaW1wb3J0YW50fS5zaG93LWZvci1zbWFsbHtkaXNwbGF5Om5vbmUgIWltcG9ydGFudH0uaGlkZS1mb3Itc21hbGx7ZGlzcGxheTppbmhlcml0ICFpbXBvcnRhbnR9LmhpZGUtZm9yLW1lZGl1bSwuaGlkZS1mb3ItbWVkaXVtLXVwe2Rpc3BsYXk6bm9uZSAhaW1wb3J0YW50fXRhYmxlLnNob3ctZm9yLW1lZGl1bSx0YWJsZS5zaG93LWZvci1tZWRpdW0tdXAsdGFibGUuaGlkZS1mb3Itc21hbGx7ZGlzcGxheTp0YWJsZX10aGVhZC5zaG93LWZvci1tZWRpdW0sdGhlYWQuc2hvdy1mb3ItbWVkaXVtLXVwLHRoZWFkLmhpZGUtZm9yLXNtYWxse2Rpc3BsYXk6dGFibGUtaGVhZGVyLWdyb3VwICFpbXBvcnRhbnR9dGJvZHkuc2hvdy1mb3ItbWVkaXVtLHRib2R5LnNob3ctZm9yLW1lZGl1bS11cCx0Ym9keS5oaWRlLWZvci1zbWFsbHtkaXNwbGF5OnRhYmxlLXJvdy1ncm91cCAhaW1wb3J0YW50fXRyLnNob3ctZm9yLW1lZGl1bSx0ci5zaG93LWZvci1tZWRpdW0tdXAsdHIuaGlkZS1mb3Itc21hbGx7ZGlzcGxheTp0YWJsZS1yb3cgIWltcG9ydGFudH10ZC5zaG93LWZvci1tZWRpdW0sdGQuc2hvdy1mb3ItbWVkaXVtLXVwLHRkLmhpZGUtZm9yLXNtYWxsLHRoLnNob3ctZm9yLW1lZGl1bSx0aC5zaG93LWZvci1tZWRpdW0tdXAsdGguaGlkZS1mb3Itc21hbGx7ZGlzcGxheTp0YWJsZS1jZWxsICFpbXBvcnRhbnR9fUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogODBlbSl7LnNob3ctZm9yLWxhcmdlLC5zaG93LWZvci1sYXJnZS11cHtkaXNwbGF5OmluaGVyaXQgIWltcG9ydGFudH0uc2hvdy1mb3ItbWVkaXVtLC5zaG93LWZvci1tZWRpdW0tZG93bntkaXNwbGF5Om5vbmUgIWltcG9ydGFudH0uaGlkZS1mb3ItbWVkaXVtLC5oaWRlLWZvci1tZWRpdW0tZG93bntkaXNwbGF5OmluaGVyaXQgIWltcG9ydGFudH0uaGlkZS1mb3ItbGFyZ2UsLmhpZGUtZm9yLWxhcmdlLXVwe2Rpc3BsYXk6bm9uZSAhaW1wb3J0YW50fXRhYmxlLnNob3ctZm9yLWxhcmdlLHRhYmxlLnNob3ctZm9yLWxhcmdlLXVwLHRhYmxlLmhpZGUtZm9yLW1lZGl1bSx0YWJsZS5oaWRlLWZvci1tZWRpdW0tZG93bntkaXNwbGF5OnRhYmxlfXRoZWFkLnNob3ctZm9yLWxhcmdlLHRoZWFkLnNob3ctZm9yLWxhcmdlLXVwLHRoZWFkLmhpZGUtZm9yLW1lZGl1bSx0aGVhZC5oaWRlLWZvci1tZWRpdW0tZG93bntkaXNwbGF5OnRhYmxlLWhlYWRlci1ncm91cCAhaW1wb3J0YW50fXRib2R5LnNob3ctZm9yLWxhcmdlLHRib2R5LnNob3ctZm9yLWxhcmdlLXVwLHRib2R5LmhpZGUtZm9yLW1lZGl1bSx0Ym9keS5oaWRlLWZvci1tZWRpdW0tZG93bntkaXNwbGF5OnRhYmxlLXJvdy1ncm91cCAhaW1wb3J0YW50fXRyLnNob3ctZm9yLWxhcmdlLHRyLnNob3ctZm9yLWxhcmdlLXVwLHRyLmhpZGUtZm9yLW1lZGl1bSx0ci5oaWRlLWZvci1tZWRpdW0tZG93bntkaXNwbGF5OnRhYmxlLXJvdyAhaW1wb3J0YW50fXRkLnNob3ctZm9yLWxhcmdlLHRkLnNob3ctZm9yLWxhcmdlLXVwLHRkLmhpZGUtZm9yLW1lZGl1bSx0ZC5oaWRlLWZvci1tZWRpdW0tZG93bix0aC5zaG93LWZvci1sYXJnZSx0aC5zaG93LWZvci1sYXJnZS11cCx0aC5oaWRlLWZvci1tZWRpdW0sdGguaGlkZS1mb3ItbWVkaXVtLWRvd257ZGlzcGxheTp0YWJsZS1jZWxsICFpbXBvcnRhbnR9fUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogOTBlbSl7LnNob3ctZm9yLXhsYXJnZXtkaXNwbGF5OmluaGVyaXQgIWltcG9ydGFudH0uc2hvdy1mb3ItbGFyZ2UsLnNob3ctZm9yLWxhcmdlLWRvd257ZGlzcGxheTpub25lICFpbXBvcnRhbnR9LmhpZGUtZm9yLWxhcmdlLC5oaWRlLWZvci1sYXJnZS1kb3due2Rpc3BsYXk6aW5oZXJpdCAhaW1wb3J0YW50fS5oaWRlLWZvci14bGFyZ2V7ZGlzcGxheTpub25lICFpbXBvcnRhbnR9dGFibGUuc2hvdy1mb3IteGxhcmdlLHRhYmxlLmhpZGUtZm9yLWxhcmdlLHRhYmxlLmhpZGUtZm9yLWxhcmdlLWRvd257ZGlzcGxheTp0YWJsZX10aGVhZC5zaG93LWZvci14bGFyZ2UsdGhlYWQuaGlkZS1mb3ItbGFyZ2UsdGhlYWQuaGlkZS1mb3ItbGFyZ2UtZG93bntkaXNwbGF5OnRhYmxlLWhlYWRlci1ncm91cCAhaW1wb3J0YW50fXRib2R5LnNob3ctZm9yLXhsYXJnZSx0Ym9keS5oaWRlLWZvci1sYXJnZSx0Ym9keS5oaWRlLWZvci1sYXJnZS1kb3due2Rpc3BsYXk6dGFibGUtcm93LWdyb3VwICFpbXBvcnRhbnR9dHIuc2hvdy1mb3IteGxhcmdlLHRyLmhpZGUtZm9yLWxhcmdlLHRyLmhpZGUtZm9yLWxhcmdlLWRvd257ZGlzcGxheTp0YWJsZS1yb3cgIWltcG9ydGFudH10ZC5zaG93LWZvci14bGFyZ2UsdGQuaGlkZS1mb3ItbGFyZ2UsdGQuaGlkZS1mb3ItbGFyZ2UtZG93bix0aC5zaG93LWZvci14bGFyZ2UsdGguaGlkZS1mb3ItbGFyZ2UsdGguaGlkZS1mb3ItbGFyZ2UtZG93bntkaXNwbGF5OnRhYmxlLWNlbGwgIWltcG9ydGFudH19LnNob3ctZm9yLWxhbmRzY2FwZSwuaGlkZS1mb3ItcG9ydHJhaXR7ZGlzcGxheTppbmhlcml0ICFpbXBvcnRhbnR9LmhpZGUtZm9yLWxhbmRzY2FwZSwuc2hvdy1mb3ItcG9ydHJhaXR7ZGlzcGxheTpub25lICFpbXBvcnRhbnR9dGFibGUuaGlkZS1mb3ItbGFuZHNjYXBlLHRhYmxlLnNob3ctZm9yLXBvcnRyYWl0e2Rpc3BsYXk6dGFibGV9dGhlYWQuaGlkZS1mb3ItbGFuZHNjYXBlLHRoZWFkLnNob3ctZm9yLXBvcnRyYWl0e2Rpc3BsYXk6dGFibGUtaGVhZGVyLWdyb3VwICFpbXBvcnRhbnR9dGJvZHkuaGlkZS1mb3ItbGFuZHNjYXBlLHRib2R5LnNob3ctZm9yLXBvcnRyYWl0e2Rpc3BsYXk6dGFibGUtcm93LWdyb3VwICFpbXBvcnRhbnR9dHIuaGlkZS1mb3ItbGFuZHNjYXBlLHRyLnNob3ctZm9yLXBvcnRyYWl0e2Rpc3BsYXk6dGFibGUtcm93ICFpbXBvcnRhbnR9dGQuaGlkZS1mb3ItbGFuZHNjYXBlLHRkLnNob3ctZm9yLXBvcnRyYWl0LHRoLmhpZGUtZm9yLWxhbmRzY2FwZSx0aC5zaG93LWZvci1wb3J0cmFpdHtkaXNwbGF5OnRhYmxlLWNlbGwgIWltcG9ydGFudH1AbWVkaWEgb25seSBzY3JlZW4gYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKXsuc2hvdy1mb3ItbGFuZHNjYXBlLC5oaWRlLWZvci1wb3J0cmFpdHtkaXNwbGF5OmluaGVyaXQgIWltcG9ydGFudH0uaGlkZS1mb3ItbGFuZHNjYXBlLC5zaG93LWZvci1wb3J0cmFpdHtkaXNwbGF5Om5vbmUgIWltcG9ydGFudH10YWJsZS5zaG93LWZvci1sYW5kc2NhcGUsdGFibGUuaGlkZS1mb3ItcG9ydHJhaXR7ZGlzcGxheTp0YWJsZX10aGVhZC5zaG93LWZvci1sYW5kc2NhcGUsdGhlYWQuaGlkZS1mb3ItcG9ydHJhaXR7ZGlzcGxheTp0YWJsZS1oZWFkZXItZ3JvdXAgIWltcG9ydGFudH10Ym9keS5zaG93LWZvci1sYW5kc2NhcGUsdGJvZHkuaGlkZS1mb3ItcG9ydHJhaXR7ZGlzcGxheTp0YWJsZS1yb3ctZ3JvdXAgIWltcG9ydGFudH10ci5zaG93LWZvci1sYW5kc2NhcGUsdHIuaGlkZS1mb3ItcG9ydHJhaXR7ZGlzcGxheTp0YWJsZS1yb3cgIWltcG9ydGFudH10ZC5zaG93LWZvci1sYW5kc2NhcGUsdGQuaGlkZS1mb3ItcG9ydHJhaXQsdGguc2hvdy1mb3ItbGFuZHNjYXBlLHRoLmhpZGUtZm9yLXBvcnRyYWl0e2Rpc3BsYXk6dGFibGUtY2VsbCAhaW1wb3J0YW50fX1AbWVkaWEgb25seSBzY3JlZW4gYW5kIChvcmllbnRhdGlvbjogcG9ydHJhaXQpey5zaG93LWZvci1wb3J0cmFpdCwuaGlkZS1mb3ItbGFuZHNjYXBle2Rpc3BsYXk6aW5oZXJpdCAhaW1wb3J0YW50fS5oaWRlLWZvci1wb3J0cmFpdCwuc2hvdy1mb3ItbGFuZHNjYXBle2Rpc3BsYXk6bm9uZSAhaW1wb3J0YW50fXRhYmxlLnNob3ctZm9yLXBvcnRyYWl0LHRhYmxlLmhpZGUtZm9yLWxhbmRzY2FwZXtkaXNwbGF5OnRhYmxlfXRoZWFkLnNob3ctZm9yLXBvcnRyYWl0LHRoZWFkLmhpZGUtZm9yLWxhbmRzY2FwZXtkaXNwbGF5OnRhYmxlLWhlYWRlci1ncm91cCAhaW1wb3J0YW50fXRib2R5LnNob3ctZm9yLXBvcnRyYWl0LHRib2R5LmhpZGUtZm9yLWxhbmRzY2FwZXtkaXNwbGF5OnRhYmxlLXJvdy1ncm91cCAhaW1wb3J0YW50fXRyLnNob3ctZm9yLXBvcnRyYWl0LHRyLmhpZGUtZm9yLWxhbmRzY2FwZXtkaXNwbGF5OnRhYmxlLXJvdyAhaW1wb3J0YW50fXRkLnNob3ctZm9yLXBvcnRyYWl0LHRkLmhpZGUtZm9yLWxhbmRzY2FwZSx0aC5zaG93LWZvci1wb3J0cmFpdCx0aC5oaWRlLWZvci1sYW5kc2NhcGV7ZGlzcGxheTp0YWJsZS1jZWxsICFpbXBvcnRhbnR9fS5zaG93LWZvci10b3VjaHtkaXNwbGF5Om5vbmUgIWltcG9ydGFudH0uaGlkZS1mb3ItdG91Y2h7ZGlzcGxheTppbmhlcml0ICFpbXBvcnRhbnR9LnRvdWNoIC5zaG93LWZvci10b3VjaHtkaXNwbGF5OmluaGVyaXQgIWltcG9ydGFudH0udG91Y2ggLmhpZGUtZm9yLXRvdWNoe2Rpc3BsYXk6bm9uZSAhaW1wb3J0YW50fXRhYmxlLmhpZGUtZm9yLXRvdWNoe2Rpc3BsYXk6dGFibGV9LnRvdWNoIHRhYmxlLnNob3ctZm9yLXRvdWNoe2Rpc3BsYXk6dGFibGV9dGhlYWQuaGlkZS1mb3ItdG91Y2h7ZGlzcGxheTp0YWJsZS1oZWFkZXItZ3JvdXAgIWltcG9ydGFudH0udG91Y2ggdGhlYWQuc2hvdy1mb3ItdG91Y2h7ZGlzcGxheTp0YWJsZS1oZWFkZXItZ3JvdXAgIWltcG9ydGFudH10Ym9keS5oaWRlLWZvci10b3VjaHtkaXNwbGF5OnRhYmxlLXJvdy1ncm91cCAhaW1wb3J0YW50fS50b3VjaCB0Ym9keS5zaG93LWZvci10b3VjaHtkaXNwbGF5OnRhYmxlLXJvdy1ncm91cCAhaW1wb3J0YW50fXRyLmhpZGUtZm9yLXRvdWNoe2Rpc3BsYXk6dGFibGUtcm93ICFpbXBvcnRhbnR9LnRvdWNoIHRyLnNob3ctZm9yLXRvdWNoe2Rpc3BsYXk6dGFibGUtcm93ICFpbXBvcnRhbnR9dGQuaGlkZS1mb3ItdG91Y2h7ZGlzcGxheTp0YWJsZS1jZWxsICFpbXBvcnRhbnR9LnRvdWNoIHRkLnNob3ctZm9yLXRvdWNoe2Rpc3BsYXk6dGFibGUtY2VsbCAhaW1wb3J0YW50fXRoLmhpZGUtZm9yLXRvdWNoe2Rpc3BsYXk6dGFibGUtY2VsbCAhaW1wb3J0YW50fS50b3VjaCB0aC5zaG93LWZvci10b3VjaHtkaXNwbGF5OnRhYmxlLWNlbGwgIWltcG9ydGFudH1AbWVkaWEgb25seSBzY3JlZW57W2NsYXNzKj0iYmxvY2stZ3JpZC0iXXtkaXNwbGF5OmJsb2NrO3BhZGRpbmc6MDttYXJnaW46MCAtMTBweDsqem9vbToxfVtjbGFzcyo9ImJsb2NrLWdyaWQtIl06YmVmb3JlLFtjbGFzcyo9ImJsb2NrLWdyaWQtIl06YWZ0ZXJ7Y29udGVudDoiICI7ZGlzcGxheTp0YWJsZX1bY2xhc3MqPSJibG9jay1ncmlkLSJdOmFmdGVye2NsZWFyOmJvdGh9W2NsYXNzKj0iYmxvY2stZ3JpZC0iXT5saXtkaXNwbGF5OmJsb2NrO2hlaWdodDphdXRvO2Zsb2F0OmxlZnQ7cGFkZGluZzowIDEwcHggMTBweH0uc21hbGwtYmxvY2stZ3JpZC0xPmxpe3dpZHRoOjEwMCU7cGFkZGluZzowIDEwcHggMTBweH0uc21hbGwtYmxvY2stZ3JpZC0xPmxpOm50aC1vZi10eXBlKDFuKzEpe2NsZWFyOmJvdGh9LnNtYWxsLWJsb2NrLWdyaWQtMj5saXt3aWR0aDo1MCU7cGFkZGluZzowIDEwcHggMTBweH0uc21hbGwtYmxvY2stZ3JpZC0yPmxpOm50aC1vZi10eXBlKDJuKzEpe2NsZWFyOmJvdGh9LnNtYWxsLWJsb2NrLWdyaWQtMz5saXt3aWR0aDozMy4zMzMzMyU7cGFkZGluZzowIDEwcHggMTBweH0uc21hbGwtYmxvY2stZ3JpZC0zPmxpOm50aC1vZi10eXBlKDNuKzEpe2NsZWFyOmJvdGh9LnNtYWxsLWJsb2NrLWdyaWQtND5saXt3aWR0aDoyNSU7cGFkZGluZzowIDEwcHggMTBweH0uc21hbGwtYmxvY2stZ3JpZC00PmxpOm50aC1vZi10eXBlKDRuKzEpe2NsZWFyOmJvdGh9LnNtYWxsLWJsb2NrLWdyaWQtNT5saXt3aWR0aDoyMCU7cGFkZGluZzowIDEwcHggMTBweH0uc21hbGwtYmxvY2stZ3JpZC01PmxpOm50aC1vZi10eXBlKDVuKzEpe2NsZWFyOmJvdGh9LnNtYWxsLWJsb2NrLWdyaWQtNj5saXt3aWR0aDoxNi42NjY2NyU7cGFkZGluZzowIDEwcHggMTBweH0uc21hbGwtYmxvY2stZ3JpZC02PmxpOm50aC1vZi10eXBlKDZuKzEpe2NsZWFyOmJvdGh9LnNtYWxsLWJsb2NrLWdyaWQtNz5saXt3aWR0aDoxNC4yODU3MSU7cGFkZGluZzowIDEwcHggMTBweH0uc21hbGwtYmxvY2stZ3JpZC03PmxpOm50aC1vZi10eXBlKDduKzEpe2NsZWFyOmJvdGh9LnNtYWxsLWJsb2NrLWdyaWQtOD5saXt3aWR0aDoxMi41JTtwYWRkaW5nOjAgMTBweCAxMHB4fS5zbWFsbC1ibG9jay1ncmlkLTg+bGk6bnRoLW9mLXR5cGUoOG4rMSl7Y2xlYXI6Ym90aH0uc21hbGwtYmxvY2stZ3JpZC05Pmxpe3dpZHRoOjExLjExMTExJTtwYWRkaW5nOjAgMTBweCAxMHB4fS5zbWFsbC1ibG9jay1ncmlkLTk+bGk6bnRoLW9mLXR5cGUoOW4rMSl7Y2xlYXI6Ym90aH0uc21hbGwtYmxvY2stZ3JpZC0xMD5saXt3aWR0aDoxMCU7cGFkZGluZzowIDEwcHggMTBweH0uc21hbGwtYmxvY2stZ3JpZC0xMD5saTpudGgtb2YtdHlwZSgxMG4rMSl7Y2xlYXI6Ym90aH0uc21hbGwtYmxvY2stZ3JpZC0xMT5saXt3aWR0aDo5LjA5MDkxJTtwYWRkaW5nOjAgMTBweCAxMHB4fS5zbWFsbC1ibG9jay1ncmlkLTExPmxpOm50aC1vZi10eXBlKDExbisxKXtjbGVhcjpib3RofS5zbWFsbC1ibG9jay1ncmlkLTEyPmxpe3dpZHRoOjguMzMzMzMlO3BhZGRpbmc6MCAxMHB4IDEwcHh9LnNtYWxsLWJsb2NrLWdyaWQtMTI+bGk6bnRoLW9mLXR5cGUoMTJuKzEpe2NsZWFyOmJvdGh9fUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNDhlbSl7LmxhcmdlLWJsb2NrLWdyaWQtMT5saXt3aWR0aDoxMDAlO3BhZGRpbmc6MCAxMHB4IDEwcHh9LmxhcmdlLWJsb2NrLWdyaWQtMT5saTpudGgtb2YtdHlwZSgxbisxKXtjbGVhcjpib3RofS5sYXJnZS1ibG9jay1ncmlkLTI+bGl7d2lkdGg6NTAlO3BhZGRpbmc6MCAxMHB4IDEwcHh9LmxhcmdlLWJsb2NrLWdyaWQtMj5saTpudGgtb2YtdHlwZSgybisxKXtjbGVhcjpib3RofS5sYXJnZS1ibG9jay1ncmlkLTM+bGl7d2lkdGg6MzMuMzMzMzMlO3BhZGRpbmc6MCAxMHB4IDEwcHh9LmxhcmdlLWJsb2NrLWdyaWQtMz5saTpudGgtb2YtdHlwZSgzbisxKXtjbGVhcjpib3RofS5sYXJnZS1ibG9jay1ncmlkLTQ+bGl7d2lkdGg6MjUlO3BhZGRpbmc6MCAxMHB4IDEwcHh9LmxhcmdlLWJsb2NrLWdyaWQtND5saTpudGgtb2YtdHlwZSg0bisxKXtjbGVhcjpib3RofS5sYXJnZS1ibG9jay1ncmlkLTU+bGl7d2lkdGg6MjAlO3BhZGRpbmc6MCAxMHB4IDEwcHh9LmxhcmdlLWJsb2NrLWdyaWQtNT5saTpudGgtb2YtdHlwZSg1bisxKXtjbGVhcjpib3RofS5sYXJnZS1ibG9jay1ncmlkLTY+bGl7d2lkdGg6MTYuNjY2NjclO3BhZGRpbmc6MCAxMHB4IDEwcHh9LmxhcmdlLWJsb2NrLWdyaWQtNj5saTpudGgtb2YtdHlwZSg2bisxKXtjbGVhcjpib3RofS5sYXJnZS1ibG9jay1ncmlkLTc+bGl7d2lkdGg6MTQuMjg1NzElO3BhZGRpbmc6MCAxMHB4IDEwcHh9LmxhcmdlLWJsb2NrLWdyaWQtNz5saTpudGgtb2YtdHlwZSg3bisxKXtjbGVhcjpib3RofS5sYXJnZS1ibG9jay1ncmlkLTg+bGl7d2lkdGg6MTIuNSU7cGFkZGluZzowIDEwcHggMTBweH0ubGFyZ2UtYmxvY2stZ3JpZC04PmxpOm50aC1vZi10eXBlKDhuKzEpe2NsZWFyOmJvdGh9LmxhcmdlLWJsb2NrLWdyaWQtOT5saXt3aWR0aDoxMS4xMTExMSU7cGFkZGluZzowIDEwcHggMTBweH0ubGFyZ2UtYmxvY2stZ3JpZC05PmxpOm50aC1vZi10eXBlKDluKzEpe2NsZWFyOmJvdGh9LmxhcmdlLWJsb2NrLWdyaWQtMTA+bGl7d2lkdGg6MTAlO3BhZGRpbmc6MCAxMHB4IDEwcHh9LmxhcmdlLWJsb2NrLWdyaWQtMTA+bGk6bnRoLW9mLXR5cGUoMTBuKzEpe2NsZWFyOmJvdGh9LmxhcmdlLWJsb2NrLWdyaWQtMTE+bGl7d2lkdGg6OS4wOTA5MSU7cGFkZGluZzowIDEwcHggMTBweH0ubGFyZ2UtYmxvY2stZ3JpZC0xMT5saTpudGgtb2YtdHlwZSgxMW4rMSl7Y2xlYXI6Ym90aH0ubGFyZ2UtYmxvY2stZ3JpZC0xMj5saXt3aWR0aDo4LjMzMzMzJTtwYWRkaW5nOjAgMTBweCAxMHB4fS5sYXJnZS1ibG9jay1ncmlkLTEyPmxpOm50aC1vZi10eXBlKDEybisxKXtjbGVhcjpib3RofVtjbGFzcyo9InNtYWxsLWJsb2NrLWdyaWQtIl0+bGl7Y2xlYXI6bm9uZSAhaW1wb3J0YW50fX1wLmxlYWR7Zm9udC1zaXplOjEuMjE4NzVlbTtsaW5lLWhlaWdodDoxLjZ9LnN1YmhlYWRlcntsaW5lLWhlaWdodDoxLjQ7Y29sb3I6IzZmNmY2Zjtmb250LXdlaWdodDozMDA7bWFyZ2luLXRvcDowLjJlbTttYXJnaW4tYm90dG9tOjAuNWVtfWRpdixkbCxkdCxkZCx1bCxvbCxsaSxoMSxoMixoMyxoNCxoNSxoNixwcmUsZm9ybSxwLGJsb2NrcXVvdGUsdGgsdGR7bWFyZ2luOjA7cGFkZGluZzowO2RpcmVjdGlvbjpsdHJ9YXtjb2xvcjojMmJhNmNiO3RleHQtZGVjb3JhdGlvbjpub25lO2xpbmUtaGVpZ2h0OmluaGVyaXR9YTpob3ZlcixhOmZvY3Vze2NvbG9yOiMyNzk1YjZ9YSBpbWd7Ym9yZGVyOm5vbmV9cHtmb250LWZhbWlseTppbmhlcml0O2ZvbnQtd2VpZ2h0Om5vcm1hbDtmb250LXNpemU6MWVtO2xpbmUtaGVpZ2h0OjEuNjttYXJnaW4tYm90dG9tOjEuMjVlbTt0ZXh0LXJlbmRlcmluZzpvcHRpbWl6ZUxlZ2liaWxpdHl9cCBhc2lkZXtmb250LXNpemU6MC44NzVlbTtsaW5lLWhlaWdodDoxLjM1O2ZvbnQtc3R5bGU6aXRhbGljfWgxLGgyLGgzLGg0LGg1LGg2e2ZvbnQtZmFtaWx5OiJIZWx2ZXRpY2EgTmV1ZSIsIkhlbHZldGljYSIsSGVsdmV0aWNhLEFyaWFsLHNhbnMtc2VyaWY7Zm9udC13ZWlnaHQ6Ym9sZDtmb250LXN0eWxlOm5vcm1hbDtjb2xvcjojMjIyO3RleHQtcmVuZGVyaW5nOm9wdGltaXplTGVnaWJpbGl0eTttYXJnaW4tdG9wOjAuMmVtO21hcmdpbi1ib3R0b206MC41ZW07bGluZS1oZWlnaHQ6MS4yMTI1ZW19aDEgc21hbGwsaDIgc21hbGwsaDMgc21hbGwsaDQgc21hbGwsaDUgc21hbGwsaDYgc21hbGx7Zm9udC1zaXplOjYwJTtjb2xvcjojNmY2ZjZmO2xpbmUtaGVpZ2h0OjB9aDF7Zm9udC1zaXplOjIuMTI1ZW19aDJ7Zm9udC1zaXplOjEuNjg3NWVtfWgze2ZvbnQtc2l6ZToxLjM3NWVtfWg0e2ZvbnQtc2l6ZToxLjEyNWVtfWg1e2ZvbnQtc2l6ZToxLjEyNWVtfWg2e2ZvbnQtc2l6ZToxZW19aHJ7Ym9yZGVyOnNvbGlkICNkZGQ7Ym9yZGVyLXdpZHRoOjFweCAwIDA7Y2xlYXI6Ym90aDttYXJnaW46MS4yNWVtIDAgMS4xODc1ZW07aGVpZ2h0OjB9ZW0saXtmb250LXN0eWxlOml0YWxpYztsaW5lLWhlaWdodDppbmhlcml0fXN0cm9uZyxie2ZvbnQtd2VpZ2h0OmJvbGQ7bGluZS1oZWlnaHQ6aW5oZXJpdH1zbWFsbHtmb250LXNpemU6NjAlO2xpbmUtaGVpZ2h0OmluaGVyaXR9Y29kZXtmb250LWZhbWlseTpDb25zb2xhcywiTGliZXJhdGlvbiBNb25vIixDb3VyaWVyLG1vbm9zcGFjZTtmb250LXdlaWdodDpib2xkO2NvbG9yOiM3ZjBhMGN9dWwsb2wsZGx7Zm9udC1zaXplOjFlbTtsaW5lLWhlaWdodDoxLjY7bWFyZ2luLWJvdHRvbToxLjI1ZW07bGlzdC1zdHlsZS1wb3NpdGlvbjpvdXRzaWRlO2ZvbnQtZmFtaWx5OmluaGVyaXR9dWwgbGkgdWwsdWwgbGkgb2x7bWFyZ2luLWxlZnQ6MS4yNWVtO21hcmdpbi1ib3R0b206MDtmb250LXNpemU6MWVtfXVsLnNxdWFyZSBsaSB1bCx1bC5jaXJjbGUgbGkgdWwsdWwuZGlzYyBsaSB1bHtsaXN0LXN0eWxlOmluaGVyaXR9dWwuc3F1YXJle2xpc3Qtc3R5bGUtdHlwZTpzcXVhcmV9dWwuY2lyY2xle2xpc3Qtc3R5bGUtdHlwZTpjaXJjbGV9dWwuZGlzY3tsaXN0LXN0eWxlLXR5cGU6ZGlzY311bC5uby1idWxsZXR7bGlzdC1zdHlsZTpub25lfW9sIGxpIHVsLG9sIGxpIG9se21hcmdpbi1sZWZ0OjEuMjVlbTttYXJnaW4tYm90dG9tOjB9ZGwgZHR7bWFyZ2luLWJvdHRvbTowLjNlbTtmb250LXdlaWdodDpib2xkfWRsIGRke21hcmdpbi1ib3R0b206MC43NWVtfWFiYnIsYWNyb255bXt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2U7Zm9udC1zaXplOjkwJTtjb2xvcjojMjIyO2JvcmRlci1ib3R0b206MXB4IGRvdHRlZCAjZGRkO2N1cnNvcjpoZWxwfWFiYnJ7dGV4dC10cmFuc2Zvcm06bm9uZX1ibG9ja3F1b3Rle21hcmdpbjowIDAgMS4yNWVtO3BhZGRpbmc6MC41NjI1ZW0gMS4yNWVtIDAgMS4xODc1ZW07Ym9yZGVyLWxlZnQ6MXB4IHNvbGlkICNkZGR9YmxvY2txdW90ZSBjaXRle2Rpc3BsYXk6YmxvY2s7Zm9udC1zaXplOjAuODEyNWVtO2NvbG9yOiM1NTV9YmxvY2txdW90ZSBjaXRlOmJlZm9yZXtjb250ZW50OiJcMjAxNCBcMDAyMCJ9YmxvY2txdW90ZSBjaXRlIGEsYmxvY2txdW90ZSBjaXRlIGE6dmlzaXRlZHtjb2xvcjojNTU1fWJsb2NrcXVvdGUsYmxvY2txdW90ZSBwe2xpbmUtaGVpZ2h0OjEuNjtjb2xvcjojNmY2ZjZmfS52Y2FyZHtkaXNwbGF5OmlubGluZS1ibG9jazttYXJnaW46MCAwIDEuMjVlbSAwO2JvcmRlcjoxcHggc29saWQgI2RkZDtwYWRkaW5nOjAuNjI1ZW0gMC43NWVtfS52Y2FyZCBsaXttYXJnaW46MDtkaXNwbGF5OmJsb2NrfS52Y2FyZCAuZm57Zm9udC13ZWlnaHQ6Ym9sZDtmb250LXNpemU6MC45Mzc1ZW19LnZldmVudCAuc3VtbWFyeXtmb250LXdlaWdodDpib2xkfS52ZXZlbnQgYWJicntjdXJzb3I6ZGVmYXVsdDt0ZXh0LWRlY29yYXRpb246bm9uZTtmb250LXdlaWdodDpib2xkO2JvcmRlcjpub25lO3BhZGRpbmc6MCAwLjA2MjVlbX1AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDQ4ZW0pe2gxLGgyLGgzLGg0LGg1LGg2e2xpbmUtaGVpZ2h0OjEuNH1oMXtmb250LXNpemU6Mi43NWVtfWgye2ZvbnQtc2l6ZToyLjMxMjVlbX1oM3tmb250LXNpemU6MS42ODc1ZW19aDR7Zm9udC1zaXplOjEuNDM3NWVtfX0ucHJpbnQtb25seXtkaXNwbGF5Om5vbmUgIWltcG9ydGFudH1AbWVkaWEgcHJpbnR7KntiYWNrZ3JvdW5kOnRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7Y29sb3I6IzAwMCAhaW1wb3J0YW50O2JveC1zaGFkb3c6bm9uZSAhaW1wb3J0YW50O3RleHQtc2hhZG93Om5vbmUgIWltcG9ydGFudH1hLGE6dmlzaXRlZHt0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lfWFbaHJlZl06YWZ0ZXJ7Y29udGVudDoiICgiIGF0dHIoaHJlZikgIikifWFiYnJbdGl0bGVdOmFmdGVye2NvbnRlbnQ6IiAoIiBhdHRyKHRpdGxlKSAiKSJ9LmlyIGE6YWZ0ZXIsYVtocmVmXj0iamF2YXNjcmlwdDoiXTphZnRlcixhW2hyZWZePSIjIl06YWZ0ZXJ7Y29udGVudDoiIn1wcmUsYmxvY2txdW90ZXtib3JkZXI6MXB4IHNvbGlkICM5OTk7cGFnZS1icmVhay1pbnNpZGU6YXZvaWR9dGhlYWR7ZGlzcGxheTp0YWJsZS1oZWFkZXItZ3JvdXB9dHIsaW1ne3BhZ2UtYnJlYWstaW5zaWRlOmF2b2lkfWltZ3ttYXgtd2lkdGg6MTAwJSAhaW1wb3J0YW50fUBwYWdle21hcmdpbjowLjVjbX1wLGgyLGgze29ycGhhbnM6Mzt3aWRvd3M6M31oMixoM3twYWdlLWJyZWFrLWFmdGVyOmF2b2lkfS5oaWRlLW9uLXByaW50e2Rpc3BsYXk6bm9uZSAhaW1wb3J0YW50fS5wcmludC1vbmx5e2Rpc3BsYXk6YmxvY2sgIWltcG9ydGFudH0uaGlkZS1mb3ItcHJpbnR7ZGlzcGxheTpub25lICFpbXBvcnRhbnR9LnNob3ctZm9yLXByaW50e2Rpc3BsYXk6aW5oZXJpdCAhaW1wb3J0YW50fX1idXR0b24sLmJ1dHRvbntib3JkZXItc3R5bGU6c29saWQ7Ym9yZGVyLXdpZHRoOjFweDtjdXJzb3I6cG9pbnRlcjtmb250LWZhbWlseTppbmhlcml0O2ZvbnQtd2VpZ2h0OmJvbGQ7bGluZS1oZWlnaHQ6MTttYXJnaW46MCAwIDEuMjVlbTtwb3NpdGlvbjpyZWxhdGl2ZTt0ZXh0LWRlY29yYXRpb246bm9uZTt0ZXh0LWFsaWduOmNlbnRlcjtkaXNwbGF5OmlubGluZS1ibG9jaztwYWRkaW5nLXRvcDowLjc1ZW07cGFkZGluZy1yaWdodDoxLjVlbTtwYWRkaW5nLWJvdHRvbTowLjgxMjVlbTtwYWRkaW5nLWxlZnQ6MS41ZW07Zm9udC1zaXplOjFlbTtiYWNrZ3JvdW5kLWNvbG9yOiMyYmE2Y2I7Ym9yZGVyLWNvbG9yOiMyMjg0YTE7Y29sb3I6I2ZmZn1idXR0b246aG92ZXIsYnV0dG9uOmZvY3VzLC5idXR0b246aG92ZXIsLmJ1dHRvbjpmb2N1c3tiYWNrZ3JvdW5kLWNvbG9yOiMyMjg0YTF9YnV0dG9uOmhvdmVyLGJ1dHRvbjpmb2N1cywuYnV0dG9uOmhvdmVyLC5idXR0b246Zm9jdXN7Y29sb3I6I2ZmZn1idXR0b24uc2Vjb25kYXJ5LC5idXR0b24uc2Vjb25kYXJ5e2JhY2tncm91bmQtY29sb3I6I2U5ZTllOTtib3JkZXItY29sb3I6I2QwZDBkMDtjb2xvcjojMzMzfWJ1dHRvbi5zZWNvbmRhcnk6aG92ZXIsYnV0dG9uLnNlY29uZGFyeTpmb2N1cywuYnV0dG9uLnNlY29uZGFyeTpob3ZlciwuYnV0dG9uLnNlY29uZGFyeTpmb2N1c3tiYWNrZ3JvdW5kLWNvbG9yOiNkMGQwZDB9YnV0dG9uLnNlY29uZGFyeTpob3ZlcixidXR0b24uc2Vjb25kYXJ5OmZvY3VzLC5idXR0b24uc2Vjb25kYXJ5OmhvdmVyLC5idXR0b24uc2Vjb25kYXJ5OmZvY3Vze2NvbG9yOiMzMzN9YnV0dG9uLnN1Y2Nlc3MsLmJ1dHRvbi5zdWNjZXNze2JhY2tncm91bmQtY29sb3I6IzVkYTQyMztib3JkZXItY29sb3I6IzQ1N2ExYTtjb2xvcjojZmZmfWJ1dHRvbi5zdWNjZXNzOmhvdmVyLGJ1dHRvbi5zdWNjZXNzOmZvY3VzLC5idXR0b24uc3VjY2Vzczpob3ZlciwuYnV0dG9uLnN1Y2Nlc3M6Zm9jdXN7YmFja2dyb3VuZC1jb2xvcjojNDU3YTFhfWJ1dHRvbi5zdWNjZXNzOmhvdmVyLGJ1dHRvbi5zdWNjZXNzOmZvY3VzLC5idXR0b24uc3VjY2Vzczpob3ZlciwuYnV0dG9uLnN1Y2Nlc3M6Zm9jdXN7Y29sb3I6I2ZmZn1idXR0b24uYWxlcnQsLmJ1dHRvbi5hbGVydHtiYWNrZ3JvdW5kLWNvbG9yOiNjNjBmMTM7Ym9yZGVyLWNvbG9yOiM5NzBiMGU7Y29sb3I6I2ZmZn1idXR0b24uYWxlcnQ6aG92ZXIsYnV0dG9uLmFsZXJ0OmZvY3VzLC5idXR0b24uYWxlcnQ6aG92ZXIsLmJ1dHRvbi5hbGVydDpmb2N1c3tiYWNrZ3JvdW5kLWNvbG9yOiM5NzBiMGV9YnV0dG9uLmFsZXJ0OmhvdmVyLGJ1dHRvbi5hbGVydDpmb2N1cywuYnV0dG9uLmFsZXJ0OmhvdmVyLC5idXR0b24uYWxlcnQ6Zm9jdXN7Y29sb3I6I2ZmZn1idXR0b24ubGFyZ2UsLmJ1dHRvbi5sYXJnZXtwYWRkaW5nLXRvcDoxZW07cGFkZGluZy1yaWdodDoyZW07cGFkZGluZy1ib3R0b206MS4wNjI1ZW07cGFkZGluZy1sZWZ0OjJlbTtmb250LXNpemU6MS4yNWVtfWJ1dHRvbi5zbWFsbCwuYnV0dG9uLnNtYWxse3BhZGRpbmctdG9wOjAuNTYyNWVtO3BhZGRpbmctcmlnaHQ6MS4xMjVlbTtwYWRkaW5nLWJvdHRvbTowLjYyNWVtO3BhZGRpbmctbGVmdDoxLjEyNWVtO2ZvbnQtc2l6ZTowLjgxMjVlbX1idXR0b24udGlueSwuYnV0dG9uLnRpbnl7cGFkZGluZy10b3A6MC40Mzc1ZW07cGFkZGluZy1yaWdodDowLjg3NWVtO3BhZGRpbmctYm90dG9tOjAuNWVtO3BhZGRpbmctbGVmdDowLjg3NWVtO2ZvbnQtc2l6ZTowLjY4NzVlbX1idXR0b24uZXhwYW5kLC5idXR0b24uZXhwYW5ke3BhZGRpbmctdG9wOmZhbHNlO3BhZGRpbmctcmlnaHQ6MHB4O3BhZGRpbmctYm90dG9tOmZhbHNlMC4wNjI1ZW07cGFkZGluZy1sZWZ0OjBweDt3aWR0aDoxMDAlfWJ1dHRvbi5sZWZ0LWFsaWduLC5idXR0b24ubGVmdC1hbGlnbnt0ZXh0LWFsaWduOmxlZnQ7dGV4dC1pbmRlbnQ6MC43NWVtfWJ1dHRvbi5yaWdodC1hbGlnbiwuYnV0dG9uLnJpZ2h0LWFsaWdue3RleHQtYWxpZ246cmlnaHQ7cGFkZGluZy1yaWdodDowLjc1ZW19YnV0dG9uLmRpc2FibGVkLGJ1dHRvbltkaXNhYmxlZF0sLmJ1dHRvbi5kaXNhYmxlZCwuYnV0dG9uW2Rpc2FibGVkXXtiYWNrZ3JvdW5kLWNvbG9yOiMyYmE2Y2I7Ym9yZGVyLWNvbG9yOiMyMjg0YTE7Y29sb3I6I2ZmZjtjdXJzb3I6ZGVmYXVsdDtvcGFjaXR5OjAuNjstd2Via2l0LWJveC1zaGFkb3c6bm9uZTtib3gtc2hhZG93Om5vbmV9YnV0dG9uLmRpc2FibGVkOmhvdmVyLGJ1dHRvbi5kaXNhYmxlZDpmb2N1cyxidXR0b25bZGlzYWJsZWRdOmhvdmVyLGJ1dHRvbltkaXNhYmxlZF06Zm9jdXMsLmJ1dHRvbi5kaXNhYmxlZDpob3ZlciwuYnV0dG9uLmRpc2FibGVkOmZvY3VzLC5idXR0b25bZGlzYWJsZWRdOmhvdmVyLC5idXR0b25bZGlzYWJsZWRdOmZvY3Vze2JhY2tncm91bmQtY29sb3I6IzIyODRhMX1idXR0b24uZGlzYWJsZWQ6aG92ZXIsYnV0dG9uLmRpc2FibGVkOmZvY3VzLGJ1dHRvbltkaXNhYmxlZF06aG92ZXIsYnV0dG9uW2Rpc2FibGVkXTpmb2N1cywuYnV0dG9uLmRpc2FibGVkOmhvdmVyLC5idXR0b24uZGlzYWJsZWQ6Zm9jdXMsLmJ1dHRvbltkaXNhYmxlZF06aG92ZXIsLmJ1dHRvbltkaXNhYmxlZF06Zm9jdXN7Y29sb3I6I2ZmZn1idXR0b24uZGlzYWJsZWQ6aG92ZXIsYnV0dG9uLmRpc2FibGVkOmZvY3VzLGJ1dHRvbltkaXNhYmxlZF06aG92ZXIsYnV0dG9uW2Rpc2FibGVkXTpmb2N1cywuYnV0dG9uLmRpc2FibGVkOmhvdmVyLC5idXR0b24uZGlzYWJsZWQ6Zm9jdXMsLmJ1dHRvbltkaXNhYmxlZF06aG92ZXIsLmJ1dHRvbltkaXNhYmxlZF06Zm9jdXN7YmFja2dyb3VuZC1jb2xvcjojMmJhNmNifWJ1dHRvbi5kaXNhYmxlZC5zZWNvbmRhcnksYnV0dG9uW2Rpc2FibGVkXS5zZWNvbmRhcnksLmJ1dHRvbi5kaXNhYmxlZC5zZWNvbmRhcnksLmJ1dHRvbltkaXNhYmxlZF0uc2Vjb25kYXJ5e2JhY2tncm91bmQtY29sb3I6I2U5ZTllOTtib3JkZXItY29sb3I6I2QwZDBkMDtjb2xvcjojMzMzO2N1cnNvcjpkZWZhdWx0O29wYWNpdHk6MC42Oy13ZWJraXQtYm94LXNoYWRvdzpub25lO2JveC1zaGFkb3c6bm9uZX1idXR0b24uZGlzYWJsZWQuc2Vjb25kYXJ5OmhvdmVyLGJ1dHRvbi5kaXNhYmxlZC5zZWNvbmRhcnk6Zm9jdXMsYnV0dG9uW2Rpc2FibGVkXS5zZWNvbmRhcnk6aG92ZXIsYnV0dG9uW2Rpc2FibGVkXS5zZWNvbmRhcnk6Zm9jdXMsLmJ1dHRvbi5kaXNhYmxlZC5zZWNvbmRhcnk6aG92ZXIsLmJ1dHRvbi5kaXNhYmxlZC5zZWNvbmRhcnk6Zm9jdXMsLmJ1dHRvbltkaXNhYmxlZF0uc2Vjb25kYXJ5OmhvdmVyLC5idXR0b25bZGlzYWJsZWRdLnNlY29uZGFyeTpmb2N1c3tiYWNrZ3JvdW5kLWNvbG9yOiNkMGQwZDB9YnV0dG9uLmRpc2FibGVkLnNlY29uZGFyeTpob3ZlcixidXR0b24uZGlzYWJsZWQuc2Vjb25kYXJ5OmZvY3VzLGJ1dHRvbltkaXNhYmxlZF0uc2Vjb25kYXJ5OmhvdmVyLGJ1dHRvbltkaXNhYmxlZF0uc2Vjb25kYXJ5OmZvY3VzLC5idXR0b24uZGlzYWJsZWQuc2Vjb25kYXJ5OmhvdmVyLC5idXR0b24uZGlzYWJsZWQuc2Vjb25kYXJ5OmZvY3VzLC5idXR0b25bZGlzYWJsZWRdLnNlY29uZGFyeTpob3ZlciwuYnV0dG9uW2Rpc2FibGVkXS5zZWNvbmRhcnk6Zm9jdXN7Y29sb3I6IzMzM31idXR0b24uZGlzYWJsZWQuc2Vjb25kYXJ5OmhvdmVyLGJ1dHRvbi5kaXNhYmxlZC5zZWNvbmRhcnk6Zm9jdXMsYnV0dG9uW2Rpc2FibGVkXS5zZWNvbmRhcnk6aG92ZXIsYnV0dG9uW2Rpc2FibGVkXS5zZWNvbmRhcnk6Zm9jdXMsLmJ1dHRvbi5kaXNhYmxlZC5zZWNvbmRhcnk6aG92ZXIsLmJ1dHRvbi5kaXNhYmxlZC5zZWNvbmRhcnk6Zm9jdXMsLmJ1dHRvbltkaXNhYmxlZF0uc2Vjb25kYXJ5OmhvdmVyLC5idXR0b25bZGlzYWJsZWRdLnNlY29uZGFyeTpmb2N1c3tiYWNrZ3JvdW5kLWNvbG9yOiNlOWU5ZTl9YnV0dG9uLmRpc2FibGVkLnN1Y2Nlc3MsYnV0dG9uW2Rpc2FibGVkXS5zdWNjZXNzLC5idXR0b24uZGlzYWJsZWQuc3VjY2VzcywuYnV0dG9uW2Rpc2FibGVkXS5zdWNjZXNze2JhY2tncm91bmQtY29sb3I6IzVkYTQyMztib3JkZXItY29sb3I6IzQ1N2ExYTtjb2xvcjojZmZmO2N1cnNvcjpkZWZhdWx0O29wYWNpdHk6MC42Oy13ZWJraXQtYm94LXNoYWRvdzpub25lO2JveC1zaGFkb3c6bm9uZX1idXR0b24uZGlzYWJsZWQuc3VjY2Vzczpob3ZlcixidXR0b24uZGlzYWJsZWQuc3VjY2Vzczpmb2N1cyxidXR0b25bZGlzYWJsZWRdLnN1Y2Nlc3M6aG92ZXIsYnV0dG9uW2Rpc2FibGVkXS5zdWNjZXNzOmZvY3VzLC5idXR0b24uZGlzYWJsZWQuc3VjY2Vzczpob3ZlciwuYnV0dG9uLmRpc2FibGVkLnN1Y2Nlc3M6Zm9jdXMsLmJ1dHRvbltkaXNhYmxlZF0uc3VjY2Vzczpob3ZlciwuYnV0dG9uW2Rpc2FibGVkXS5zdWNjZXNzOmZvY3Vze2JhY2tncm91bmQtY29sb3I6IzQ1N2ExYX1idXR0b24uZGlzYWJsZWQuc3VjY2Vzczpob3ZlcixidXR0b24uZGlzYWJsZWQuc3VjY2Vzczpmb2N1cyxidXR0b25bZGlzYWJsZWRdLnN1Y2Nlc3M6aG92ZXIsYnV0dG9uW2Rpc2FibGVkXS5zdWNjZXNzOmZvY3VzLC5idXR0b24uZGlzYWJsZWQuc3VjY2Vzczpob3ZlciwuYnV0dG9uLmRpc2FibGVkLnN1Y2Nlc3M6Zm9jdXMsLmJ1dHRvbltkaXNhYmxlZF0uc3VjY2Vzczpob3ZlciwuYnV0dG9uW2Rpc2FibGVkXS5zdWNjZXNzOmZvY3Vze2NvbG9yOiNmZmZ9YnV0dG9uLmRpc2FibGVkLnN1Y2Nlc3M6aG92ZXIsYnV0dG9uLmRpc2FibGVkLnN1Y2Nlc3M6Zm9jdXMsYnV0dG9uW2Rpc2FibGVkXS5zdWNjZXNzOmhvdmVyLGJ1dHRvbltkaXNhYmxlZF0uc3VjY2Vzczpmb2N1cywuYnV0dG9uLmRpc2FibGVkLnN1Y2Nlc3M6aG92ZXIsLmJ1dHRvbi5kaXNhYmxlZC5zdWNjZXNzOmZvY3VzLC5idXR0b25bZGlzYWJsZWRdLnN1Y2Nlc3M6aG92ZXIsLmJ1dHRvbltkaXNhYmxlZF0uc3VjY2Vzczpmb2N1c3tiYWNrZ3JvdW5kLWNvbG9yOiM1ZGE0MjN9YnV0dG9uLmRpc2FibGVkLmFsZXJ0LGJ1dHRvbltkaXNhYmxlZF0uYWxlcnQsLmJ1dHRvbi5kaXNhYmxlZC5hbGVydCwuYnV0dG9uW2Rpc2FibGVkXS5hbGVydHtiYWNrZ3JvdW5kLWNvbG9yOiNjNjBmMTM7Ym9yZGVyLWNvbG9yOiM5NzBiMGU7Y29sb3I6I2ZmZjtjdXJzb3I6ZGVmYXVsdDtvcGFjaXR5OjAuNjstd2Via2l0LWJveC1zaGFkb3c6bm9uZTtib3gtc2hhZG93Om5vbmV9YnV0dG9uLmRpc2FibGVkLmFsZXJ0OmhvdmVyLGJ1dHRvbi5kaXNhYmxlZC5hbGVydDpmb2N1cyxidXR0b25bZGlzYWJsZWRdLmFsZXJ0OmhvdmVyLGJ1dHRvbltkaXNhYmxlZF0uYWxlcnQ6Zm9jdXMsLmJ1dHRvbi5kaXNhYmxlZC5hbGVydDpob3ZlciwuYnV0dG9uLmRpc2FibGVkLmFsZXJ0OmZvY3VzLC5idXR0b25bZGlzYWJsZWRdLmFsZXJ0OmhvdmVyLC5idXR0b25bZGlzYWJsZWRdLmFsZXJ0OmZvY3Vze2JhY2tncm91bmQtY29sb3I6Izk3MGIwZX1idXR0b24uZGlzYWJsZWQuYWxlcnQ6aG92ZXIsYnV0dG9uLmRpc2FibGVkLmFsZXJ0OmZvY3VzLGJ1dHRvbltkaXNhYmxlZF0uYWxlcnQ6aG92ZXIsYnV0dG9uW2Rpc2FibGVkXS5hbGVydDpmb2N1cywuYnV0dG9uLmRpc2FibGVkLmFsZXJ0OmhvdmVyLC5idXR0b24uZGlzYWJsZWQuYWxlcnQ6Zm9jdXMsLmJ1dHRvbltkaXNhYmxlZF0uYWxlcnQ6aG92ZXIsLmJ1dHRvbltkaXNhYmxlZF0uYWxlcnQ6Zm9jdXN7Y29sb3I6I2ZmZn1idXR0b24uZGlzYWJsZWQuYWxlcnQ6aG92ZXIsYnV0dG9uLmRpc2FibGVkLmFsZXJ0OmZvY3VzLGJ1dHRvbltkaXNhYmxlZF0uYWxlcnQ6aG92ZXIsYnV0dG9uW2Rpc2FibGVkXS5hbGVydDpmb2N1cywuYnV0dG9uLmRpc2FibGVkLmFsZXJ0OmhvdmVyLC5idXR0b24uZGlzYWJsZWQuYWxlcnQ6Zm9jdXMsLmJ1dHRvbltkaXNhYmxlZF0uYWxlcnQ6aG92ZXIsLmJ1dHRvbltkaXNhYmxlZF0uYWxlcnQ6Zm9jdXN7YmFja2dyb3VuZC1jb2xvcjojYzYwZjEzfWlucHV0LmJ1dHRvbixidXR0b24uYnV0dG9ue3BhZGRpbmctdG9wOjAuODEyNWVtO3BhZGRpbmctYm90dG9tOjAuNzVlbX1pbnB1dC5idXR0b24udGlueSxidXR0b24uYnV0dG9uLnRpbnl7cGFkZGluZy10b3A6MC41ZW07cGFkZGluZy1ib3R0b206MC40Mzc1ZW19aW5wdXQuYnV0dG9uLnNtYWxsLGJ1dHRvbi5idXR0b24uc21hbGx7cGFkZGluZy10b3A6MC42MjVlbTtwYWRkaW5nLWJvdHRvbTowLjU2MjVlbX1pbnB1dC5idXR0b24ubGFyZ2UsYnV0dG9uLmJ1dHRvbi5sYXJnZXtwYWRkaW5nLXRvcDoxLjAzMTI1ZW07cGFkZGluZy1ib3R0b206MS4wMzEyNWVtfUBtZWRpYSBvbmx5IHNjcmVlbnsuYnV0dG9uey13ZWJraXQtYm94LXNoYWRvdzowIDFweCAwIHJnYmEoMjU1LDI1NSwyNTUsMC41KSBpbnNldDtib3gtc2hhZG93OjAgMXB4IDAgcmdiYSgyNTUsMjU1LDI1NSwwLjUpIGluc2V0Oy13ZWJraXQtdHJhbnNpdGlvbjpiYWNrZ3JvdW5kLWNvbG9yIDMwMG1zIGVhc2Utb3V0Oy1tb3otdHJhbnNpdGlvbjpiYWNrZ3JvdW5kLWNvbG9yIDMwMG1zIGVhc2Utb3V0O3RyYW5zaXRpb246YmFja2dyb3VuZC1jb2xvciAzMDBtcyBlYXNlLW91dH0uYnV0dG9uOmFjdGl2ZXstd2Via2l0LWJveC1zaGFkb3c6MCAxcHggMCByZ2JhKDAsMCwwLDAuMikgaW5zZXQ7Ym94LXNoYWRvdzowIDFweCAwIHJnYmEoMCwwLDAsMC4yKSBpbnNldH0uYnV0dG9uLnJhZGl1c3std2Via2l0LWJvcmRlci1yYWRpdXM6M3B4O2JvcmRlci1yYWRpdXM6M3B4fS5idXR0b24ucm91bmR7LXdlYmtpdC1ib3JkZXItcmFkaXVzOjEwMDBweDtib3JkZXItcmFkaXVzOjEwMDBweH19QG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA0OGVtKXsuYnV0dG9ue2Rpc3BsYXk6aW5saW5lLWJsb2NrfX1mb3Jte21hcmdpbjowIDAgMWVtfWZvcm0gLnJvdyAucm93e21hcmdpbjotMC41ZW19Zm9ybSAucm93IC5yb3cgLmNvbHVtbixmb3JtIC5yb3cgLnJvdyAuY29sdW1uc3twYWRkaW5nOjAgMC41ZW19Zm9ybSAucm93IC5yb3cuY29sbGFwc2V7bWFyZ2luOjB9Zm9ybSAucm93IC5yb3cuY29sbGFwc2UgLmNvbHVtbixmb3JtIC5yb3cgLnJvdy5jb2xsYXBzZSAuY29sdW1uc3twYWRkaW5nOjB9Zm9ybSAucm93IGlucHV0LmNvbHVtbixmb3JtIC5yb3cgaW5wdXQuY29sdW1uc3twYWRkaW5nLWxlZnQ6MC41ZW19bGFiZWx7Zm9udC1zaXplOjAuODc1ZW07Y29sb3I6IzRkNGQ0ZDtjdXJzb3I6cG9pbnRlcjtkaXNwbGF5OmJsb2NrO2ZvbnQtd2VpZ2h0OjUwMDttYXJnaW4tYm90dG9tOjAuMTg3NWVtfWxhYmVsLnJpZ2h0e2Zsb2F0Om5vbmU7dGV4dC1hbGlnbjpyaWdodH1sYWJlbC5pbmxpbmV7bWFyZ2luOjAgMCAxZW0gMDtwYWRkaW5nOjAuNjI1ZW0gMH0ucHJlZml4LC5wb3N0Zml4e2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246cmVsYXRpdmU7ei1pbmRleDoyO3RleHQtYWxpZ246Y2VudGVyO3dpZHRoOjEwMCU7cGFkZGluZy10b3A6MDtwYWRkaW5nLWJvdHRvbTowO2JvcmRlci1zdHlsZTpzb2xpZDtib3JkZXItd2lkdGg6MXB4O292ZXJmbG93OmhpZGRlbjtmb250LXNpemU6MC44NzVlbTtoZWlnaHQ6Mi4zMTI1ZW07bGluZS1oZWlnaHQ6Mi4zMTI1ZW19LnBvc3RmaXguYnV0dG9ue3BhZGRpbmctbGVmdDowO3BhZGRpbmctcmlnaHQ6MDtwYWRkaW5nLXRvcDowO3BhZGRpbmctYm90dG9tOjA7dGV4dC1hbGlnbjpjZW50ZXI7bGluZS1oZWlnaHQ6Mi4xMjVlbX0ucHJlZml4LmJ1dHRvbntwYWRkaW5nLWxlZnQ6MDtwYWRkaW5nLXJpZ2h0OjA7cGFkZGluZy10b3A6MDtwYWRkaW5nLWJvdHRvbTowO3RleHQtYWxpZ246Y2VudGVyO2xpbmUtaGVpZ2h0OjIuMTI1ZW19LnByZWZpeC5idXR0b24ucmFkaXVzey13ZWJraXQtYm9yZGVyLXJhZGl1czowO2JvcmRlci1yYWRpdXM6MDstbW96LWJvcmRlci1yYWRpdXMtYm90dG9tbGVmdDozcHg7LW1vei1ib3JkZXItcmFkaXVzLXRvcGxlZnQ6M3B4Oy13ZWJraXQtYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czozcHg7LXdlYmtpdC1ib3JkZXItdG9wLWxlZnQtcmFkaXVzOjNweDtib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOjNweDtib3JkZXItdG9wLWxlZnQtcmFkaXVzOjNweH0ucG9zdGZpeC5idXR0b24ucmFkaXVzey13ZWJraXQtYm9yZGVyLXJhZGl1czowO2JvcmRlci1yYWRpdXM6MDstbW96LWJvcmRlci1yYWRpdXMtdG9wcmlnaHQ6M3B4Oy1tb3otYm9yZGVyLXJhZGl1cy1ib3R0b21yaWdodDozcHg7LXdlYmtpdC1ib3JkZXItdG9wLXJpZ2h0LXJhZGl1czozcHg7LXdlYmtpdC1ib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czozcHg7Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6M3B4O2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOjNweH0ucHJlZml4LmJ1dHRvbi5yb3VuZHstd2Via2l0LWJvcmRlci1yYWRpdXM6MDtib3JkZXItcmFkaXVzOjA7LW1vei1ib3JkZXItcmFkaXVzLWJvdHRvbWxlZnQ6MTAwMHB4Oy1tb3otYm9yZGVyLXJhZGl1cy10b3BsZWZ0OjEwMDBweDstd2Via2l0LWJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6MTAwMHB4Oy13ZWJraXQtYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czoxMDAwcHg7Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czoxMDAwcHg7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czoxMDAwcHh9LnBvc3RmaXguYnV0dG9uLnJvdW5key13ZWJraXQtYm9yZGVyLXJhZGl1czowO2JvcmRlci1yYWRpdXM6MDstbW96LWJvcmRlci1yYWRpdXMtdG9wcmlnaHQ6MTAwMHB4Oy1tb3otYm9yZGVyLXJhZGl1cy1ib3R0b21yaWdodDoxMDAwcHg7LXdlYmtpdC1ib3JkZXItdG9wLXJpZ2h0LXJhZGl1czoxMDAwcHg7LXdlYmtpdC1ib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czoxMDAwcHg7Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6MTAwMHB4O2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOjEwMDBweH1zcGFuLnByZWZpeHtiYWNrZ3JvdW5kOiNmMmYyZjI7Ym9yZGVyLWNvbG9yOiNkOWQ5ZDk7Ym9yZGVyLXJpZ2h0Om5vbmU7Y29sb3I6IzMzM31zcGFuLnByZWZpeC5yYWRpdXN7LXdlYmtpdC1ib3JkZXItcmFkaXVzOjA7Ym9yZGVyLXJhZGl1czowOy1tb3otYm9yZGVyLXJhZGl1cy1ib3R0b21sZWZ0OjNweDstbW96LWJvcmRlci1yYWRpdXMtdG9wbGVmdDozcHg7LXdlYmtpdC1ib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOjNweDstd2Via2l0LWJvcmRlci10b3AtbGVmdC1yYWRpdXM6M3B4O2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6M3B4O2JvcmRlci10b3AtbGVmdC1yYWRpdXM6M3B4fXNwYW4ucG9zdGZpeHtiYWNrZ3JvdW5kOiNmMmYyZjI7Ym9yZGVyLWNvbG9yOiNjY2M7Ym9yZGVyLWxlZnQ6bm9uZTtjb2xvcjojMzMzfXNwYW4ucG9zdGZpeC5yYWRpdXN7LXdlYmtpdC1ib3JkZXItcmFkaXVzOjA7Ym9yZGVyLXJhZGl1czowOy1tb3otYm9yZGVyLXJhZGl1cy10b3ByaWdodDozcHg7LW1vei1ib3JkZXItcmFkaXVzLWJvdHRvbXJpZ2h0OjNweDstd2Via2l0LWJvcmRlci10b3AtcmlnaHQtcmFkaXVzOjNweDstd2Via2l0LWJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOjNweDtib3JkZXItdG9wLXJpZ2h0LXJhZGl1czozcHg7Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6M3B4fS5pbnB1dC1ncm91cC5yYWRpdXM+KjpmaXJzdC1jaGlsZCwuaW5wdXQtZ3JvdXAucmFkaXVzPio6Zmlyc3QtY2hpbGQgKnstd2Via2l0LWJvcmRlci1yYWRpdXM6MDtib3JkZXItcmFkaXVzOjA7LW1vei1ib3JkZXItcmFkaXVzLWJvdHRvbWxlZnQ6M3B4Oy1tb3otYm9yZGVyLXJhZGl1cy10b3BsZWZ0OjNweDstd2Via2l0LWJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6M3B4Oy13ZWJraXQtYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czozcHg7Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czozcHg7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czozcHh9LmlucHV0LWdyb3VwLnJhZGl1cz4qOmxhc3QtY2hpbGQsLmlucHV0LWdyb3VwLnJhZGl1cz4qOmxhc3QtY2hpbGQgKnstd2Via2l0LWJvcmRlci1yYWRpdXM6MDtib3JkZXItcmFkaXVzOjA7LW1vei1ib3JkZXItcmFkaXVzLXRvcHJpZ2h0OjNweDstbW96LWJvcmRlci1yYWRpdXMtYm90dG9tcmlnaHQ6M3B4Oy13ZWJraXQtYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6M3B4Oy13ZWJraXQtYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6M3B4O2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOjNweDtib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czozcHh9LmlucHV0LWdyb3VwLnJvdW5kPio6Zmlyc3QtY2hpbGQsLmlucHV0LWdyb3VwLnJvdW5kPio6Zmlyc3QtY2hpbGQgKnstd2Via2l0LWJvcmRlci1yYWRpdXM6MDtib3JkZXItcmFkaXVzOjA7LW1vei1ib3JkZXItcmFkaXVzLWJvdHRvbWxlZnQ6MTAwMHB4Oy1tb3otYm9yZGVyLXJhZGl1cy10b3BsZWZ0OjEwMDBweDstd2Via2l0LWJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6MTAwMHB4Oy13ZWJraXQtYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czoxMDAwcHg7Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czoxMDAwcHg7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czoxMDAwcHh9LmlucHV0LWdyb3VwLnJvdW5kPio6bGFzdC1jaGlsZCwuaW5wdXQtZ3JvdXAucm91bmQ+KjpsYXN0LWNoaWxkICp7LXdlYmtpdC1ib3JkZXItcmFkaXVzOjA7Ym9yZGVyLXJhZGl1czowOy1tb3otYm9yZGVyLXJhZGl1cy10b3ByaWdodDoxMDAwcHg7LW1vei1ib3JkZXItcmFkaXVzLWJvdHRvbXJpZ2h0OjEwMDBweDstd2Via2l0LWJvcmRlci10b3AtcmlnaHQtcmFkaXVzOjEwMDBweDstd2Via2l0LWJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOjEwMDBweDtib3JkZXItdG9wLXJpZ2h0LXJhZGl1czoxMDAwcHg7Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6MTAwMHB4fWlucHV0W3R5cGU9InRleHQiXSxpbnB1dFt0eXBlPSJwYXNzd29yZCJdLGlucHV0W3R5cGU9ImRhdGUiXSxpbnB1dFt0eXBlPSJkYXRldGltZSJdLGlucHV0W3R5cGU9ImRhdGV0aW1lLWxvY2FsIl0saW5wdXRbdHlwZT0ibW9udGgiXSxpbnB1dFt0eXBlPSJ3ZWVrIl0saW5wdXRbdHlwZT0iZW1haWwiXSxpbnB1dFt0eXBlPSJudW1iZXIiXSxpbnB1dFt0eXBlPSJzZWFyY2giXSxpbnB1dFt0eXBlPSJ0ZWwiXSxpbnB1dFt0eXBlPSJ0aW1lIl0saW5wdXRbdHlwZT0idXJsIl0sdGV4dGFyZWF7YmFja2dyb3VuZC1jb2xvcjojZmZmO2ZvbnQtZmFtaWx5OmluaGVyaXQ7Ym9yZGVyOjFweCBzb2xpZCAjY2NjOy13ZWJraXQtYm94LXNoYWRvdzppbnNldCAwIDFweCAycHggcmdiYSgwLDAsMCwwLjEpO2JveC1zaGFkb3c6aW5zZXQgMCAxcHggMnB4IHJnYmEoMCwwLDAsMC4xKTtjb2xvcjpyZ2JhKDAsMCwwLDAuNzUpO2Rpc3BsYXk6YmxvY2s7Zm9udC1zaXplOjAuODc1ZW07bWFyZ2luOjAgMCAxZW0gMDtwYWRkaW5nOjAuNWVtO2hlaWdodDoyLjMxMjVlbTt3aWR0aDoxMDAlOy1tb3otYm94LXNpemluZzpib3JkZXItYm94Oy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDstd2Via2l0LXRyYW5zaXRpb246YWxsIDAuMTVzIGxpbmVhcjstbW96LXRyYW5zaXRpb246YWxsIDAuMTVzIGxpbmVhcjt0cmFuc2l0aW9uOmFsbCAwLjE1cyBsaW5lYXJ9aW5wdXRbdHlwZT0idGV4dCJdOmZvY3VzLGlucHV0W3R5cGU9InBhc3N3b3JkIl06Zm9jdXMsaW5wdXRbdHlwZT0iZGF0ZSJdOmZvY3VzLGlucHV0W3R5cGU9ImRhdGV0aW1lIl06Zm9jdXMsaW5wdXRbdHlwZT0iZGF0ZXRpbWUtbG9jYWwiXTpmb2N1cyxpbnB1dFt0eXBlPSJtb250aCJdOmZvY3VzLGlucHV0W3R5cGU9IndlZWsiXTpmb2N1cyxpbnB1dFt0eXBlPSJlbWFpbCJdOmZvY3VzLGlucHV0W3R5cGU9Im51bWJlciJdOmZvY3VzLGlucHV0W3R5cGU9InNlYXJjaCJdOmZvY3VzLGlucHV0W3R5cGU9InRlbCJdOmZvY3VzLGlucHV0W3R5cGU9InRpbWUiXTpmb2N1cyxpbnB1dFt0eXBlPSJ1cmwiXTpmb2N1cyx0ZXh0YXJlYTpmb2N1c3tiYWNrZ3JvdW5kOiNmYWZhZmE7Ym9yZGVyLWNvbG9yOiM5OTk7b3V0bGluZTpub25lfWlucHV0W3R5cGU9InRleHQiXVtkaXNhYmxlZF0saW5wdXRbdHlwZT0icGFzc3dvcmQiXVtkaXNhYmxlZF0saW5wdXRbdHlwZT0iZGF0ZSJdW2Rpc2FibGVkXSxpbnB1dFt0eXBlPSJkYXRldGltZSJdW2Rpc2FibGVkXSxpbnB1dFt0eXBlPSJkYXRldGltZS1sb2NhbCJdW2Rpc2FibGVkXSxpbnB1dFt0eXBlPSJtb250aCJdW2Rpc2FibGVkXSxpbnB1dFt0eXBlPSJ3ZWVrIl1bZGlzYWJsZWRdLGlucHV0W3R5cGU9ImVtYWlsIl1bZGlzYWJsZWRdLGlucHV0W3R5cGU9Im51bWJlciJdW2Rpc2FibGVkXSxpbnB1dFt0eXBlPSJzZWFyY2giXVtkaXNhYmxlZF0saW5wdXRbdHlwZT0idGVsIl1bZGlzYWJsZWRdLGlucHV0W3R5cGU9InRpbWUiXVtkaXNhYmxlZF0saW5wdXRbdHlwZT0idXJsIl1bZGlzYWJsZWRdLHRleHRhcmVhW2Rpc2FibGVkXXtiYWNrZ3JvdW5kLWNvbG9yOiNkZGR9ZmllbGRzZXR7Ym9yZGVyOnNvbGlkIDFweCAjZGRkO3BhZGRpbmc6MS4yNWVtO21hcmdpbjoxLjEyNWVtIDB9ZmllbGRzZXQgbGVnZW5ke2ZvbnQtd2VpZ2h0OmJvbGQ7YmFja2dyb3VuZDojZmZmO3BhZGRpbmc6MCAwLjE4NzVlbTttYXJnaW46MDttYXJnaW4tbGVmdDotMC4xODc1ZW19LmVycm9yIGlucHV0LGlucHV0LmVycm9yLC5lcnJvciB0ZXh0YXJlYSx0ZXh0YXJlYS5lcnJvcntib3JkZXItY29sb3I6I2M2MGYxMztiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMTk4LDE1LDE5LDAuMSl9LmVycm9yIGlucHV0OmZvY3VzLGlucHV0LmVycm9yOmZvY3VzLC5lcnJvciB0ZXh0YXJlYTpmb2N1cyx0ZXh0YXJlYS5lcnJvcjpmb2N1c3tiYWNrZ3JvdW5kOiNmYWZhZmE7Ym9yZGVyLWNvbG9yOiM5OTl9LmVycm9yIGxhYmVsLGxhYmVsLmVycm9ye2NvbG9yOiNjNjBmMTN9LmVycm9yIHNtYWxsLHNtYWxsLmVycm9ye2Rpc3BsYXk6YmxvY2s7cGFkZGluZzowLjM3NWVtIDAuMjVlbTttYXJnaW4tdG9wOi0xLjMxMjVlbTttYXJnaW4tYm90dG9tOjFlbTtmb250LXNpemU6MC43NWVtO2ZvbnQtd2VpZ2h0OmJvbGQ7YmFja2dyb3VuZDojYzYwZjEzO2NvbG9yOiNmZmZ9Zm9ybS5jdXN0b20gLmN1c3RvbXtkaXNwbGF5OmlubGluZS1ibG9jazt3aWR0aDoxNnB4O2hlaWdodDoxNnB4O3Bvc2l0aW9uOnJlbGF0aXZlO3RvcDoycHg7Ym9yZGVyOnNvbGlkIDFweCAjY2NjO2JhY2tncm91bmQ6I2ZmZn1mb3JtLmN1c3RvbSAuY3VzdG9tLnJhZGlvey13ZWJraXQtYm9yZGVyLXJhZGl1czoxMDAwcHg7Ym9yZGVyLXJhZGl1czoxMDAwcHh9Zm9ybS5jdXN0b20gLmN1c3RvbS5jaGVja2JveDpiZWZvcmV7Y29udGVudDoiIjtkaXNwbGF5OmJsb2NrO2xpbmUtaGVpZ2h0OjAuODtoZWlnaHQ6MTRweDt3aWR0aDoxNHB4O3RleHQtYWxpZ246Y2VudGVyO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDtmb250LXNpemU6MTRweDtjb2xvcjojZmZmfWZvcm0uY3VzdG9tIC5jdXN0b20ucmFkaW8uY2hlY2tlZDpiZWZvcmV7Y29udGVudDoiIjtkaXNwbGF5OmJsb2NrO3dpZHRoOjhweDtoZWlnaHQ6OHB4Oy13ZWJraXQtYm9yZGVyLXJhZGl1czoxMDAwcHg7Ym9yZGVyLXJhZGl1czoxMDAwcHg7YmFja2dyb3VuZDojMjIyO3Bvc2l0aW9uOnJlbGF0aXZlO3RvcDozcHg7bGVmdDozcHh9Zm9ybS5jdXN0b20gLmN1c3RvbS5jaGVja2JveC5jaGVja2VkOmJlZm9yZXtjb250ZW50OiJcMDBkNyI7Y29sb3I6IzIyMn1mb3JtLmN1c3RvbSAuY3VzdG9tLmRyb3Bkb3due2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246cmVsYXRpdmU7dG9wOjA7aGVpZ2h0OjIuMzEyNWVtO21hcmdpbi1ib3R0b206MS4yNWVtO21hcmdpbi10b3A6MHB4O3BhZGRpbmc6MHB4O3dpZHRoOjEwMCU7YmFja2dyb3VuZDojZmZmO2JhY2tncm91bmQ6LW1vei1saW5lYXItZ3JhZGllbnQodG9wLCAjZmZmIDAlLCAjZjNmM2YzIDEwMCUpO2JhY2tncm91bmQ6LXdlYmtpdC1saW5lYXItZ3JhZGllbnQodG9wLCAjZmZmIDAlLCAjZjNmM2YzIDEwMCUpO2JhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSwgI2ZmZiAwJSwgI2YzZjNmMyAxMDAlKTstd2Via2l0LWJveC1zaGFkb3c6bm9uZTtib3gtc2hhZG93Om5vbmU7Zm9udC1zaXplOjAuODc1ZW07dmVydGljYWwtYWxpZ246dG9wfWZvcm0uY3VzdG9tIC5jdXN0b20uZHJvcGRvd24gdWx7b3ZlcmZsb3cteTphdXRvO21heC1oZWlnaHQ6MjAwcHh9Zm9ybS5jdXN0b20gLmN1c3RvbS5kcm9wZG93biAuY3VycmVudHtjdXJzb3I6ZGVmYXVsdDt3aGl0ZS1zcGFjZTpub3dyYXA7bGluZS1oZWlnaHQ6Mi4yNWVtO2NvbG9yOnJnYmEoMCwwLDAsMC43NSk7dGV4dC1kZWNvcmF0aW9uOm5vbmU7b3ZlcmZsb3c6aGlkZGVuO2Rpc3BsYXk6YmxvY2s7bWFyZ2luLWxlZnQ6MC41ZW07bWFyZ2luLXJpZ2h0OjIuMzEyNWVtfWZvcm0uY3VzdG9tIC5jdXN0b20uZHJvcGRvd24gLnNlbGVjdG9ye2N1cnNvcjpkZWZhdWx0O3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjIuNWVtO2hlaWdodDoyLjMxMjVlbTtkaXNwbGF5OmJsb2NrO3JpZ2h0OjA7dG9wOjB9Zm9ybS5jdXN0b20gLmN1c3RvbS5kcm9wZG93biAuc2VsZWN0b3I6YWZ0ZXJ7Y29udGVudDoiIjtkaXNwbGF5OmJsb2NrO2NvbnRlbnQ6IiI7ZGlzcGxheTpibG9jazt3aWR0aDowO2hlaWdodDowO2JvcmRlcjpzb2xpZCA1cHg7Ym9yZGVyLWNvbG9yOiNhYWEgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQ7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowLjkzNzVlbTt0b3A6NTAlO21hcmdpbi10b3A6LTNweH1mb3JtLmN1c3RvbSAuY3VzdG9tLmRyb3Bkb3duOmhvdmVyIGEuc2VsZWN0b3I6YWZ0ZXIsZm9ybS5jdXN0b20gLmN1c3RvbS5kcm9wZG93bi5vcGVuIGEuc2VsZWN0b3I6YWZ0ZXJ7Y29udGVudDoiIjtkaXNwbGF5OmJsb2NrO3dpZHRoOjA7aGVpZ2h0OjA7Ym9yZGVyOnNvbGlkIDVweDtib3JkZXItY29sb3I6IzIyMiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCB0cmFuc3BhcmVudH1mb3JtLmN1c3RvbSAuY3VzdG9tLmRyb3Bkb3duIC5kaXNhYmxlZHtjb2xvcjojODg4fWZvcm0uY3VzdG9tIC5jdXN0b20uZHJvcGRvd24gLmRpc2FibGVkOmhvdmVye2JhY2tncm91bmQ6dHJhbnNwYXJlbnQ7Y29sb3I6Izg4OH1mb3JtLmN1c3RvbSAuY3VzdG9tLmRyb3Bkb3duIC5kaXNhYmxlZDpob3ZlcjphZnRlcntkaXNwbGF5Om5vbmV9Zm9ybS5jdXN0b20gLmN1c3RvbS5kcm9wZG93bi5vcGVuIHVse2Rpc3BsYXk6YmxvY2s7ei1pbmRleDoxMDttaW4td2lkdGg6MTAwJTstbW96LWJveC1zaXppbmc6Y29udGVudC1ib3g7LXdlYmtpdC1ib3gtc2l6aW5nOmNvbnRlbnQtYm94O2JveC1zaXppbmc6Y29udGVudC1ib3h9Zm9ybS5jdXN0b20gLmN1c3RvbS5kcm9wZG93bi5zbWFsbHttYXgtd2lkdGg6MTM0cHh9Zm9ybS5jdXN0b20gLmN1c3RvbS5kcm9wZG93bi5tZWRpdW17bWF4LXdpZHRoOjI1NHB4fWZvcm0uY3VzdG9tIC5jdXN0b20uZHJvcGRvd24ubGFyZ2V7bWF4LXdpZHRoOjQzNHB4fWZvcm0uY3VzdG9tIC5jdXN0b20uZHJvcGRvd24uZXhwYW5ke3dpZHRoOjEwMCUgIWltcG9ydGFudH1mb3JtLmN1c3RvbSAuY3VzdG9tLmRyb3Bkb3duLm9wZW4uc21hbGwgdWx7bWluLXdpZHRoOjEzNHB4Oy1tb3otYm94LXNpemluZzpib3JkZXItYm94Oy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveH1mb3JtLmN1c3RvbSAuY3VzdG9tLmRyb3Bkb3duLm9wZW4ubWVkaXVtIHVse21pbi13aWR0aDoyNTRweDstbW96LWJveC1zaXppbmc6Ym9yZGVyLWJveDstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3h9Zm9ybS5jdXN0b20gLmN1c3RvbS5kcm9wZG93bi5vcGVuLmxhcmdlIHVse21pbi13aWR0aDo0MzRweDstbW96LWJveC1zaXppbmc6Ym9yZGVyLWJveDstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3h9Zm9ybS5jdXN0b20gLmN1c3RvbS5kcm9wZG93biB1bHtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDphdXRvO2Rpc3BsYXk6bm9uZTttYXJnaW46MDtsZWZ0Oi0xcHg7dG9wOmF1dG87LXdlYmtpdC1ib3gtc2hhZG93OjAgMnB4IDJweCAwcHggcmdiYSgwLDAsMCwwLjEpO2JveC1zaGFkb3c6MCAycHggMnB4IDBweCByZ2JhKDAsMCwwLDAuMSk7bWFyZ2luOjA7cGFkZGluZzowO2JhY2tncm91bmQ6I2ZmZjtib3JkZXI6c29saWQgMXB4ICNjY2M7Zm9udC1zaXplOjE2cHh9Zm9ybS5jdXN0b20gLmN1c3RvbS5kcm9wZG93biB1bCBsaXtjb2xvcjojNTU1O2ZvbnQtc2l6ZTowLjg3NWVtO2N1cnNvcjpkZWZhdWx0O3BhZGRpbmctdG9wOjAuMjVlbTtwYWRkaW5nLWJvdHRvbTowLjI1ZW07cGFkZGluZy1sZWZ0OjAuMzc1ZW07cGFkZGluZy1yaWdodDoyLjM3NWVtO21pbi1oZWlnaHQ6MS41ZW07bGluZS1oZWlnaHQ6MS41ZW07bWFyZ2luOjA7d2hpdGUtc3BhY2U6bm93cmFwO2xpc3Qtc3R5bGU6bm9uZX1mb3JtLmN1c3RvbSAuY3VzdG9tLmRyb3Bkb3duIHVsIGxpLnNlbGVjdGVke2JhY2tncm91bmQ6I2VlZTtjb2xvcjojMDAwfWZvcm0uY3VzdG9tIC5jdXN0b20uZHJvcGRvd24gdWwgbGk6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojZTRlNGU0O2NvbG9yOiMwMDB9Zm9ybS5jdXN0b20gLmN1c3RvbS5kcm9wZG93biB1bCBsaS5zZWxlY3RlZDpob3ZlcntiYWNrZ3JvdW5kOiNlZWU7Y3Vyc29yOmRlZmF1bHQ7Y29sb3I6IzAwMH1mb3JtLmN1c3RvbSAuY3VzdG9tLmRyb3Bkb3duIHVsLnNob3d7ZGlzcGxheTpibG9ja31mb3JtLmN1c3RvbSAuY3VzdG9tLmRpc2FibGVke2JhY2tncm91bmQtY29sb3I6I2RkZH0uYnV0dG9uLWdyb3Vwe2xpc3Qtc3R5bGU6bm9uZTttYXJnaW46MDsqem9vbToxfS5idXR0b24tZ3JvdXA6YmVmb3JlLC5idXR0b24tZ3JvdXA6YWZ0ZXJ7Y29udGVudDoiICI7ZGlzcGxheTp0YWJsZX0uYnV0dG9uLWdyb3VwOmFmdGVye2NsZWFyOmJvdGh9LmJ1dHRvbi1ncm91cD4qe21hcmdpbjowIDAgMCAtMXB4O2Zsb2F0OmxlZnR9LmJ1dHRvbi1ncm91cD4qOmZpcnN0LWNoaWxke21hcmdpbi1sZWZ0OjB9LmJ1dHRvbi1ncm91cC5yYWRpdXM+KjpmaXJzdC1jaGlsZCwuYnV0dG9uLWdyb3VwLnJhZGl1cz4qOmZpcnN0LWNoaWxkPmEsLmJ1dHRvbi1ncm91cC5yYWRpdXM+KjpmaXJzdC1jaGlsZD5idXR0b257LXdlYmtpdC1ib3JkZXItcmFkaXVzOjA7Ym9yZGVyLXJhZGl1czowOy1tb3otYm9yZGVyLXJhZGl1cy1ib3R0b21sZWZ0OjNweDstbW96LWJvcmRlci1yYWRpdXMtdG9wbGVmdDozcHg7LXdlYmtpdC1ib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOjNweDstd2Via2l0LWJvcmRlci10b3AtbGVmdC1yYWRpdXM6M3B4O2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6M3B4O2JvcmRlci10b3AtbGVmdC1yYWRpdXM6M3B4fS5idXR0b24tZ3JvdXAucmFkaXVzPio6bGFzdC1jaGlsZCwuYnV0dG9uLWdyb3VwLnJhZGl1cz4qOmxhc3QtY2hpbGQ+YSwuYnV0dG9uLWdyb3VwLnJhZGl1cz4qOmxhc3QtY2hpbGQ+YnV0dG9uey13ZWJraXQtYm9yZGVyLXJhZGl1czowO2JvcmRlci1yYWRpdXM6MDstbW96LWJvcmRlci1yYWRpdXMtdG9wcmlnaHQ6M3B4Oy1tb3otYm9yZGVyLXJhZGl1cy1ib3R0b21yaWdodDozcHg7LXdlYmtpdC1ib3JkZXItdG9wLXJpZ2h0LXJhZGl1czozcHg7LXdlYmtpdC1ib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czozcHg7Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6M3B4O2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOjNweH0uYnV0dG9uLWdyb3VwLnJvdW5kPio6Zmlyc3QtY2hpbGQsLmJ1dHRvbi1ncm91cC5yb3VuZD4qOmZpcnN0LWNoaWxkPmEsLmJ1dHRvbi1ncm91cC5yb3VuZD4qOmZpcnN0LWNoaWxkPmJ1dHRvbnstd2Via2l0LWJvcmRlci1yYWRpdXM6MDtib3JkZXItcmFkaXVzOjA7LW1vei1ib3JkZXItcmFkaXVzLWJvdHRvbWxlZnQ6MTAwMHB4Oy1tb3otYm9yZGVyLXJhZGl1cy10b3BsZWZ0OjEwMDBweDstd2Via2l0LWJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6MTAwMHB4Oy13ZWJraXQtYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czoxMDAwcHg7Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czoxMDAwcHg7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czoxMDAwcHh9LmJ1dHRvbi1ncm91cC5yb3VuZD4qOmxhc3QtY2hpbGQsLmJ1dHRvbi1ncm91cC5yb3VuZD4qOmxhc3QtY2hpbGQ+YSwuYnV0dG9uLWdyb3VwLnJvdW5kPio6bGFzdC1jaGlsZD5idXR0b257LXdlYmtpdC1ib3JkZXItcmFkaXVzOjA7Ym9yZGVyLXJhZGl1czowOy1tb3otYm9yZGVyLXJhZGl1cy10b3ByaWdodDoxMDAwcHg7LW1vei1ib3JkZXItcmFkaXVzLWJvdHRvbXJpZ2h0OjEwMDBweDstd2Via2l0LWJvcmRlci10b3AtcmlnaHQtcmFkaXVzOjEwMDBweDstd2Via2l0LWJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOjEwMDBweDtib3JkZXItdG9wLXJpZ2h0LXJhZGl1czoxMDAwcHg7Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6MTAwMHB4fS5idXR0b24tZ3JvdXAuZXZlbi0yIGxpe3dpZHRoOjUwJX0uYnV0dG9uLWdyb3VwLmV2ZW4tMiBsaSAuYnV0dG9ue3dpZHRoOjEwMCV9LmJ1dHRvbi1ncm91cC5ldmVuLTMgbGl7d2lkdGg6MzMuMzMzMzMlfS5idXR0b24tZ3JvdXAuZXZlbi0zIGxpIC5idXR0b257d2lkdGg6MTAwJX0uYnV0dG9uLWdyb3VwLmV2ZW4tNCBsaXt3aWR0aDoyNSV9LmJ1dHRvbi1ncm91cC5ldmVuLTQgbGkgLmJ1dHRvbnt3aWR0aDoxMDAlfS5idXR0b24tZ3JvdXAuZXZlbi01IGxpe3dpZHRoOjIwJX0uYnV0dG9uLWdyb3VwLmV2ZW4tNSBsaSAuYnV0dG9ue3dpZHRoOjEwMCV9LmJ1dHRvbi1ncm91cC5ldmVuLTYgbGl7d2lkdGg6MTYuNjY2NjclfS5idXR0b24tZ3JvdXAuZXZlbi02IGxpIC5idXR0b257d2lkdGg6MTAwJX0uYnV0dG9uLWdyb3VwLmV2ZW4tNyBsaXt3aWR0aDoxNC4yODU3MSV9LmJ1dHRvbi1ncm91cC5ldmVuLTcgbGkgLmJ1dHRvbnt3aWR0aDoxMDAlfS5idXR0b24tZ3JvdXAuZXZlbi04IGxpe3dpZHRoOjEyLjUlfS5idXR0b24tZ3JvdXAuZXZlbi04IGxpIC5idXR0b257d2lkdGg6MTAwJX0uYnV0dG9uLWJhcnsqem9vbToxfS5idXR0b24tYmFyOmJlZm9yZSwuYnV0dG9uLWJhcjphZnRlcntjb250ZW50OiIgIjtkaXNwbGF5OnRhYmxlfS5idXR0b24tYmFyOmFmdGVye2NsZWFyOmJvdGh9LmJ1dHRvbi1iYXIgLmJ1dHRvbi1ncm91cHtmbG9hdDpsZWZ0O21hcmdpbi1yaWdodDowLjYyNWVtfS5idXR0b24tYmFyIC5idXR0b24tZ3JvdXAgZGl2e292ZXJmbG93OmhpZGRlbn0uZHJvcGRvd24uYnV0dG9ue3Bvc2l0aW9uOnJlbGF0aXZlO3BhZGRpbmctcmlnaHQ6My4xODc1ZW19LmRyb3Bkb3duLmJ1dHRvbjpiZWZvcmV7cG9zaXRpb246YWJzb2x1dGU7Y29udGVudDoiIjt3aWR0aDowO2hlaWdodDowO2Rpc3BsYXk6YmxvY2s7Ym9yZGVyLXN0eWxlOnNvbGlkO2JvcmRlci1jb2xvcjojZmZmIHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50O3RvcDo1MCV9LmRyb3Bkb3duLmJ1dHRvbjpiZWZvcmV7Ym9yZGVyLXdpZHRoOjAuNTYyNWVtO3JpZ2h0OjEuNWVtO21hcmdpbi10b3A6LTAuMjVlbX0uZHJvcGRvd24uYnV0dG9uOmJlZm9yZXtib3JkZXItY29sb3I6I2ZmZiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCB0cmFuc3BhcmVudH0uZHJvcGRvd24uYnV0dG9uLnRpbnl7cGFkZGluZy1yaWdodDoyLjE4NzVlbX0uZHJvcGRvd24uYnV0dG9uLnRpbnk6YmVmb3Jle2JvcmRlci13aWR0aDowLjQzNzVlbTtyaWdodDowLjg3NWVtO21hcmdpbi10b3A6LTAuMTU2MjVlbX0uZHJvcGRvd24uYnV0dG9uLnRpbnk6YmVmb3Jle2JvcmRlci1jb2xvcjojZmZmIHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50fS5kcm9wZG93bi5idXR0b24uc21hbGx7cGFkZGluZy1yaWdodDoyLjgxMjVlbX0uZHJvcGRvd24uYnV0dG9uLnNtYWxsOmJlZm9yZXtib3JkZXItd2lkdGg6MC41NjI1ZW07cmlnaHQ6MS4xMjVlbTttYXJnaW4tdG9wOi0wLjIxODc1ZW19LmRyb3Bkb3duLmJ1dHRvbi5zbWFsbDpiZWZvcmV7Ym9yZGVyLWNvbG9yOiNmZmYgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnR9LmRyb3Bkb3duLmJ1dHRvbi5sYXJnZXtwYWRkaW5nLXJpZ2h0OjRlbX0uZHJvcGRvd24uYnV0dG9uLmxhcmdlOmJlZm9yZXtib3JkZXItd2lkdGg6MC42MjVlbTtyaWdodDoxLjc1ZW07bWFyZ2luLXRvcDotMC4zMTI1ZW19LmRyb3Bkb3duLmJ1dHRvbi5sYXJnZTpiZWZvcmV7Ym9yZGVyLWNvbG9yOiNmZmYgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnR9LmRyb3Bkb3duLmJ1dHRvbi5zZWNvbmRhcnk6YmVmb3Jle2JvcmRlci1jb2xvcjojMzMzIHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50fS5zcGxpdC5idXR0b257cG9zaXRpb246cmVsYXRpdmU7cGFkZGluZy1yaWdodDo0LjhlbX0uc3BsaXQuYnV0dG9uIHNwYW57ZGlzcGxheTpibG9jaztoZWlnaHQ6MTAwJTtwb3NpdGlvbjphYnNvbHV0ZTtyaWdodDowO3RvcDowO2JvcmRlci1sZWZ0OnNvbGlkIDFweH0uc3BsaXQuYnV0dG9uIHNwYW46YmVmb3Jle3Bvc2l0aW9uOmFic29sdXRlO2NvbnRlbnQ6IiI7d2lkdGg6MDtoZWlnaHQ6MDtkaXNwbGF5OmJsb2NrO2JvcmRlci1zdHlsZTpzb2xpZDtsZWZ0OjUwJX0uc3BsaXQuYnV0dG9uIHNwYW46YWN0aXZle2JhY2tncm91bmQtY29sb3I6cmdiYSgwLDAsMCwwLjEpfS5zcGxpdC5idXR0b24gc3Bhbntib3JkZXItbGVmdC1jb2xvcjojMWU3MjhjfS5zcGxpdC5idXR0b24gc3Bhbnt3aWR0aDozZW19LnNwbGl0LmJ1dHRvbiBzcGFuOmJlZm9yZXtib3JkZXItd2lkdGg6MC41NjI1ZW07dG9wOjEuMTI1ZW07bWFyZ2luLWxlZnQ6LTAuNTYyNWVtfS5zcGxpdC5idXR0b24gc3BhbjpiZWZvcmV7Ym9yZGVyLWNvbG9yOiNmZmYgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnR9LnNwbGl0LmJ1dHRvbi5zZWNvbmRhcnkgc3Bhbntib3JkZXItbGVmdC1jb2xvcjojYzNjM2MzfS5zcGxpdC5idXR0b24uc2Vjb25kYXJ5IHNwYW46YmVmb3Jle2JvcmRlci1jb2xvcjojZmZmIHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50fS5zcGxpdC5idXR0b24uYWxlcnQgc3Bhbntib3JkZXItbGVmdC1jb2xvcjojN2YwYTBjfS5zcGxpdC5idXR0b24uc3VjY2VzcyBzcGFue2JvcmRlci1sZWZ0LWNvbG9yOiMzOTY1MTZ9LnNwbGl0LmJ1dHRvbi50aW55e3BhZGRpbmctcmlnaHQ6My45Mzc1ZW19LnNwbGl0LmJ1dHRvbi50aW55IHNwYW57d2lkdGg6Mi44NDM3NWVtfS5zcGxpdC5idXR0b24udGlueSBzcGFuOmJlZm9yZXtib3JkZXItd2lkdGg6MC40Mzc1ZW07dG9wOjAuODc1ZW07bWFyZ2luLWxlZnQ6LTAuMzEyNWVtfS5zcGxpdC5idXR0b24uc21hbGx7cGFkZGluZy1yaWdodDozLjkzNzVlbX0uc3BsaXQuYnV0dG9uLnNtYWxsIHNwYW57d2lkdGg6Mi44MTI1ZW19LnNwbGl0LmJ1dHRvbi5zbWFsbCBzcGFuOmJlZm9yZXtib3JkZXItd2lkdGg6MC41NjI1ZW07dG9wOjAuODQzNzVlbTttYXJnaW4tbGVmdDotMC41NjI1ZW19LnNwbGl0LmJ1dHRvbi5sYXJnZXtwYWRkaW5nLXJpZ2h0OjZlbX0uc3BsaXQuYnV0dG9uLmxhcmdlIHNwYW57d2lkdGg6My43NWVtfS5zcGxpdC5idXR0b24ubGFyZ2Ugc3BhbjpiZWZvcmV7Ym9yZGVyLXdpZHRoOjAuNjI1ZW07dG9wOjEuMzEyNWVtO21hcmdpbi1sZWZ0Oi0wLjU2MjVlbX0uc3BsaXQuYnV0dG9uLnNlY29uZGFyeSBzcGFuOmJlZm9yZXtib3JkZXItY29sb3I6IzMzMyB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCB0cmFuc3BhcmVudH0uc3BsaXQuYnV0dG9uLnJhZGl1cyBzcGFuey13ZWJraXQtYm9yZGVyLXJhZGl1czowO2JvcmRlci1yYWRpdXM6MDstbW96LWJvcmRlci1yYWRpdXMtdG9wcmlnaHQ6M3B4Oy1tb3otYm9yZGVyLXJhZGl1cy1ib3R0b21yaWdodDozcHg7LXdlYmtpdC1ib3JkZXItdG9wLXJpZ2h0LXJhZGl1czozcHg7LXdlYmtpdC1ib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czozcHg7Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6M3B4O2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOjNweH0uc3BsaXQuYnV0dG9uLnJvdW5kIHNwYW57LXdlYmtpdC1ib3JkZXItcmFkaXVzOjA7Ym9yZGVyLXJhZGl1czowOy1tb3otYm9yZGVyLXJhZGl1cy10b3ByaWdodDoxMDAwcHg7LW1vei1ib3JkZXItcmFkaXVzLWJvdHRvbXJpZ2h0OjEwMDBweDstd2Via2l0LWJvcmRlci10b3AtcmlnaHQtcmFkaXVzOjEwMDBweDstd2Via2l0LWJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOjEwMDBweDtib3JkZXItdG9wLXJpZ2h0LXJhZGl1czoxMDAwcHg7Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6MTAwMHB4fS5mbGV4LXZpZGVve3Bvc2l0aW9uOnJlbGF0aXZlO3BhZGRpbmctdG9wOjEuNTYyNWVtO3BhZGRpbmctYm90dG9tOjY3LjUlO2hlaWdodDowO21hcmdpbi1ib3R0b206MWVtO292ZXJmbG93OmhpZGRlbn0uZmxleC12aWRlby53aWRlc2NyZWVue3BhZGRpbmctYm90dG9tOjU3LjI1JX0uZmxleC12aWRlby52aW1lb3twYWRkaW5nLXRvcDowfS5mbGV4LXZpZGVvIGlmcmFtZSwuZmxleC12aWRlbyBvYmplY3QsLmZsZXgtdmlkZW8gZW1iZWQsLmZsZXgtdmlkZW8gdmlkZW97cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCV9LnNlY3Rpb24tY29udGFpbmVyLC5zZWN0aW9uLWNvbnRhaW5lci5hdXRve3dpZHRoOjEwMCU7ZGlzcGxheTpibG9jazttYXJnaW4tYm90dG9tOjEuMjVlbTtib3JkZXI6MXB4IHNvbGlkICNjY2M7Ym9yZGVyLXRvcDpub25lfS5zZWN0aW9uLWNvbnRhaW5lciBzZWN0aW9uLC5zZWN0aW9uLWNvbnRhaW5lciAuc2VjdGlvbiwuc2VjdGlvbi1jb250YWluZXIuYXV0byBzZWN0aW9uLC5zZWN0aW9uLWNvbnRhaW5lci5hdXRvIC5zZWN0aW9ue2JvcmRlci10b3A6MXB4IHNvbGlkICNjY2M7cG9zaXRpb246cmVsYXRpdmV9LnNlY3Rpb24tY29udGFpbmVyIHNlY3Rpb24gLnRpdGxlLC5zZWN0aW9uLWNvbnRhaW5lciAuc2VjdGlvbiAudGl0bGUsLnNlY3Rpb24tY29udGFpbmVyLmF1dG8gc2VjdGlvbiAudGl0bGUsLnNlY3Rpb24tY29udGFpbmVyLmF1dG8gLnNlY3Rpb24gLnRpdGxle3RvcDowO2N1cnNvcjpwb2ludGVyO3dpZHRoOjEwMCU7bWFyZ2luOjA7YmFja2dyb3VuZC1jb2xvcjojZWZlZmVmfS5zZWN0aW9uLWNvbnRhaW5lciBzZWN0aW9uIC50aXRsZSBhLC5zZWN0aW9uLWNvbnRhaW5lciAuc2VjdGlvbiAudGl0bGUgYSwuc2VjdGlvbi1jb250YWluZXIuYXV0byBzZWN0aW9uIC50aXRsZSBhLC5zZWN0aW9uLWNvbnRhaW5lci5hdXRvIC5zZWN0aW9uIC50aXRsZSBhe3BhZGRpbmc6MC45Mzc1ZW07ZGlzcGxheTppbmxpbmUtYmxvY2s7Y29sb3I6IzMzMztmb250LXNpemU6MC44NzVlbTt3aGl0ZS1zcGFjZTpub3dyYXA7d2lkdGg6MTAwJX0uc2VjdGlvbi1jb250YWluZXIgc2VjdGlvbiAudGl0bGU6aG92ZXIsLnNlY3Rpb24tY29udGFpbmVyIC5zZWN0aW9uIC50aXRsZTpob3Zlciwuc2VjdGlvbi1jb250YWluZXIuYXV0byBzZWN0aW9uIC50aXRsZTpob3Zlciwuc2VjdGlvbi1jb250YWluZXIuYXV0byAuc2VjdGlvbiAudGl0bGU6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojZTJlMmUyfS5zZWN0aW9uLWNvbnRhaW5lciBzZWN0aW9uIC5jb250ZW50LC5zZWN0aW9uLWNvbnRhaW5lciAuc2VjdGlvbiAuY29udGVudCwuc2VjdGlvbi1jb250YWluZXIuYXV0byBzZWN0aW9uIC5jb250ZW50LC5zZWN0aW9uLWNvbnRhaW5lci5hdXRvIC5zZWN0aW9uIC5jb250ZW50e2Rpc3BsYXk6bm9uZTtwYWRkaW5nOjAuOTM3NWVtO2JhY2tncm91bmQtY29sb3I6I2ZmZn0uc2VjdGlvbi1jb250YWluZXIgc2VjdGlvbiAuY29udGVudD4qOmxhc3QtY2hpbGQsLnNlY3Rpb24tY29udGFpbmVyIC5zZWN0aW9uIC5jb250ZW50Pio6bGFzdC1jaGlsZCwuc2VjdGlvbi1jb250YWluZXIuYXV0byBzZWN0aW9uIC5jb250ZW50Pio6bGFzdC1jaGlsZCwuc2VjdGlvbi1jb250YWluZXIuYXV0byAuc2VjdGlvbiAuY29udGVudD4qOmxhc3QtY2hpbGR7bWFyZ2luLWJvdHRvbTowfS5zZWN0aW9uLWNvbnRhaW5lciBzZWN0aW9uIC5jb250ZW50Pio6Zmlyc3QtY2hpbGQsLnNlY3Rpb24tY29udGFpbmVyIC5zZWN0aW9uIC5jb250ZW50Pio6Zmlyc3QtY2hpbGQsLnNlY3Rpb24tY29udGFpbmVyLmF1dG8gc2VjdGlvbiAuY29udGVudD4qOmZpcnN0LWNoaWxkLC5zZWN0aW9uLWNvbnRhaW5lci5hdXRvIC5zZWN0aW9uIC5jb250ZW50Pio6Zmlyc3QtY2hpbGR7cGFkZGluZy10b3A6MH0uc2VjdGlvbi1jb250YWluZXIgc2VjdGlvbiAuY29udGVudD4qOmxhc3QtY2hpbGQsLnNlY3Rpb24tY29udGFpbmVyIC5zZWN0aW9uIC5jb250ZW50Pio6bGFzdC1jaGlsZCwuc2VjdGlvbi1jb250YWluZXIuYXV0byBzZWN0aW9uIC5jb250ZW50Pio6bGFzdC1jaGlsZCwuc2VjdGlvbi1jb250YWluZXIuYXV0byAuc2VjdGlvbiAuY29udGVudD4qOmxhc3QtY2hpbGR7cGFkZGluZy1ib3R0b206MH0uc2VjdGlvbi1jb250YWluZXIgc2VjdGlvbi5hY3RpdmUgLmNvbnRlbnQsLnNlY3Rpb24tY29udGFpbmVyIC5zZWN0aW9uLmFjdGl2ZSAuY29udGVudCwuc2VjdGlvbi1jb250YWluZXIuYXV0byBzZWN0aW9uLmFjdGl2ZSAuY29udGVudCwuc2VjdGlvbi1jb250YWluZXIuYXV0byAuc2VjdGlvbi5hY3RpdmUgLmNvbnRlbnR7ZGlzcGxheTpibG9ja30uc2VjdGlvbi1jb250YWluZXIgc2VjdGlvbi5hY3RpdmUgLnRpdGxlLC5zZWN0aW9uLWNvbnRhaW5lciAuc2VjdGlvbi5hY3RpdmUgLnRpdGxlLC5zZWN0aW9uLWNvbnRhaW5lci5hdXRvIHNlY3Rpb24uYWN0aXZlIC50aXRsZSwuc2VjdGlvbi1jb250YWluZXIuYXV0byAuc2VjdGlvbi5hY3RpdmUgLnRpdGxle2JhY2tncm91bmQ6I2Q1ZDVkNX0uc2VjdGlvbi1jb250YWluZXIudGFic3tib3JkZXI6MDtwb3NpdGlvbjpyZWxhdGl2ZX0uc2VjdGlvbi1jb250YWluZXIudGFicyBzZWN0aW9uLC5zZWN0aW9uLWNvbnRhaW5lci50YWJzIC5zZWN0aW9ue3BhZGRpbmctdG9wOjA7Ym9yZGVyOjA7cG9zaXRpb246c3RhdGljfS5zZWN0aW9uLWNvbnRhaW5lci50YWJzIHNlY3Rpb24gLnRpdGxlLC5zZWN0aW9uLWNvbnRhaW5lci50YWJzIC5zZWN0aW9uIC50aXRsZXt3aWR0aDphdXRvO2JvcmRlcjoxcHggc29saWQgI2NjYztib3JkZXItcmlnaHQ6MDtib3JkZXItYm90dG9tOjA7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDoxfS5zZWN0aW9uLWNvbnRhaW5lci50YWJzIHNlY3Rpb24gLnRpdGxlIGEsLnNlY3Rpb24tY29udGFpbmVyLnRhYnMgLnNlY3Rpb24gLnRpdGxlIGF7d2lkdGg6MTAwJX0uc2VjdGlvbi1jb250YWluZXIudGFicyBzZWN0aW9uOmxhc3QtY2hpbGQgLnRpdGxlLC5zZWN0aW9uLWNvbnRhaW5lci50YWJzIC5zZWN0aW9uOmxhc3QtY2hpbGQgLnRpdGxle2JvcmRlci1yaWdodDoxcHggc29saWQgI2NjY30uc2VjdGlvbi1jb250YWluZXIudGFicyBzZWN0aW9uIC5jb250ZW50LC5zZWN0aW9uLWNvbnRhaW5lci50YWJzIC5zZWN0aW9uIC5jb250ZW50e2JvcmRlcjoxcHggc29saWQgI2NjYztwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjEwO3RvcDotMXB4fS5zZWN0aW9uLWNvbnRhaW5lci50YWJzIHNlY3Rpb24uYWN0aXZlIC50aXRsZSwuc2VjdGlvbi1jb250YWluZXIudGFicyAuc2VjdGlvbi5hY3RpdmUgLnRpdGxle2JhY2tncm91bmQtY29sb3I6I2ZmZjt6LWluZGV4OjExO2JvcmRlci1ib3R0b206MH0uc2VjdGlvbi1jb250YWluZXIudGFicyBzZWN0aW9uLmFjdGl2ZSAuY29udGVudCwuc2VjdGlvbi1jb250YWluZXIudGFicyAuc2VjdGlvbi5hY3RpdmUgLmNvbnRlbnR7cG9zaXRpb246cmVsYXRpdmV9QG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA0OGVtKXsuc2VjdGlvbi1jb250YWluZXIuYXV0b3tib3JkZXI6MDtwb3NpdGlvbjpyZWxhdGl2ZX0uc2VjdGlvbi1jb250YWluZXIuYXV0byBzZWN0aW9uLC5zZWN0aW9uLWNvbnRhaW5lci5hdXRvIC5zZWN0aW9ue3BhZGRpbmctdG9wOjA7Ym9yZGVyOjA7cG9zaXRpb246c3RhdGljfS5zZWN0aW9uLWNvbnRhaW5lci5hdXRvIHNlY3Rpb24gLnRpdGxlLC5zZWN0aW9uLWNvbnRhaW5lci5hdXRvIC5zZWN0aW9uIC50aXRsZXt3aWR0aDphdXRvO2JvcmRlcjoxcHggc29saWQgI2NjYztib3JkZXItcmlnaHQ6MDtib3JkZXItYm90dG9tOjA7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDoxfS5zZWN0aW9uLWNvbnRhaW5lci5hdXRvIHNlY3Rpb24gLnRpdGxlIGEsLnNlY3Rpb24tY29udGFpbmVyLmF1dG8gLnNlY3Rpb24gLnRpdGxlIGF7d2lkdGg6MTAwJX0uc2VjdGlvbi1jb250YWluZXIuYXV0byBzZWN0aW9uOmxhc3QtY2hpbGQgLnRpdGxlLC5zZWN0aW9uLWNvbnRhaW5lci5hdXRvIC5zZWN0aW9uOmxhc3QtY2hpbGQgLnRpdGxle2JvcmRlci1yaWdodDoxcHggc29saWQgI2NjY30uc2VjdGlvbi1jb250YWluZXIuYXV0byBzZWN0aW9uIC5jb250ZW50LC5zZWN0aW9uLWNvbnRhaW5lci5hdXRvIC5zZWN0aW9uIC5jb250ZW50e2JvcmRlcjoxcHggc29saWQgI2NjYztwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjEwO3RvcDotMXB4fS5zZWN0aW9uLWNvbnRhaW5lci5hdXRvIHNlY3Rpb24uYWN0aXZlIC50aXRsZSwuc2VjdGlvbi1jb250YWluZXIuYXV0byAuc2VjdGlvbi5hY3RpdmUgLnRpdGxle2JhY2tncm91bmQtY29sb3I6I2ZmZjt6LWluZGV4OjExO2JvcmRlci1ib3R0b206MH0uc2VjdGlvbi1jb250YWluZXIuYXV0byBzZWN0aW9uLmFjdGl2ZSAuY29udGVudCwuc2VjdGlvbi1jb250YWluZXIuYXV0byAuc2VjdGlvbi5hY3RpdmUgLmNvbnRlbnR7cG9zaXRpb246cmVsYXRpdmV9LnNlY3Rpb24tY29udGFpbmVyLmFjY29yZGlvbiAuc2VjdGlvbntwYWRkaW5nLXRvcDowICFpbXBvcnRhbnR9LnNlY3Rpb24tY29udGFpbmVyLnZlcnRpY2FsLW5hdntib3JkZXI6MXB4IHNvbGlkICNjY2M7Ym9yZGVyLXRvcDpub25lfS5zZWN0aW9uLWNvbnRhaW5lci52ZXJ0aWNhbC1uYXYgc2VjdGlvbiwuc2VjdGlvbi1jb250YWluZXIudmVydGljYWwtbmF2IC5zZWN0aW9ue3BhZGRpbmctdG9wOjAgIWltcG9ydGFudH0uc2VjdGlvbi1jb250YWluZXIudmVydGljYWwtbmF2IHNlY3Rpb24gLnRpdGxlIGEsLnNlY3Rpb24tY29udGFpbmVyLnZlcnRpY2FsLW5hdiAuc2VjdGlvbiAudGl0bGUgYXtkaXNwbGF5OmJsb2NrO3dpZHRoOjEwMCV9LnNlY3Rpb24tY29udGFpbmVyLnZlcnRpY2FsLW5hdiBzZWN0aW9uIC5jb250ZW50LC5zZWN0aW9uLWNvbnRhaW5lci52ZXJ0aWNhbC1uYXYgLnNlY3Rpb24gLmNvbnRlbnR7ZGlzcGxheTpub25lfS5zZWN0aW9uLWNvbnRhaW5lci52ZXJ0aWNhbC1uYXYgc2VjdGlvbi5hY3RpdmUgLmNvbnRlbnQsLnNlY3Rpb24tY29udGFpbmVyLnZlcnRpY2FsLW5hdiAuc2VjdGlvbi5hY3RpdmUgLmNvbnRlbnR7ZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjEwMCU7dG9wOi0xcHg7ei1pbmRleDo5OTk7bWluLXdpZHRoOjEyLjVlbTtib3JkZXI6MXB4IHNvbGlkICNjY2N9LnNlY3Rpb24tY29udGFpbmVyLmhvcml6b250YWwtbmF2e3Bvc2l0aW9uOnJlbGF0aXZlO2JhY2tncm91bmQ6I2VmZWZlZjtib3JkZXI6MXB4IHNvbGlkICNjY2N9LnNlY3Rpb24tY29udGFpbmVyLmhvcml6b250YWwtbmF2IHNlY3Rpb24sLnNlY3Rpb24tY29udGFpbmVyLmhvcml6b250YWwtbmF2IC5zZWN0aW9ue3BhZGRpbmctdG9wOjA7Ym9yZGVyOjA7cG9zaXRpb246c3RhdGljfS5zZWN0aW9uLWNvbnRhaW5lci5ob3Jpem9udGFsLW5hdiBzZWN0aW9uIC50aXRsZSwuc2VjdGlvbi1jb250YWluZXIuaG9yaXpvbnRhbC1uYXYgLnNlY3Rpb24gLnRpdGxle3dpZHRoOmF1dG87Ym9yZGVyOjFweCBzb2xpZCAjY2NjO2JvcmRlci1sZWZ0OjA7dG9wOi0xcHg7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDoxfS5zZWN0aW9uLWNvbnRhaW5lci5ob3Jpem9udGFsLW5hdiBzZWN0aW9uIC50aXRsZSBhLC5zZWN0aW9uLWNvbnRhaW5lci5ob3Jpem9udGFsLW5hdiAuc2VjdGlvbiAudGl0bGUgYXt3aWR0aDoxMDAlfS5zZWN0aW9uLWNvbnRhaW5lci5ob3Jpem9udGFsLW5hdiBzZWN0aW9uIC5jb250ZW50LC5zZWN0aW9uLWNvbnRhaW5lci5ob3Jpem9udGFsLW5hdiAuc2VjdGlvbiAuY29udGVudHtkaXNwbGF5Om5vbmV9LnNlY3Rpb24tY29udGFpbmVyLmhvcml6b250YWwtbmF2IHNlY3Rpb24uYWN0aXZlIC5jb250ZW50LC5zZWN0aW9uLWNvbnRhaW5lci5ob3Jpem9udGFsLW5hdiAuc2VjdGlvbi5hY3RpdmUgLmNvbnRlbnR7ZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4Ojk5OTtsZWZ0OjA7dG9wOi0ycHg7bWluLXdpZHRoOjEyLjVlbTtib3JkZXI6MXB4IHNvbGlkICNjY2N9fS5jb250YWluLXRvLWdyaWR7d2lkdGg6MTAwJTtiYWNrZ3JvdW5kOiMxMTF9LmZpeGVke3dpZHRoOjEwMCU7bGVmdDowO3Bvc2l0aW9uOmZpeGVkO3RvcDowO3otaW5kZXg6OTl9LnRvcC1iYXJ7b3ZlcmZsb3c6aGlkZGVuO2hlaWdodDo0NXB4O2xpbmUtaGVpZ2h0OjQ1cHg7cG9zaXRpb246cmVsYXRpdmU7YmFja2dyb3VuZDojMTExO21hcmdpbi1ib3R0b206MS44NzVlbX0udG9wLWJhciB1bHttYXJnaW4tYm90dG9tOjA7bGlzdC1zdHlsZTpub25lfS50b3AtYmFyIC5yb3d7bWF4LXdpZHRoOm5vbmV9LnRvcC1iYXIgZm9ybSwudG9wLWJhciBpbnB1dHttYXJnaW4tYm90dG9tOjB9LnRvcC1iYXIgaW5wdXR7aGVpZ2h0OjIuNDVlbX0udG9wLWJhciAuYnV0dG9ue3BhZGRpbmctdG9wOi41ZW07cGFkZGluZy1ib3R0b206LjVlbTttYXJnaW4tYm90dG9tOjB9LnRvcC1iYXIgLnRpdGxlLWFyZWF7cG9zaXRpb246cmVsYXRpdmV9LnRvcC1iYXIgLm5hbWV7aGVpZ2h0OjQ1cHg7bWFyZ2luOjA7Zm9udC1zaXplOjE2cHh9LnRvcC1iYXIgLm5hbWUgaDF7bGluZS1oZWlnaHQ6NDVweDtmb250LXNpemU6MS4wNjI1ZW07bWFyZ2luOjB9LnRvcC1iYXIgLm5hbWUgaDEgYXtmb250LXdlaWdodDpib2xkO2NvbG9yOiNmZmY7d2lkdGg6NTAlO2Rpc3BsYXk6YmxvY2s7cGFkZGluZzowIDE1cHh9LnRvcC1iYXIgLnRvZ2dsZS10b3BiYXJ7cG9zaXRpb246YWJzb2x1dGU7cmlnaHQ6MDt0b3A6MH0udG9wLWJhciAudG9nZ2xlLXRvcGJhciBhe2NvbG9yOiNmZmY7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO2ZvbnQtc2l6ZTowLjgxMjVlbTtmb250LXdlaWdodDpib2xkO3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7cGFkZGluZzowIDE1cHg7aGVpZ2h0OjQ1cHg7bGluZS1oZWlnaHQ6NDVweH0udG9wLWJhciAudG9nZ2xlLXRvcGJhci5tZW51LWljb257cmlnaHQ6MTVweDt0b3A6NTAlO21hcmdpbi10b3A6LTE2cHg7cGFkZGluZy1sZWZ0OjQwcHh9LnRvcC1iYXIgLnRvZ2dsZS10b3BiYXIubWVudS1pY29uIGF7dGV4dC1pbmRlbnQ6LTQ4cHg7d2lkdGg6MzRweDtoZWlnaHQ6MzRweDtsaW5lLWhlaWdodDozM3B4O3BhZGRpbmc6MDtjb2xvcjojZmZmfS50b3AtYmFyIC50b2dnbGUtdG9wYmFyLm1lbnUtaWNvbiBhIHNwYW57cG9zaXRpb246YWJzb2x1dGU7cmlnaHQ6MDtkaXNwbGF5OmJsb2NrO3dpZHRoOjE2cHg7aGVpZ2h0OjA7LXdlYmtpdC1ib3gtc2hhZG93OjAgMTBweCAwIDFweCAjZmZmLDAgMTZweCAwIDFweCAjZmZmLDAgMjJweCAwIDFweCAjZmZmO2JveC1zaGFkb3c6MCAxMHB4IDAgMXB4ICNmZmYsMCAxNnB4IDAgMXB4ICNmZmYsMCAyMnB4IDAgMXB4ICNmZmZ9LnRvcC1iYXIuZXhwYW5kZWR7aGVpZ2h0OmF1dG87YmFja2dyb3VuZDp0cmFuc3BhcmVudH0udG9wLWJhci5leHBhbmRlZCAudGl0bGUtYXJlYXtiYWNrZ3JvdW5kOiMxMTF9LnRvcC1iYXIuZXhwYW5kZWQgLnRvZ2dsZS10b3BiYXIgYXtjb2xvcjojODg4fS50b3AtYmFyLmV4cGFuZGVkIC50b2dnbGUtdG9wYmFyIGEgc3Bhbnstd2Via2l0LWJveC1zaGFkb3c6MCAxMHB4IDAgMXB4ICM4ODgsMCAxNnB4IDAgMXB4ICM4ODgsMCAyMnB4IDAgMXB4ICM4ODg7Ym94LXNoYWRvdzowIDEwcHggMCAxcHggIzg4OCwwIDE2cHggMCAxcHggIzg4OCwwIDIycHggMCAxcHggIzg4OH0udG9wLWJhci1zZWN0aW9ue2xlZnQ6MDtwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDphdXRvOy13ZWJraXQtdHJhbnNpdGlvbjpsZWZ0IDMwMG1zIGVhc2Utb3V0Oy1tb3otdHJhbnNpdGlvbjpsZWZ0IDMwMG1zIGVhc2Utb3V0O3RyYW5zaXRpb246bGVmdCAzMDBtcyBlYXNlLW91dH0udG9wLWJhci1zZWN0aW9uIHVse3dpZHRoOjEwMCU7aGVpZ2h0OmF1dG87ZGlzcGxheTpibG9jaztiYWNrZ3JvdW5kOiMzMzM7Zm9udC1zaXplOjE2cHg7bWFyZ2luOjB9LnRvcC1iYXItc2VjdGlvbiAuZGl2aWRlcntib3JkZXItYm90dG9tOnNvbGlkIDFweCAjNGQ0ZDRkO2JvcmRlci10b3A6c29saWQgMXB4ICMxYTFhMWE7Y2xlYXI6Ym90aDtoZWlnaHQ6MXB4O3dpZHRoOjEwMCV9LnRvcC1iYXItc2VjdGlvbiB1bCBsaT5he2Rpc3BsYXk6YmxvY2s7d2lkdGg6MTAwJTtjb2xvcjojZmZmO3BhZGRpbmc6MTJweCAwIDEycHggMDtwYWRkaW5nLWxlZnQ6MTVweDtmb250LXNpemU6MC44MTI1ZW07Zm9udC13ZWlnaHQ6Ym9sZDtiYWNrZ3JvdW5kOiMzMzM7aGVpZ2h0OjQ1cHh9LnRvcC1iYXItc2VjdGlvbiB1bCBsaT5hOmhvdmVye2JhY2tncm91bmQ6IzJiMmIyYn0udG9wLWJhci1zZWN0aW9uIHVsIGxpPmEuYnV0dG9ue2JhY2tncm91bmQ6IzJiYTZjYjtmb250LXNpemU6MC44MTI1ZW19LnRvcC1iYXItc2VjdGlvbiB1bCBsaT5hLmJ1dHRvbjpob3ZlcntiYWNrZ3JvdW5kOiMyMjg0YTF9LnRvcC1iYXItc2VjdGlvbiB1bCBsaT5hLmJ1dHRvbi5zZWNvbmRhcnl7YmFja2dyb3VuZDojZTllOWU5fS50b3AtYmFyLXNlY3Rpb24gdWwgbGk+YS5idXR0b24uc2Vjb25kYXJ5OmhvdmVye2JhY2tncm91bmQ6I2QwZDBkMH0udG9wLWJhci1zZWN0aW9uIHVsIGxpPmEuYnV0dG9uLnN1Y2Nlc3N7YmFja2dyb3VuZDojNWRhNDIzfS50b3AtYmFyLXNlY3Rpb24gdWwgbGk+YS5idXR0b24uc3VjY2Vzczpob3ZlcntiYWNrZ3JvdW5kOiM0NTdhMWF9LnRvcC1iYXItc2VjdGlvbiB1bCBsaT5hLmJ1dHRvbi5hbGVydHtiYWNrZ3JvdW5kOiNjNjBmMTN9LnRvcC1iYXItc2VjdGlvbiB1bCBsaT5hLmJ1dHRvbi5hbGVydDpob3ZlcntiYWNrZ3JvdW5kOiM5NzBiMGV9LnRvcC1iYXItc2VjdGlvbiB1bCBsaS5hY3RpdmUgYXtiYWNrZ3JvdW5kOiMyYjJiMmJ9LnRvcC1iYXItc2VjdGlvbiAuaGFzLWZvcm17cGFkZGluZzoxNXB4fS50b3AtYmFyLXNlY3Rpb24gLmhhcy1kcm9wZG93bntwb3NpdGlvbjpyZWxhdGl2ZX0udG9wLWJhci1zZWN0aW9uIC5oYXMtZHJvcGRvd24+YTphZnRlcntjb250ZW50OiIiO2Rpc3BsYXk6YmxvY2s7d2lkdGg6MDtoZWlnaHQ6MDtib3JkZXI6c29saWQgNXB4O2JvcmRlci1jb2xvcjp0cmFuc3BhcmVudCB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCByZ2JhKDI1NSwyNTUsMjU1LDAuNSk7bWFyZ2luLXJpZ2h0OjE1cHg7bWFyZ2luLXRvcDotNC41cHg7cG9zaXRpb246YWJzb2x1dGU7dG9wOjIycHg7cmlnaHQ6MH0udG9wLWJhci1zZWN0aW9uIC5oYXMtZHJvcGRvd24ubW92ZWR7cG9zaXRpb246c3RhdGljfS50b3AtYmFyLXNlY3Rpb24gLmhhcy1kcm9wZG93bi5tb3ZlZD4uZHJvcGRvd257dmlzaWJpbGl0eTp2aXNpYmxlfS50b3AtYmFyLXNlY3Rpb24gLmRyb3Bkb3due3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MTAwJTt0b3A6MDt2aXNpYmlsaXR5OmhpZGRlbjt6LWluZGV4Ojk5fS50b3AtYmFyLXNlY3Rpb24gLmRyb3Bkb3duIGxpe3dpZHRoOjEwMCV9LnRvcC1iYXItc2VjdGlvbiAuZHJvcGRvd24gbGkgYXtmb250LXdlaWdodDpub3JtYWw7cGFkZGluZzo4cHggMTVweH0udG9wLWJhci1zZWN0aW9uIC5kcm9wZG93biBsaS50aXRsZSBoNXttYXJnaW4tYm90dG9tOjB9LnRvcC1iYXItc2VjdGlvbiAuZHJvcGRvd24gbGkudGl0bGUgaDUgYXtjb2xvcjojZmZmO2xpbmUtaGVpZ2h0OjIyLjVweDtkaXNwbGF5OmJsb2NrfS50b3AtYmFyLXNlY3Rpb24gLmRyb3Bkb3duIGxhYmVse3BhZGRpbmc6OHB4IDE1cHggMnB4O21hcmdpbi1ib3R0b206MDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2U7Y29sb3I6IzU1NTtmb250LXdlaWdodDpib2xkO2ZvbnQtc2l6ZTowLjYyNWVtfS50b3AtYmFyLWpzLWJyZWFrcG9pbnR7d2lkdGg6NTguNzVlbSAhaW1wb3J0YW50O3Zpc2liaWxpdHk6aGlkZGVufS5qcy1nZW5lcmF0ZWR7ZGlzcGxheTpibG9ja31AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDU4Ljc1ZW0pey50b3AtYmFye2JhY2tncm91bmQ6IzExMTsqem9vbToxO292ZXJmbG93OnZpc2libGV9LnRvcC1iYXI6YmVmb3JlLC50b3AtYmFyOmFmdGVye2NvbnRlbnQ6IiAiO2Rpc3BsYXk6dGFibGV9LnRvcC1iYXI6YWZ0ZXJ7Y2xlYXI6Ym90aH0udG9wLWJhciAudG9nZ2xlLXRvcGJhcntkaXNwbGF5Om5vbmV9LnRvcC1iYXIgLnRpdGxlLWFyZWF7ZmxvYXQ6bGVmdH0udG9wLWJhciAubmFtZSBoMSBhe3dpZHRoOmF1dG99LnRvcC1iYXIgaW5wdXQsLnRvcC1iYXIgLmJ1dHRvbntsaW5lLWhlaWdodDoyZW07Zm9udC1zaXplOjAuODc1ZW07aGVpZ2h0OjJlbTtwYWRkaW5nOjAgMTBweDtwb3NpdGlvbjpyZWxhdGl2ZTt0b3A6OHB4fS50b3AtYmFyLmV4cGFuZGVke2JhY2tncm91bmQ6IzExMX0uY29udGFpbi10by1ncmlkIC50b3AtYmFye21heC13aWR0aDo2Mi41ZW07bWFyZ2luOjAgYXV0b30udG9wLWJhci1zZWN0aW9uey13ZWJraXQtdHJhbnNpdGlvbjpub25lIDAgMDstbW96LXRyYW5zaXRpb246bm9uZSAwIDA7dHJhbnNpdGlvbjpub25lIDAgMDtsZWZ0OjAgIWltcG9ydGFudH0udG9wLWJhci1zZWN0aW9uIHVse3dpZHRoOmF1dG87aGVpZ2h0OmF1dG8gIWltcG9ydGFudDtkaXNwbGF5OmlubGluZX0udG9wLWJhci1zZWN0aW9uIHVsIGxpe2Zsb2F0OmxlZnR9LnRvcC1iYXItc2VjdGlvbiB1bCBsaSAuanMtZ2VuZXJhdGVke2Rpc3BsYXk6bm9uZX0udG9wLWJhci1zZWN0aW9uIGxpIGE6bm90KC5idXR0b24pe3BhZGRpbmc6MCAxNXB4O2xpbmUtaGVpZ2h0OjQ1cHg7YmFja2dyb3VuZDojMTExfS50b3AtYmFyLXNlY3Rpb24gbGkgYTpub3QoLmJ1dHRvbik6aG92ZXJ7YmFja2dyb3VuZDojMDAwfS50b3AtYmFyLXNlY3Rpb24gLmhhcy1kcm9wZG93bj5he3BhZGRpbmctcmlnaHQ6MzVweCAhaW1wb3J0YW50fS50b3AtYmFyLXNlY3Rpb24gLmhhcy1kcm9wZG93bj5hOmFmdGVye2NvbnRlbnQ6IiI7ZGlzcGxheTpibG9jazt3aWR0aDowO2hlaWdodDowO2JvcmRlcjpzb2xpZCA1cHg7Ym9yZGVyLWNvbG9yOnJnYmEoMjU1LDI1NSwyNTUsMC41KSB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCB0cmFuc3BhcmVudDttYXJnaW4tdG9wOi0yLjVweH0udG9wLWJhci1zZWN0aW9uIC5oYXMtZHJvcGRvd24ubW92ZWR7cG9zaXRpb246cmVsYXRpdmV9LnRvcC1iYXItc2VjdGlvbiAuaGFzLWRyb3Bkb3duLm1vdmVkPi5kcm9wZG93bnt2aXNpYmlsaXR5OmhpZGRlbn0udG9wLWJhci1zZWN0aW9uIC5oYXMtZHJvcGRvd246aG92ZXI+LmRyb3Bkb3duLC50b3AtYmFyLXNlY3Rpb24gLmhhcy1kcm9wZG93bjphY3RpdmU+LmRyb3Bkb3due3Zpc2liaWxpdHk6dmlzaWJsZX0udG9wLWJhci1zZWN0aW9uIC5oYXMtZHJvcGRvd24gLmRyb3Bkb3duIGxpLmhhcy1kcm9wZG93bj5hOmFmdGVye2JvcmRlcjpub25lO2NvbnRlbnQ6IlwwMGJiIjttYXJnaW4tdG9wOi03cHg7cmlnaHQ6NXB4fS50b3AtYmFyLXNlY3Rpb24gLmRyb3Bkb3due2xlZnQ6MDt0b3A6YXV0bztiYWNrZ3JvdW5kOnRyYW5zcGFyZW50O21pbi13aWR0aDoxMDAlfS50b3AtYmFyLXNlY3Rpb24gLmRyb3Bkb3duIGxpIGF7Y29sb3I6I2ZmZjtsaW5lLWhlaWdodDoxO3doaXRlLXNwYWNlOm5vd3JhcDtwYWRkaW5nOjdweCAxNXB4O2JhY2tncm91bmQ6IzFlMWUxZX0udG9wLWJhci1zZWN0aW9uIC5kcm9wZG93biBsaSBsYWJlbHt3aGl0ZS1zcGFjZTpub3dyYXA7YmFja2dyb3VuZDojMWUxZTFlfS50b3AtYmFyLXNlY3Rpb24gLmRyb3Bkb3duIGxpIC5kcm9wZG93bntsZWZ0OjEwMCU7dG9wOjB9LnRvcC1iYXItc2VjdGlvbj51bD4uZGl2aWRlcntib3JkZXItYm90dG9tOm5vbmU7Ym9yZGVyLXRvcDpub25lO2JvcmRlci1yaWdodDpzb2xpZCAxcHggIzJiMmIyYjtib3JkZXItbGVmdDpzb2xpZCAxcHggIzAwMDtjbGVhcjpub25lO2hlaWdodDo0NXB4O3dpZHRoOjBweH0udG9wLWJhci1zZWN0aW9uIC5oYXMtZm9ybXtiYWNrZ3JvdW5kOiMxMTE7cGFkZGluZzowIDE1cHg7aGVpZ2h0OjQ1cHh9LnRvcC1iYXItc2VjdGlvbiB1bC5yaWdodCBsaSAuZHJvcGRvd257bGVmdDphdXRvO3JpZ2h0OjB9LnRvcC1iYXItc2VjdGlvbiB1bC5yaWdodCBsaSAuZHJvcGRvd24gbGkgLmRyb3Bkb3due3JpZ2h0OjEwMCV9fS5vcmJpdC1jb250YWluZXJ7b3ZlcmZsb3c6aGlkZGVuO3dpZHRoOjEwMCU7cG9zaXRpb246cmVsYXRpdmU7YmFja2dyb3VuZDojZjVmNWY1fS5vcmJpdC1jb250YWluZXIgLm9yYml0LXNsaWRlcy1jb250YWluZXJ7bGlzdC1zdHlsZTpub25lO21hcmdpbjowO3BhZGRpbmc6MDtwb3NpdGlvbjpyZWxhdGl2ZX0ub3JiaXQtY29udGFpbmVyIC5vcmJpdC1zbGlkZXMtY29udGFpbmVyIGltZ3tkaXNwbGF5OmJsb2NrfS5vcmJpdC1jb250YWluZXIgLm9yYml0LXNsaWRlcy1jb250YWluZXI+Kntwb3NpdGlvbjpyZWxhdGl2ZTtmbG9hdDpsZWZ0O2hlaWdodDoxMDAlfS5vcmJpdC1jb250YWluZXIgLm9yYml0LXNsaWRlcy1jb250YWluZXI+KiAub3JiaXQtY2FwdGlvbntwb3NpdGlvbjphYnNvbHV0ZTtib3R0b206MDtiYWNrZ3JvdW5kLWNvbG9yOiMwMDA7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMCwwLDAuNik7Y29sb3I6I2ZmZjt3aWR0aDoxMDAlO3BhZGRpbmc6MTBweCAxNHB4O2ZvbnQtc2l6ZTowLjg3NWVtfS5vcmJpdC1jb250YWluZXIgLm9yYml0LXNsaWRlcy1jb250YWluZXI+KiAub3JiaXQtY2FwdGlvbiAqe2NvbG9yOiNmZmZ9Lm9yYml0LWNvbnRhaW5lciAub3JiaXQtc2xpZGUtbnVtYmVye3Bvc2l0aW9uOmFic29sdXRlO3RvcDoxMHB4O2xlZnQ6MTBweDtmb250LXNpemU6MTJweH0ub3JiaXQtY29udGFpbmVyIC5vcmJpdC1zbGlkZS1udW1iZXIgc3Bhbntmb250LXdlaWdodDo3MDB9Lm9yYml0LWNvbnRhaW5lciAub3JiaXQtdGltZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjEwcHg7cmlnaHQ6MTBweDtoZWlnaHQ6NnB4O3dpZHRoOjEwMHB4fS5vcmJpdC1jb250YWluZXIgLm9yYml0LXRpbWVyIC5vcmJpdC1wcm9ncmVzc3toZWlnaHQ6MTAwJTtiYWNrZ3JvdW5kLWNvbG9yOiMwMDA7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMCwwLDAuNik7ZGlzcGxheTpibG9jazt3aWR0aDowJX0ub3JiaXQtY29udGFpbmVyIC5vcmJpdC10aW1lcj5zcGFue2Rpc3BsYXk6bm9uZTtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MTBweDtyaWdodDowcHg7d2lkdGg6MTFweDtoZWlnaHQ6MTRweDtib3JkZXI6c29saWQgNHB4ICMwMDA7Ym9yZGVyLXRvcDpub25lO2JvcmRlci1ib3R0b206bm9uZX0ub3JiaXQtY29udGFpbmVyIC5vcmJpdC10aW1lci5wYXVzZWQ+c3BhbntyaWdodDotNnB4O3RvcDo5cHg7d2lkdGg6MTFweDtoZWlnaHQ6MTRweDtib3JkZXI6c29saWQgOHB4O2JvcmRlci1jb2xvcjp0cmFuc3BhcmVudCB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCAjMDAwfS5vcmJpdC1jb250YWluZXI6aG92ZXIgLm9yYml0LXRpbWVyPnNwYW57ZGlzcGxheTpibG9ja30ub3JiaXQtY29udGFpbmVyIC5vcmJpdC1wcmV2LC5vcmJpdC1jb250YWluZXIgLm9yYml0LW5leHR7cG9zaXRpb246YWJzb2x1dGU7dG9wOjUwJTttYXJnaW4tdG9wOi0yNXB4O2JhY2tncm91bmQtY29sb3I6IzAwMDtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMCwwLDAsMC42KTt3aWR0aDo1MHB4O2hlaWdodDo2MHB4O2xpbmUtaGVpZ2h0OjUwcHg7Y29sb3I6d2hpdGU7dGV4dC1pbmRlbnQ6LTk5OTlweCAhaW1wb3J0YW50fS5vcmJpdC1jb250YWluZXIgLm9yYml0LXByZXY+c3Bhbiwub3JiaXQtY29udGFpbmVyIC5vcmJpdC1uZXh0PnNwYW57cG9zaXRpb246YWJzb2x1dGU7dG9wOjUwJTttYXJnaW4tdG9wOi0xNnB4O2Rpc3BsYXk6YmxvY2s7d2lkdGg6MDtoZWlnaHQ6MDtib3JkZXI6c29saWQgMTZweH0ub3JiaXQtY29udGFpbmVyIC5vcmJpdC1wcmV2e2xlZnQ6MH0ub3JiaXQtY29udGFpbmVyIC5vcmJpdC1wcmV2PnNwYW57Ym9yZGVyLWNvbG9yOnRyYW5zcGFyZW50O2JvcmRlci1yaWdodC1jb2xvcjojZmZmfS5vcmJpdC1jb250YWluZXIgLm9yYml0LXByZXY6aG92ZXI+c3Bhbntib3JkZXItcmlnaHQtY29sb3I6I2NjY30ub3JiaXQtY29udGFpbmVyIC5vcmJpdC1uZXh0e3JpZ2h0OjB9Lm9yYml0LWNvbnRhaW5lciAub3JiaXQtbmV4dD5zcGFue2JvcmRlci1jb2xvcjp0cmFuc3BhcmVudDtib3JkZXItbGVmdC1jb2xvcjojZmZmO2xlZnQ6NTAlO21hcmdpbi1sZWZ0Oi04cHh9Lm9yYml0LWNvbnRhaW5lciAub3JiaXQtbmV4dDpob3Zlcj5zcGFue2JvcmRlci1sZWZ0LWNvbG9yOiNjY2N9Lm9yYml0LWJ1bGxldHN7bWFyZ2luOjAgYXV0byAzMHB4IGF1dG87b3ZlcmZsb3c6aGlkZGVuO3Bvc2l0aW9uOnJlbGF0aXZlO3RvcDoxMHB4fS5vcmJpdC1idWxsZXRzIGxpe2Rpc3BsYXk6YmxvY2s7d2lkdGg6MThweDtoZWlnaHQ6MThweDtiYWNrZ3JvdW5kOiNmZmY7ZmxvYXQ6bGVmdDttYXJnaW4tcmlnaHQ6NnB4O2JvcmRlcjpzb2xpZCAycHggIzAwMDstd2Via2l0LWJvcmRlci1yYWRpdXM6MTAwMHB4O2JvcmRlci1yYWRpdXM6MTAwMHB4fS5vcmJpdC1idWxsZXRzIGxpLmFjdGl2ZXtiYWNrZ3JvdW5kOiMwMDB9Lm9yYml0LWJ1bGxldHMgbGk6bGFzdC1jaGlsZHttYXJnaW4tcmlnaHQ6MH0udG91Y2ggLm9yYml0LWNvbnRhaW5lciAub3JiaXQtcHJldiwudG91Y2ggLm9yYml0LWNvbnRhaW5lciAub3JiaXQtbmV4dHtkaXNwbGF5Om5vbmV9LnRvdWNoIC5vcmJpdC1idWxsZXRze2Rpc3BsYXk6bm9uZX1AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDQ4ZW0pey50b3VjaCAub3JiaXQtY29udGFpbmVyIC5vcmJpdC1wcmV2LC50b3VjaCAub3JiaXQtY29udGFpbmVyIC5vcmJpdC1uZXh0e2Rpc3BsYXk6aW5oZXJpdH0udG91Y2ggLm9yYml0LWJ1bGxldHN7ZGlzcGxheTpibG9ja319LnJldmVhbC1tb2RhbC1iZ3twb3NpdGlvbjpmaXhlZDtoZWlnaHQ6MTAwJTt3aWR0aDoxMDAlO2JhY2tncm91bmQ6IzAwMDtiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsMC40NSk7ei1pbmRleDo5ODtkaXNwbGF5Om5vbmU7dG9wOjA7bGVmdDowfS5yZXZlYWwtbW9kYWx7dmlzaWJpbGl0eTpoaWRkZW47ZGlzcGxheTpub25lO3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6NTAlO3otaW5kZXg6OTk7aGVpZ2h0OmF1dG87YmFja2dyb3VuZC1jb2xvcjojZmZmO21hcmdpbi1sZWZ0Oi00MCU7d2lkdGg6ODAlO2JhY2tncm91bmQtY29sb3I6I2ZmZjtwYWRkaW5nOjEuMjVlbTtib3JkZXI6c29saWQgMXB4ICM2NjY7LXdlYmtpdC1ib3gtc2hhZG93OjAgMCAxMHB4IHJnYmEoMCwwLDAsMC40KTtib3gtc2hhZG93OjAgMCAxMHB4IHJnYmEoMCwwLDAsMC40KTt0b3A6NTBweH0ucmV2ZWFsLW1vZGFsIC5jb2x1bW4sLnJldmVhbC1tb2RhbCAuY29sdW1uc3ttaW4td2lkdGg6MH0ucmV2ZWFsLW1vZGFsPjpmaXJzdC1jaGlsZHttYXJnaW4tdG9wOjB9LnJldmVhbC1tb2RhbD46bGFzdC1jaGlsZHttYXJnaW4tYm90dG9tOjB9LnJldmVhbC1tb2RhbCAuY2xvc2UtcmV2ZWFsLW1vZGFse2ZvbnQtc2l6ZToxLjM3NWVtO2xpbmUtaGVpZ2h0OjE7cG9zaXRpb246YWJzb2x1dGU7dG9wOjAuNWVtO3JpZ2h0OjAuNjg3NWVtO2NvbG9yOiNhYWE7Zm9udC13ZWlnaHQ6Ym9sZDtjdXJzb3I6cG9pbnRlcn1AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDQ4ZW0pey5yZXZlYWwtbW9kYWx7cGFkZGluZzoxLjg3NWVtO3RvcDo2LjI1ZW19LnJldmVhbC1tb2RhbC5zbWFsbHttYXJnaW4tbGVmdDotMTUlO3dpZHRoOjMwJX0ucmV2ZWFsLW1vZGFsLm1lZGl1bXttYXJnaW4tbGVmdDotMjAlO3dpZHRoOjQwJX0ucmV2ZWFsLW1vZGFsLmxhcmdle21hcmdpbi1sZWZ0Oi0zMCU7d2lkdGg6NjAlfS5yZXZlYWwtbW9kYWwueGxhcmdle21hcmdpbi1sZWZ0Oi0zNSU7d2lkdGg6NzAlfS5yZXZlYWwtbW9kYWwuZXhwYW5ke21hcmdpbi1sZWZ0Oi00Ny41JTt3aWR0aDo5NSV9fUBtZWRpYSBwcmludHtkaXY6bm90KC5yZXZlYWwtbW9kYWwpe2Rpc3BsYXk6bm9uZX19LmpveXJpZGUtbGlzdHtkaXNwbGF5Om5vbmV9LmpveXJpZGUtdGlwLWd1aWRle2Rpc3BsYXk6bm9uZTtwb3NpdGlvbjphYnNvbHV0ZTtiYWNrZ3JvdW5kOiMwMDA7Y29sb3I6I2ZmZjt6LWluZGV4OjEwMTt0b3A6MDtsZWZ0OjIuNSU7Zm9udC1mYW1pbHk6aW5oZXJpdDtmb250LXdlaWdodDpub3JtYWw7d2lkdGg6OTUlfS5sdC1pZTkgLmpveXJpZGUtdGlwLWd1aWRle21heC13aWR0aDo4MDBweDtsZWZ0OjUwJTttYXJnaW4tbGVmdDotNDAwcHh9LmpveXJpZGUtY29udGVudC13cmFwcGVye3dpZHRoOjEwMCU7cGFkZGluZzoxLjEyNWVtIDEuMjVlbSAxLjVlbX0uam95cmlkZS1jb250ZW50LXdyYXBwZXIgLmJ1dHRvbnttYXJnaW4tYm90dG9tOjAgIWltcG9ydGFudH0uam95cmlkZS10aXAtZ3VpZGUgLmpveXJpZGUtbnVie2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246YWJzb2x1dGU7bGVmdDoyMnB4O3dpZHRoOjA7aGVpZ2h0OjA7Ym9yZGVyOnNvbGlkIDE0cHh9LmpveXJpZGUtdGlwLWd1aWRlIC5qb3lyaWRlLW51Yi50b3B7Ym9yZGVyLWNvbG9yOiMwMDA7Ym9yZGVyLXRvcC1jb2xvcjp0cmFuc3BhcmVudCAhaW1wb3J0YW50O2JvcmRlci1sZWZ0LWNvbG9yOnRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7Ym9yZGVyLXJpZ2h0LWNvbG9yOnRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7dG9wOi0yOHB4O2JvdHRvbTpub25lfS5qb3lyaWRlLXRpcC1ndWlkZSAuam95cmlkZS1udWIuYm90dG9te2JvcmRlci1jb2xvcjojMDAwICFpbXBvcnRhbnQ7Ym9yZGVyLWJvdHRvbS1jb2xvcjp0cmFuc3BhcmVudCAhaW1wb3J0YW50O2JvcmRlci1sZWZ0LWNvbG9yOnRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7Ym9yZGVyLXJpZ2h0LWNvbG9yOnRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7Ym90dG9tOi0yOHB4O2JvdHRvbTpub25lfS5qb3lyaWRlLXRpcC1ndWlkZSAuam95cmlkZS1udWIucmlnaHR7cmlnaHQ6LTI4cHh9LmpveXJpZGUtdGlwLWd1aWRlIC5qb3lyaWRlLW51Yi5sZWZ0e2xlZnQ6LTI4cHh9LmpveXJpZGUtdGlwLWd1aWRlIGgxLC5qb3lyaWRlLXRpcC1ndWlkZSBoMiwuam95cmlkZS10aXAtZ3VpZGUgaDMsLmpveXJpZGUtdGlwLWd1aWRlIGg0LC5qb3lyaWRlLXRpcC1ndWlkZSBoNSwuam95cmlkZS10aXAtZ3VpZGUgaDZ7bGluZS1oZWlnaHQ6MS4yNTttYXJnaW46MDtmb250LXdlaWdodDpib2xkO2NvbG9yOiNmZmZ9LmpveXJpZGUtdGlwLWd1aWRlIHB7bWFyZ2luOjAgMCAxLjEyNWVtIDA7Zm9udC1zaXplOjAuODc1ZW07bGluZS1oZWlnaHQ6MS4zfS5qb3lyaWRlLXRpbWVyLWluZGljYXRvci13cmFwe3dpZHRoOjUwcHg7aGVpZ2h0OjNweDtib3JkZXI6c29saWQgMXB4ICM1NTU7cG9zaXRpb246YWJzb2x1dGU7cmlnaHQ6MS4wNjI1ZW07Ym90dG9tOjFlbX0uam95cmlkZS10aW1lci1pbmRpY2F0b3J7ZGlzcGxheTpibG9jazt3aWR0aDowO2hlaWdodDppbmhlcml0O2JhY2tncm91bmQ6IzY2Nn0uam95cmlkZS1jbG9zZS10aXB7cG9zaXRpb246YWJzb2x1dGU7cmlnaHQ6MTJweDt0b3A6MTBweDtjb2xvcjojNzc3ICFpbXBvcnRhbnQ7dGV4dC1kZWNvcmF0aW9uOm5vbmU7Zm9udC1zaXplOjMwcHg7Zm9udC13ZWlnaHQ6bm9ybWFsO2xpbmUtaGVpZ2h0OjAuNSAhaW1wb3J0YW50fS5qb3lyaWRlLWNsb3NlLXRpcDpob3Zlciwuam95cmlkZS1jbG9zZS10aXA6Zm9jdXN7Y29sb3I6I2VlZSAhaW1wb3J0YW50fS5qb3lyaWRlLW1vZGFsLWJne3Bvc2l0aW9uOmZpeGVkO2hlaWdodDoxMDAlO3dpZHRoOjEwMCU7YmFja2dyb3VuZDp0cmFuc3BhcmVudDtiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsMC41KTt6LWluZGV4OjEwMDtkaXNwbGF5Om5vbmU7dG9wOjA7bGVmdDowO2N1cnNvcjpwb2ludGVyfUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNDhlbSl7LmpveXJpZGUtdGlwLWd1aWRle3dpZHRoOjMwMHB4O2xlZnQ6aW5oZXJpdH0uam95cmlkZS10aXAtZ3VpZGUgLmpveXJpZGUtbnViLmJvdHRvbXtib3JkZXItY29sb3I6IzAwMCAhaW1wb3J0YW50O2JvcmRlci1ib3R0b20tY29sb3I6dHJhbnNwYXJlbnQgIWltcG9ydGFudDtib3JkZXItbGVmdC1jb2xvcjp0cmFuc3BhcmVudCAhaW1wb3J0YW50O2JvcmRlci1yaWdodC1jb2xvcjp0cmFuc3BhcmVudCAhaW1wb3J0YW50O2JvdHRvbTotMjhweDtib3R0b206bm9uZX0uam95cmlkZS10aXAtZ3VpZGUgLmpveXJpZGUtbnViLnJpZ2h0e2JvcmRlci1jb2xvcjojMDAwICFpbXBvcnRhbnQ7Ym9yZGVyLXRvcC1jb2xvcjp0cmFuc3BhcmVudCAhaW1wb3J0YW50O2JvcmRlci1yaWdodC1jb2xvcjp0cmFuc3BhcmVudCAhaW1wb3J0YW50O2JvcmRlci1ib3R0b20tY29sb3I6dHJhbnNwYXJlbnQgIWltcG9ydGFudDt0b3A6MjJweDtib3R0b206bm9uZTtsZWZ0OmF1dG87cmlnaHQ6LTI4cHh9LmpveXJpZGUtdGlwLWd1aWRlIC5qb3lyaWRlLW51Yi5sZWZ0e2JvcmRlci1jb2xvcjojMDAwICFpbXBvcnRhbnQ7Ym9yZGVyLXRvcC1jb2xvcjp0cmFuc3BhcmVudCAhaW1wb3J0YW50O2JvcmRlci1sZWZ0LWNvbG9yOnRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7Ym9yZGVyLWJvdHRvbS1jb2xvcjp0cmFuc3BhcmVudCAhaW1wb3J0YW50O3RvcDoyMnB4O2xlZnQ6LTI4cHg7cmlnaHQ6YXV0bztib3R0b206bm9uZX19W2RhdGEtY2xlYXJpbmddeyp6b29tOjE7bWFyZ2luLWJvdHRvbTowfVtkYXRhLWNsZWFyaW5nXTpiZWZvcmUsW2RhdGEtY2xlYXJpbmddOmFmdGVye2NvbnRlbnQ6IiAiO2Rpc3BsYXk6dGFibGV9W2RhdGEtY2xlYXJpbmddOmFmdGVye2NsZWFyOmJvdGh9LmNsZWFyaW5nLWJsYWNrb3V0e2JhY2tncm91bmQ6IzExMTtwb3NpdGlvbjpmaXhlZDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3RvcDowO2xlZnQ6MDt6LWluZGV4Ojk5OH0uY2xlYXJpbmctYmxhY2tvdXQgLmNsZWFyaW5nLWNsb3Nle2Rpc3BsYXk6YmxvY2t9LmNsZWFyaW5nLWNvbnRhaW5lcntwb3NpdGlvbjpyZWxhdGl2ZTt6LWluZGV4Ojk5ODtoZWlnaHQ6MTAwJTtvdmVyZmxvdzpoaWRkZW47bWFyZ2luOjB9LnZpc2libGUtaW1ne2hlaWdodDo5NSU7cG9zaXRpb246cmVsYXRpdmV9LnZpc2libGUtaW1nIGltZ3twb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjUwJTt0b3A6NTAlO21hcmdpbi1sZWZ0Oi01MCU7bWF4LWhlaWdodDoxMDAlO21heC13aWR0aDoxMDAlfS5jbGVhcmluZy1jYXB0aW9ue2NvbG9yOiNmZmY7bGluZS1oZWlnaHQ6MS4zO21hcmdpbi1ib3R0b206MDt0ZXh0LWFsaWduOmNlbnRlcjtib3R0b206MDtiYWNrZ3JvdW5kOiMxMTE7d2lkdGg6MTAwJTtwYWRkaW5nOjEwcHggMzBweDtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjB9LmNsZWFyaW5nLWNsb3Nle3otaW5kZXg6OTk5O3BhZGRpbmctbGVmdDoyMHB4O3BhZGRpbmctdG9wOjEwcHg7Zm9udC1zaXplOjQwcHg7bGluZS1oZWlnaHQ6MTtjb2xvcjojZmZmO2Rpc3BsYXk6bm9uZX0uY2xlYXJpbmctY2xvc2U6aG92ZXIsLmNsZWFyaW5nLWNsb3NlOmZvY3Vze2NvbG9yOiNjY2N9LmNsZWFyaW5nLWFzc2VtYmxlZCAuY2xlYXJpbmctY29udGFpbmVye2hlaWdodDoxMDAlfS5jbGVhcmluZy1hc3NlbWJsZWQgLmNsZWFyaW5nLWNvbnRhaW5lciAuY2Fyb3VzZWw+dWx7ZGlzcGxheTpub25lfUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNDhlbSl7LmNsZWFyaW5nLW1haW4tcHJldiwuY2xlYXJpbmctbWFpbi1uZXh0e3Bvc2l0aW9uOmFic29sdXRlO2hlaWdodDoxMDAlO3dpZHRoOjQwcHg7dG9wOjB9LmNsZWFyaW5nLW1haW4tcHJldj5zcGFuLC5jbGVhcmluZy1tYWluLW5leHQ+c3Bhbntwb3NpdGlvbjphYnNvbHV0ZTt0b3A6NTAlO2Rpc3BsYXk6YmxvY2s7d2lkdGg6MDtoZWlnaHQ6MDtib3JkZXI6c29saWQgMTZweH0uY2xlYXJpbmctbWFpbi1wcmV2e2xlZnQ6MH0uY2xlYXJpbmctbWFpbi1wcmV2PnNwYW57bGVmdDo1cHg7Ym9yZGVyLWNvbG9yOnRyYW5zcGFyZW50O2JvcmRlci1yaWdodC1jb2xvcjojZmZmfS5jbGVhcmluZy1tYWluLW5leHR7cmlnaHQ6MH0uY2xlYXJpbmctbWFpbi1uZXh0PnNwYW57Ym9yZGVyLWNvbG9yOnRyYW5zcGFyZW50O2JvcmRlci1sZWZ0LWNvbG9yOiNmZmZ9LmNsZWFyaW5nLW1haW4tcHJldi5kaXNhYmxlZCwuY2xlYXJpbmctbWFpbi1uZXh0LmRpc2FibGVke29wYWNpdHk6MC41fS5jbGVhcmluZy1mZWF0dXJlIH4gbGl7ZGlzcGxheTpub25lfS5jbGVhcmluZy1hc3NlbWJsZWQgLmNsZWFyaW5nLWNvbnRhaW5lciAuY2Fyb3VzZWx7YmFja2dyb3VuZDojMTExO2hlaWdodDoxNTBweDttYXJnaW4tdG9wOjVweH0uY2xlYXJpbmctYXNzZW1ibGVkIC5jbGVhcmluZy1jb250YWluZXIgLmNhcm91c2VsPnVse2Rpc3BsYXk6YmxvY2s7ei1pbmRleDo5OTk7d2lkdGg6MjAwJTtoZWlnaHQ6MTAwJTttYXJnaW4tbGVmdDowO3Bvc2l0aW9uOnJlbGF0aXZlO2xlZnQ6MH0uY2xlYXJpbmctYXNzZW1ibGVkIC5jbGVhcmluZy1jb250YWluZXIgLmNhcm91c2VsPnVsIGxpe2Rpc3BsYXk6YmxvY2s7d2lkdGg6MTc1cHg7aGVpZ2h0OmluaGVyaXQ7cGFkZGluZzowO2Zsb2F0OmxlZnQ7b3ZlcmZsb3c6aGlkZGVuO21hcmdpbi1yaWdodDoxcHg7cG9zaXRpb246cmVsYXRpdmU7Y3Vyc29yOnBvaW50ZXI7b3BhY2l0eTowLjR9LmNsZWFyaW5nLWFzc2VtYmxlZCAuY2xlYXJpbmctY29udGFpbmVyIC5jYXJvdXNlbD51bCBsaS5maXgtaGVpZ2h0IGltZ3ttaW4taGVpZ2h0OjEwMCU7aGVpZ2h0OjEwMCU7bWF4LXdpZHRoOm5vbmV9LmNsZWFyaW5nLWFzc2VtYmxlZCAuY2xlYXJpbmctY29udGFpbmVyIC5jYXJvdXNlbD51bCBsaSBhLnRoe2JvcmRlcjpub25lOy13ZWJraXQtYm94LXNoYWRvdzpub25lO2JveC1zaGFkb3c6bm9uZTtkaXNwbGF5OmJsb2NrfS5jbGVhcmluZy1hc3NlbWJsZWQgLmNsZWFyaW5nLWNvbnRhaW5lciAuY2Fyb3VzZWw+dWwgbGkgaW1ne2N1cnNvcjpwb2ludGVyICFpbXBvcnRhbnQ7bWluLXdpZHRoOjEwMCUgIWltcG9ydGFudH0uY2xlYXJpbmctYXNzZW1ibGVkIC5jbGVhcmluZy1jb250YWluZXIgLmNhcm91c2VsPnVsIGxpLnZpc2libGV7b3BhY2l0eToxfS5jbGVhcmluZy1hc3NlbWJsZWQgLmNsZWFyaW5nLWNvbnRhaW5lciAudmlzaWJsZS1pbWd7YmFja2dyb3VuZDojMTExO292ZXJmbG93OmhpZGRlbjtoZWlnaHQ6NzUlfS5jbGVhcmluZy1jbG9zZXtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MTBweDtyaWdodDoyMHB4O3BhZGRpbmctbGVmdDowO3BhZGRpbmctdG9wOjB9fS5hbGVydC1ib3h7Ym9yZGVyLXN0eWxlOnNvbGlkO2JvcmRlci13aWR0aDoxcHg7ZGlzcGxheTpibG9jaztmb250LXdlaWdodDpib2xkO21hcmdpbi1ib3R0b206MS4yNWVtO3Bvc2l0aW9uOnJlbGF0aXZlO3BhZGRpbmc6MC42ODc1ZW0gMS4zMTI1ZW0gMC43NWVtIDAuNjg3NWVtO2ZvbnQtc2l6ZTowLjg3NWVtO2JhY2tncm91bmQtY29sb3I6IzJiYTZjYjtib3JkZXItY29sb3I6IzIyODRhMTtjb2xvcjojZmZmfS5hbGVydC1ib3ggLmNsb3Nle2ZvbnQtc2l6ZToxLjM3NWVtO3BhZGRpbmc6NXB4IDRweCA0cHg7bGluZS1oZWlnaHQ6MDtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MC40Mzc1ZW07cmlnaHQ6MC4zMTI1ZW07Y29sb3I6IzMzMztvcGFjaXR5OjAuM30uYWxlcnQtYm94IC5jbG9zZTpob3ZlciwuYWxlcnQtYm94IC5jbG9zZTpmb2N1c3tvcGFjaXR5OjAuNX0uYWxlcnQtYm94LnJhZGl1c3std2Via2l0LWJvcmRlci1yYWRpdXM6M3B4O2JvcmRlci1yYWRpdXM6M3B4fS5hbGVydC1ib3gucm91bmR7LXdlYmtpdC1ib3JkZXItcmFkaXVzOjEwMDBweDtib3JkZXItcmFkaXVzOjEwMDBweH0uYWxlcnQtYm94LnN1Y2Nlc3N7YmFja2dyb3VuZC1jb2xvcjojNWRhNDIzO2JvcmRlci1jb2xvcjojNDU3YTFhO2NvbG9yOiNmZmZ9LmFsZXJ0LWJveC5hbGVydHtiYWNrZ3JvdW5kLWNvbG9yOiNjNjBmMTM7Ym9yZGVyLWNvbG9yOiM5NzBiMGU7Y29sb3I6I2ZmZn0uYWxlcnQtYm94LnNlY29uZGFyeXtiYWNrZ3JvdW5kLWNvbG9yOiNlOWU5ZTk7Ym9yZGVyLWNvbG9yOiNkMGQwZDA7Y29sb3I6IzUwNTA1MH0uYnJlYWRjcnVtYnN7ZGlzcGxheTpibG9jaztwYWRkaW5nOjAuMzc1ZW0gMC44NzVlbSAwLjU2MjVlbTtvdmVyZmxvdzpoaWRkZW47bWFyZ2luLWxlZnQ6MDtsaXN0LXN0eWxlOm5vbmU7Ym9yZGVyLXN0eWxlOnNvbGlkO2JvcmRlci13aWR0aDoxcHg7YmFja2dyb3VuZC1jb2xvcjojZjZmNmY2O2JvcmRlci1jb2xvcjojZGNkY2RjOy13ZWJraXQtYm9yZGVyLXJhZGl1czozcHg7Ym9yZGVyLXJhZGl1czozcHh9LmJyZWFkY3J1bWJzIGxpe21hcmdpbjowO3BhZGRpbmc6MCAwLjc1ZW0gMCAwO2Zsb2F0OmxlZnR9LmJyZWFkY3J1bWJzIGxpOmhvdmVyIGEsLmJyZWFkY3J1bWJzIGxpOmZvY3VzIGF7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZX0uYnJlYWRjcnVtYnMgbGkgYSwuYnJlYWRjcnVtYnMgbGkgc3Bhbntmb250LXNpemU6MC42ODc1ZW07cGFkZGluZy1sZWZ0OjAuNzVlbTt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2U7Y29sb3I6IzJiYTZjYn0uYnJlYWRjcnVtYnMgbGkuY3VycmVudCBhe2N1cnNvcjpkZWZhdWx0O2NvbG9yOiMzMzN9LmJyZWFkY3J1bWJzIGxpLmN1cnJlbnQ6aG92ZXIgYSwuYnJlYWRjcnVtYnMgbGkuY3VycmVudDpmb2N1cyBhe3RleHQtZGVjb3JhdGlvbjpub25lfS5icmVhZGNydW1icyBsaS51bmF2YWlsYWJsZSBhe2NvbG9yOiM5OTl9LmJyZWFkY3J1bWJzIGxpLnVuYXZhaWxhYmxlOmhvdmVyIGEsLmJyZWFkY3J1bWJzIGxpLnVuYXZhaWxhYmxlIGE6Zm9jdXN7dGV4dC1kZWNvcmF0aW9uOm5vbmU7Y29sb3I6Izk5OTtjdXJzb3I6ZGVmYXVsdH0uYnJlYWRjcnVtYnMgbGk6YmVmb3Jle2NvbnRlbnQ6Ii8iO2NvbG9yOiNhYWE7cG9zaXRpb246cmVsYXRpdmU7dG9wOjFweH0uYnJlYWRjcnVtYnMgbGk6Zmlyc3QtY2hpbGQgYSwuYnJlYWRjcnVtYnMgbGk6Zmlyc3QtY2hpbGQgc3BhbntwYWRkaW5nLWxlZnQ6MH0uYnJlYWRjcnVtYnMgbGk6Zmlyc3QtY2hpbGQ6YmVmb3Jle2NvbnRlbnQ6IiAifS5rZXlzdHJva2Usa2Jke2JhY2tncm91bmQtY29sb3I6I2VkZWRlZDtib3JkZXItY29sb3I6I2RiZGJkYjtjb2xvcjojMjIyO2JvcmRlci1zdHlsZTpzb2xpZDtib3JkZXItd2lkdGg6MXB4O21hcmdpbjowO2ZvbnQtZmFtaWx5OiJDb25zb2xhcyIsIk1lbmxvIiwiQ291cmllciIsbW9ub3NwYWNlO2ZvbnQtc2l6ZTowLjkzNzVlbTtwYWRkaW5nOjAuMTI1ZW0gMC4yNWVtIDBlbTstd2Via2l0LWJvcmRlci1yYWRpdXM6M3B4O2JvcmRlci1yYWRpdXM6M3B4fS5sYWJlbHtmb250LXdlaWdodDo1MDA7dGV4dC1hbGlnbjpjZW50ZXI7dGV4dC1kZWNvcmF0aW9uOm5vbmU7bGluZS1oZWlnaHQ6MTt3aGl0ZS1zcGFjZTpub3dyYXA7ZGlzcGxheTppbmxpbmUtYmxvY2s7cG9zaXRpb246cmVsYXRpdmU7cGFkZGluZzowLjE4NzVlbSAwLjYyNWVtIDAuMjVlbTtmb250LXNpemU6MC44NzVlbTtiYWNrZ3JvdW5kLWNvbG9yOiMyYmE2Y2I7Y29sb3I6I2ZmZn0ubGFiZWwucmFkaXVzey13ZWJraXQtYm9yZGVyLXJhZGl1czozcHg7Ym9yZGVyLXJhZGl1czozcHh9LmxhYmVsLnJvdW5key13ZWJraXQtYm9yZGVyLXJhZGl1czoxMDAwcHg7Ym9yZGVyLXJhZGl1czoxMDAwcHh9LmxhYmVsLmFsZXJ0e2JhY2tncm91bmQtY29sb3I6I2M2MGYxMztjb2xvcjojZmZmfS5sYWJlbC5zdWNjZXNze2JhY2tncm91bmQtY29sb3I6IzVkYTQyMztjb2xvcjojZmZmfS5sYWJlbC5zZWNvbmRhcnl7YmFja2dyb3VuZC1jb2xvcjojZTllOWU5O2NvbG9yOiMzMzN9LmlubGluZS1saXN0e21hcmdpbjowIGF1dG8gMS4wNjI1ZW0gYXV0bzttYXJnaW4tbGVmdDotMS4zNzVlbTttYXJnaW4tcmlnaHQ6MDtwYWRkaW5nOjA7bGlzdC1zdHlsZTpub25lO292ZXJmbG93OmhpZGRlbn0uaW5saW5lLWxpc3Q+bGl7bGlzdC1zdHlsZTpub25lO2Zsb2F0OmxlZnQ7bWFyZ2luLWxlZnQ6MS4zNzVlbTtkaXNwbGF5OmJsb2NrfS5pbmxpbmUtbGlzdD5saT4qe2Rpc3BsYXk6YmxvY2t9LnBhZ2luYXRpb257ZGlzcGxheTpibG9jaztoZWlnaHQ6MS41ZW07bWFyZ2luLWxlZnQ6LTAuMzEyNWVtfS5wYWdpbmF0aW9uIGxpe2Rpc3BsYXk6YmxvY2s7ZmxvYXQ6bGVmdDtoZWlnaHQ6MS41ZW07Y29sb3I6IzIyMjtmb250LXNpemU6MC44NzVlbTttYXJnaW4tbGVmdDowLjMxMjVlbX0ucGFnaW5hdGlvbiBsaSBhe2Rpc3BsYXk6YmxvY2s7cGFkZGluZzowLjA2MjVlbSAwLjQzNzVlbSAwLjA2MjVlbTtjb2xvcjojOTk5fS5wYWdpbmF0aW9uIGxpOmhvdmVyIGEsLnBhZ2luYXRpb24gbGkgYTpmb2N1c3tiYWNrZ3JvdW5kOiNlNmU2ZTZ9LnBhZ2luYXRpb24gbGkudW5hdmFpbGFibGUgYXtjdXJzb3I6ZGVmYXVsdDtjb2xvcjojOTk5fS5wYWdpbmF0aW9uIGxpLnVuYXZhaWxhYmxlOmhvdmVyIGEsLnBhZ2luYXRpb24gbGkudW5hdmFpbGFibGUgYTpmb2N1c3tiYWNrZ3JvdW5kOnRyYW5zcGFyZW50fS5wYWdpbmF0aW9uIGxpLmN1cnJlbnQgYXtiYWNrZ3JvdW5kOiMyYmE2Y2I7Y29sb3I6I2ZmZjtmb250LXdlaWdodDpib2xkO2N1cnNvcjpkZWZhdWx0fS5wYWdpbmF0aW9uIGxpLmN1cnJlbnQgYTpob3ZlciwucGFnaW5hdGlvbiBsaS5jdXJyZW50IGE6Zm9jdXN7YmFja2dyb3VuZDojMmJhNmNifS5wYWdpbmF0aW9uLWNlbnRlcmVke3RleHQtYWxpZ246Y2VudGVyfS5wYWdpbmF0aW9uLWNlbnRlcmVkIHVsPmxpe2Zsb2F0Om5vbmU7ZGlzcGxheTppbmxpbmUtYmxvY2t9LnBhbmVse2JvcmRlci1zdHlsZTpzb2xpZDtib3JkZXItd2lkdGg6MXB4O2JvcmRlci1jb2xvcjojZDlkOWQ5O21hcmdpbi1ib3R0b206MS4yNWVtO3BhZGRpbmc6MS4yNWVtO2JhY2tncm91bmQ6I2YyZjJmMn0ucGFuZWwgaDEsLnBhbmVsIGgyLC5wYW5lbCBoMywucGFuZWwgaDQsLnBhbmVsIGg1LC5wYW5lbCBoNiwucGFuZWwgcHtjb2xvcjojMzMzfS5wYW5lbD46Zmlyc3QtY2hpbGR7bWFyZ2luLXRvcDowfS5wYW5lbD46bGFzdC1jaGlsZHttYXJnaW4tYm90dG9tOjB9LnBhbmVsIGgxLC5wYW5lbCBoMiwucGFuZWwgaDMsLnBhbmVsIGg0LC5wYW5lbCBoNSwucGFuZWwgaDZ7bGluZS1oZWlnaHQ6MTttYXJnaW4tYm90dG9tOjAuNjI1ZW19LnBhbmVsIGgxLnN1YmhlYWRlciwucGFuZWwgaDIuc3ViaGVhZGVyLC5wYW5lbCBoMy5zdWJoZWFkZXIsLnBhbmVsIGg0LnN1YmhlYWRlciwucGFuZWwgaDUuc3ViaGVhZGVyLC5wYW5lbCBoNi5zdWJoZWFkZXJ7bGluZS1oZWlnaHQ6MS40fS5wYW5lbC5jYWxsb3V0e2JvcmRlci1zdHlsZTpzb2xpZDtib3JkZXItd2lkdGg6MXB4O2JvcmRlci1jb2xvcjojMjI4NGExO21hcmdpbi1ib3R0b206MS4yNWVtO3BhZGRpbmc6MS4yNWVtO2JhY2tncm91bmQ6IzJiYTZjYjstd2Via2l0LWJveC1zaGFkb3c6MCAxcHggMCByZ2JhKDI1NSwyNTUsMjU1LDAuNSkgaW5zZXQ7Ym94LXNoYWRvdzowIDFweCAwIHJnYmEoMjU1LDI1NSwyNTUsMC41KSBpbnNldH0ucGFuZWwuY2FsbG91dCBoMSwucGFuZWwuY2FsbG91dCBoMiwucGFuZWwuY2FsbG91dCBoMywucGFuZWwuY2FsbG91dCBoNCwucGFuZWwuY2FsbG91dCBoNSwucGFuZWwuY2FsbG91dCBoNiwucGFuZWwuY2FsbG91dCBwe2NvbG9yOiNmZmZ9LnBhbmVsLmNhbGxvdXQ+OmZpcnN0LWNoaWxke21hcmdpbi10b3A6MH0ucGFuZWwuY2FsbG91dD46bGFzdC1jaGlsZHttYXJnaW4tYm90dG9tOjB9LnBhbmVsLmNhbGxvdXQgaDEsLnBhbmVsLmNhbGxvdXQgaDIsLnBhbmVsLmNhbGxvdXQgaDMsLnBhbmVsLmNhbGxvdXQgaDQsLnBhbmVsLmNhbGxvdXQgaDUsLnBhbmVsLmNhbGxvdXQgaDZ7bGluZS1oZWlnaHQ6MTttYXJnaW4tYm90dG9tOjAuNjI1ZW19LnBhbmVsLmNhbGxvdXQgaDEuc3ViaGVhZGVyLC5wYW5lbC5jYWxsb3V0IGgyLnN1YmhlYWRlciwucGFuZWwuY2FsbG91dCBoMy5zdWJoZWFkZXIsLnBhbmVsLmNhbGxvdXQgaDQuc3ViaGVhZGVyLC5wYW5lbC5jYWxsb3V0IGg1LnN1YmhlYWRlciwucGFuZWwuY2FsbG91dCBoNi5zdWJoZWFkZXJ7bGluZS1oZWlnaHQ6MS40fS5wYW5lbC5yYWRpdXN7LXdlYmtpdC1ib3JkZXItcmFkaXVzOjNweDtib3JkZXItcmFkaXVzOjNweH0ucHJpY2luZy10YWJsZXtib3JkZXI6c29saWQgMXB4ICNkZGQ7bWFyZ2luLWxlZnQ6MDttYXJnaW4tYm90dG9tOjEuMjVlbX0ucHJpY2luZy10YWJsZSAqe2xpc3Qtc3R5bGU6bm9uZTtsaW5lLWhlaWdodDoxfS5wcmljaW5nLXRhYmxlIC50aXRsZXtiYWNrZ3JvdW5kLWNvbG9yOiNkZGQ7cGFkZGluZzowLjkzNzVlbSAxLjI1ZW07dGV4dC1hbGlnbjpjZW50ZXI7Y29sb3I6IzMzMztmb250LXdlaWdodDpib2xkO2ZvbnQtc2l6ZToxZW19LnByaWNpbmctdGFibGUgLnByaWNle2JhY2tncm91bmQtY29sb3I6I2VlZTtwYWRkaW5nOjAuOTM3NWVtIDEuMjVlbTt0ZXh0LWFsaWduOmNlbnRlcjtjb2xvcjojMzMzO2ZvbnQtd2VpZ2h0Om5vcm1hbDtmb250LXNpemU6MS4yNWVtfS5wcmljaW5nLXRhYmxlIC5kZXNjcmlwdGlvbntiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7cGFkZGluZzowLjkzNzVlbTt0ZXh0LWFsaWduOmNlbnRlcjtjb2xvcjojNzc3O2ZvbnQtc2l6ZTowLjc1ZW07Zm9udC13ZWlnaHQ6bm9ybWFsO2xpbmUtaGVpZ2h0OjEuNDtib3JkZXItYm90dG9tOmRvdHRlZCAxcHggI2RkZH0ucHJpY2luZy10YWJsZSAuYnVsbGV0LWl0ZW17YmFja2dyb3VuZC1jb2xvcjojZmZmO3BhZGRpbmc6MC45Mzc1ZW07dGV4dC1hbGlnbjpjZW50ZXI7Y29sb3I6IzMzMztmb250LXNpemU6MC44NzVlbTtmb250LXdlaWdodDpub3JtYWw7Ym9yZGVyLWJvdHRvbTpkb3R0ZWQgMXB4ICNkZGR9LnByaWNpbmctdGFibGUgLmN0YS1idXR0b257YmFja2dyb3VuZC1jb2xvcjojZjVmNWY1O3RleHQtYWxpZ246Y2VudGVyO3BhZGRpbmc6MS4yNWVtIDEuMjVlbSAwfS5wcm9ncmVzc3tiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O2hlaWdodDoxLjU2MjVlbTtib3JkZXI6MXB4IHNvbGlkICNjY2M7cGFkZGluZzowLjEyNWVtO21hcmdpbi1ib3R0b206MC42MjVlbX0ucHJvZ3Jlc3MgLm1ldGVye2JhY2tncm91bmQ6IzJiYTZjYjtoZWlnaHQ6MTAwJTtkaXNwbGF5OmJsb2NrfS5wcm9ncmVzcy5zZWNvbmRhcnkgLm1ldGVye2JhY2tncm91bmQ6I2U5ZTllOTtoZWlnaHQ6MTAwJTtkaXNwbGF5OmJsb2NrfS5wcm9ncmVzcy5zdWNjZXNzIC5tZXRlcntiYWNrZ3JvdW5kOiM1ZGE0MjM7aGVpZ2h0OjEwMCU7ZGlzcGxheTpibG9ja30ucHJvZ3Jlc3MuYWxlcnQgLm1ldGVye2JhY2tncm91bmQ6I2M2MGYxMztoZWlnaHQ6MTAwJTtkaXNwbGF5OmJsb2NrfS5wcm9ncmVzcy5yYWRpdXN7LXdlYmtpdC1ib3JkZXItcmFkaXVzOjNweDtib3JkZXItcmFkaXVzOjNweH0ucHJvZ3Jlc3MucmFkaXVzIC5tZXRlcnstd2Via2l0LWJvcmRlci1yYWRpdXM6MnB4O2JvcmRlci1yYWRpdXM6MnB4fS5wcm9ncmVzcy5yb3VuZHstd2Via2l0LWJvcmRlci1yYWRpdXM6MTAwMHB4O2JvcmRlci1yYWRpdXM6MTAwMHB4fS5wcm9ncmVzcy5yb3VuZCAubWV0ZXJ7LXdlYmtpdC1ib3JkZXItcmFkaXVzOjk5OXB4O2JvcmRlci1yYWRpdXM6OTk5cHh9LnNpZGUtbmF2e2Rpc3BsYXk6YmxvY2s7bWFyZ2luOjA7cGFkZGluZzowLjg3NWVtIDA7bGlzdC1zdHlsZS10eXBlOm5vbmU7bGlzdC1zdHlsZS1wb3NpdGlvbjppbnNpZGV9LnNpZGUtbmF2IGxpe21hcmdpbjowIDAgMC40Mzc1ZW0gMDtmb250LXNpemU6MC44NzVlbX0uc2lkZS1uYXYgbGkgYXtkaXNwbGF5OmJsb2NrO2NvbG9yOiMyYmE2Y2J9LnNpZGUtbmF2IGxpLmFjdGl2ZSBhe2NvbG9yOiM0ZDRkNGQ7Zm9udC13ZWlnaHQ6Ym9sZH0uc2lkZS1uYXYgbGkuZGl2aWRlcntib3JkZXItdG9wOjFweCBzb2xpZDtoZWlnaHQ6MDtwYWRkaW5nOjA7bGlzdC1zdHlsZTpub25lO2JvcmRlci10b3AtY29sb3I6I2U2ZTZlNn0uc3ViLW5hdntkaXNwbGF5OmJsb2NrO3dpZHRoOmF1dG87b3ZlcmZsb3c6aGlkZGVuO21hcmdpbjotMC4yNWVtIDAgMS4xMjVlbTtwYWRkaW5nLXRvcDowLjI1ZW07bWFyZ2luLXJpZ2h0OjA7bWFyZ2luLWxlZnQ6LTAuNTYyNWVtfS5zdWItbmF2IGR0LC5zdWItbmF2IGRke2Zsb2F0OmxlZnQ7ZGlzcGxheTppbmxpbmU7bWFyZ2luLWxlZnQ6MC41NjI1ZW07bWFyZ2luLWJvdHRvbTowLjYyNWVtO2ZvbnQtd2VpZ2h0Om5vcm1hbDtmb250LXNpemU6MC44NzVlbX0uc3ViLW5hdiBkdCBhLC5zdWItbmF2IGRkIGF7Y29sb3I6Izk5OTt0ZXh0LWRlY29yYXRpb246bm9uZX0uc3ViLW5hdiBkdC5hY3RpdmUgYSwuc3ViLW5hdiBkZC5hY3RpdmUgYXstd2Via2l0LWJvcmRlci1yYWRpdXM6MTAwMHB4O2JvcmRlci1yYWRpdXM6MTAwMHB4O2ZvbnQtd2VpZ2h0OmJvbGQ7YmFja2dyb3VuZDojMmJhNmNiO3BhZGRpbmc6MC4xODc1ZW0gMC41NjI1ZW07Y3Vyc29yOmRlZmF1bHQ7Y29sb3I6I2ZmZn1AbWVkaWEgb25seSBzY3JlZW57ZGl2LnN3aXRjaHtwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDoxMDAlO3BhZGRpbmc6MDtkaXNwbGF5OmJsb2NrO292ZXJmbG93OmhpZGRlbjtib3JkZXItc3R5bGU6c29saWQ7Ym9yZGVyLXdpZHRoOjFweDttYXJnaW4tYm90dG9tOjEuMjVlbTstd2Via2l0LWFuaW1hdGlvbjp3ZWJraXRTaWJsaW5nQnVnZml4IGluZmluaXRlIDFzO2hlaWdodDozNnB4O2JhY2tncm91bmQ6I2ZmZjtib3JkZXItY29sb3I6I2NjY31kaXYuc3dpdGNoIGxhYmVse3Bvc2l0aW9uOnJlbGF0aXZlO2xlZnQ6MDt6LWluZGV4OjI7ZmxvYXQ6bGVmdDt3aWR0aDo1MCU7aGVpZ2h0OjEwMCU7bWFyZ2luOjA7Zm9udC13ZWlnaHQ6Ym9sZDt0ZXh0LWFsaWduOmxlZnQ7LXdlYmtpdC10cmFuc2l0aW9uOmFsbCAwLjFzIGVhc2Utb3V0Oy1tb3otdHJhbnNpdGlvbjphbGwgMC4xcyBlYXNlLW91dDt0cmFuc2l0aW9uOmFsbCAwLjFzIGVhc2Utb3V0fWRpdi5zd2l0Y2ggaW5wdXR7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDozO29wYWNpdHk6MDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlfWRpdi5zd2l0Y2ggaW5wdXQ6aG92ZXIsZGl2LnN3aXRjaCBpbnB1dDpmb2N1c3tjdXJzb3I6cG9pbnRlcn1kaXYuc3dpdGNoPnNwYW57cG9zaXRpb246YWJzb2x1dGU7dG9wOi0xcHg7bGVmdDotMXB4O3otaW5kZXg6MTtkaXNwbGF5OmJsb2NrO3BhZGRpbmc6MDtib3JkZXItd2lkdGg6MXB4O2JvcmRlci1zdHlsZTpzb2xpZDstd2Via2l0LXRyYW5zaXRpb246YWxsIDAuMXMgZWFzZS1vdXQ7LW1vei10cmFuc2l0aW9uOmFsbCAwLjFzIGVhc2Utb3V0O3RyYW5zaXRpb246YWxsIDAuMXMgZWFzZS1vdXR9ZGl2LnN3aXRjaCBpbnB1dDpub3QoOmNoZWNrZWQpK2xhYmVse29wYWNpdHk6MH1kaXYuc3dpdGNoIGlucHV0OmNoZWNrZWR7ZGlzcGxheTpub25lICFpbXBvcnRhbnR9ZGl2LnN3aXRjaCBpbnB1dHtsZWZ0OjA7ZGlzcGxheTpibG9jayAhaW1wb3J0YW50fWRpdi5zd2l0Y2ggaW5wdXQ6Zmlyc3Qtb2YtdHlwZStsYWJlbCxkaXYuc3dpdGNoIGlucHV0OmZpcnN0LW9mLXR5cGUrc3BhbitsYWJlbHtsZWZ0Oi01MCV9ZGl2LnN3aXRjaCBpbnB1dDpmaXJzdC1vZi10eXBlOmNoZWNrZWQrbGFiZWwsZGl2LnN3aXRjaCBpbnB1dDpmaXJzdC1vZi10eXBlOmNoZWNrZWQrc3BhbitsYWJlbHtsZWZ0OjAlfWRpdi5zd2l0Y2ggaW5wdXQ6bGFzdC1vZi10eXBlK2xhYmVsLGRpdi5zd2l0Y2ggaW5wdXQ6bGFzdC1vZi10eXBlK3NwYW4rbGFiZWx7cmlnaHQ6LTUwJTtsZWZ0OmF1dG87dGV4dC1hbGlnbjpyaWdodH1kaXYuc3dpdGNoIGlucHV0Omxhc3Qtb2YtdHlwZTpjaGVja2VkK2xhYmVsLGRpdi5zd2l0Y2ggaW5wdXQ6bGFzdC1vZi10eXBlOmNoZWNrZWQrc3BhbitsYWJlbHtyaWdodDowJTtsZWZ0OmF1dG99ZGl2LnN3aXRjaCBzcGFuLmN1c3RvbXtkaXNwbGF5Om5vbmUgIWltcG9ydGFudH1kaXYuc3dpdGNoIGxhYmVse3BhZGRpbmc6MCAwLjM3NWVtO2xpbmUtaGVpZ2h0OjIuM2VtO2ZvbnQtc2l6ZTowLjg3NWVtfWRpdi5zd2l0Y2ggaW5wdXQ6Zmlyc3Qtb2YtdHlwZTpjaGVja2VkIH4gc3BhbntsZWZ0OjEwMCU7bWFyZ2luLWxlZnQ6LTIuMTg3NWVtfWRpdi5zd2l0Y2g+c3Bhbnt3aWR0aDoyLjI1ZW07aGVpZ2h0OjIuMjVlbX1kaXYuc3dpdGNoPnNwYW57Ym9yZGVyLWNvbG9yOiNiM2IzYjM7YmFja2dyb3VuZDojZmZmO2JhY2tncm91bmQ6LW1vei1saW5lYXItZ3JhZGllbnQodG9wLCAjZmZmIDAlLCAjZjJmMmYyIDEwMCUpO2JhY2tncm91bmQ6LXdlYmtpdC1saW5lYXItZ3JhZGllbnQodG9wLCAjZmZmIDAlLCAjZjJmMmYyIDEwMCUpO2JhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSwgI2ZmZiAwJSwgI2YyZjJmMiAxMDAlKTstd2Via2l0LWJveC1zaGFkb3c6MnB4IDAgMTBweCAwIHJnYmEoMCwwLDAsMC4wNyksMTAwMHB4IDAgMCAxMDAwcHggI2UxZjVkMSwtMnB4IDAgMTBweCAwIHJnYmEoMCwwLDAsMC4wNyksLTEwMDBweCAwIDAgMTAwMHB4ICNmNWY1ZjU7Ym94LXNoYWRvdzoycHggMCAxMHB4IDAgcmdiYSgwLDAsMCwwLjA3KSwxMDAwcHggMCAwIDk4MHB4ICNlMWY1ZDEsLTJweCAwIDEwcHggMCByZ2JhKDAsMCwwLDAuMDcpLC0xMDAwcHggMCAwIDEwMDBweCAjZjVmNWY1fWRpdi5zd2l0Y2g6aG92ZXI+c3BhbixkaXYuc3dpdGNoOmZvY3VzPnNwYW57YmFja2dyb3VuZDojZmZmO2JhY2tncm91bmQ6LW1vei1saW5lYXItZ3JhZGllbnQodG9wLCAjZmZmIDAlLCAjZTZlNmU2IDEwMCUpO2JhY2tncm91bmQ6LXdlYmtpdC1saW5lYXItZ3JhZGllbnQodG9wLCAjZmZmIDAlLCAjZTZlNmU2IDEwMCUpO2JhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSwgI2ZmZiAwJSwgI2U2ZTZlNiAxMDAlKX1kaXYuc3dpdGNoOmFjdGl2ZXtiYWNrZ3JvdW5kOnRyYW5zcGFyZW50fWRpdi5zd2l0Y2gubGFyZ2V7aGVpZ2h0OjQ0cHh9ZGl2LnN3aXRjaC5sYXJnZSBsYWJlbHtwYWRkaW5nOjAgMC4zNzVlbTtsaW5lLWhlaWdodDoyLjNlbTtmb250LXNpemU6MS4wNjI1ZW19ZGl2LnN3aXRjaC5sYXJnZSBpbnB1dDpmaXJzdC1vZi10eXBlOmNoZWNrZWQgfiBzcGFue2xlZnQ6MTAwJTttYXJnaW4tbGVmdDotMi42ODc1ZW19ZGl2LnN3aXRjaC5sYXJnZT5zcGFue3dpZHRoOjIuNzVlbTtoZWlnaHQ6Mi43NWVtfWRpdi5zd2l0Y2guc21hbGx7aGVpZ2h0OjI4cHh9ZGl2LnN3aXRjaC5zbWFsbCBsYWJlbHtwYWRkaW5nOjAgMC4zNzVlbTtsaW5lLWhlaWdodDoyLjFlbTtmb250LXNpemU6MC43NWVtfWRpdi5zd2l0Y2guc21hbGwgaW5wdXQ6Zmlyc3Qtb2YtdHlwZTpjaGVja2VkIH4gc3BhbntsZWZ0OjEwMCU7bWFyZ2luLWxlZnQ6LTEuNjg3NWVtfWRpdi5zd2l0Y2guc21hbGw+c3Bhbnt3aWR0aDoxLjc1ZW07aGVpZ2h0OjEuNzVlbX1kaXYuc3dpdGNoLnRpbnl7aGVpZ2h0OjIycHh9ZGl2LnN3aXRjaC50aW55IGxhYmVse3BhZGRpbmc6MCAwLjM3NWVtO2xpbmUtaGVpZ2h0OjEuOWVtO2ZvbnQtc2l6ZTowLjY4NzVlbX1kaXYuc3dpdGNoLnRpbnkgaW5wdXQ6Zmlyc3Qtb2YtdHlwZTpjaGVja2VkIH4gc3BhbntsZWZ0OjEwMCU7bWFyZ2luLWxlZnQ6LTEuMzEyNWVtfWRpdi5zd2l0Y2gudGlueT5zcGFue3dpZHRoOjEuMzc1ZW07aGVpZ2h0OjEuMzc1ZW19ZGl2LnN3aXRjaC5yYWRpdXN7LXdlYmtpdC1ib3JkZXItcmFkaXVzOjRweDtib3JkZXItcmFkaXVzOjRweH1kaXYuc3dpdGNoLnJhZGl1cz5zcGFuey13ZWJraXQtYm9yZGVyLXJhZGl1czozcHg7Ym9yZGVyLXJhZGl1czozcHh9ZGl2LnN3aXRjaC5yb3VuZHstd2Via2l0LWJvcmRlci1yYWRpdXM6MTAwMHB4O2JvcmRlci1yYWRpdXM6MTAwMHB4fWRpdi5zd2l0Y2gucm91bmQ+c3Bhbnstd2Via2l0LWJvcmRlci1yYWRpdXM6OTk5cHg7Ym9yZGVyLXJhZGl1czo5OTlweH1kaXYuc3dpdGNoLnJvdW5kIGxhYmVse3BhZGRpbmc6MCAwLjU2MjVlbX1ALXdlYmtpdC1rZXlmcmFtZXMgd2Via2l0U2libGluZ0J1Z2ZpeHtmcm9te3Bvc2l0aW9uOnJlbGF0aXZlfXRve3Bvc2l0aW9uOnJlbGF0aXZlfX19W2RhdGEtbWFnZWxsYW4tZXhwZWRpdGlvbl17YmFja2dyb3VuZDojZmZmO3otaW5kZXg6NTA7bWluLXdpZHRoOjEwMCU7cGFkZGluZzoxMHB4fVtkYXRhLW1hZ2VsbGFuLWV4cGVkaXRpb25dIC5zdWItbmF2e21hcmdpbi1ib3R0b206MH1bZGF0YS1tYWdlbGxhbi1leHBlZGl0aW9uXSAuc3ViLW5hdiBkZHttYXJnaW4tYm90dG9tOjB9dGFibGV7YmFja2dyb3VuZDojZmZmO21hcmdpbi1ib3R0b206MS4yNWVtO2JvcmRlcjpzb2xpZCAxcHggI2RkZH10YWJsZSB0aGVhZCx0YWJsZSB0Zm9vdHtiYWNrZ3JvdW5kOiNmNWY1ZjU7Zm9udC13ZWlnaHQ6Ym9sZH10YWJsZSB0aGVhZCB0ciB0aCx0YWJsZSB0aGVhZCB0ciB0ZCx0YWJsZSB0Zm9vdCB0ciB0aCx0YWJsZSB0Zm9vdCB0ciB0ZHtwYWRkaW5nOjAuNWVtIDAuNjI1ZW0gMC42MjVlbTtmb250LXNpemU6MC44NzVlbTtjb2xvcjojMjIyO3RleHQtYWxpZ246bGVmdH10YWJsZSB0ciB0aCx0YWJsZSB0ciB0ZHtwYWRkaW5nOjAuNTYyNWVtIDAuNjI1ZW07Zm9udC1zaXplOjAuODc1ZW07Y29sb3I6IzIyMn10YWJsZSB0ci5ldmVuLHRhYmxlIHRyLmFsdCx0YWJsZSB0cjpudGgtb2YtdHlwZShldmVuKXtiYWNrZ3JvdW5kOiNmOWY5Zjl9dGFibGUgdGhlYWQgdHIgdGgsdGFibGUgdGZvb3QgdHIgdGgsdGFibGUgdGJvZHkgdHIgdGQsdGFibGUgdHIgdGQsdGFibGUgdGZvb3QgdHIgdGR7ZGlzcGxheTp0YWJsZS1jZWxsO2xpbmUtaGVpZ2h0OjEuMTI1ZW19LnRoe2Rpc3BsYXk6aW5saW5lLWJsb2NrO2JvcmRlcjpzb2xpZCA0cHggI2ZmZjstd2Via2l0LWJveC1zaGFkb3c6MCAwIDAgMXB4IHJnYmEoMCwwLDAsMC4yKTtib3gtc2hhZG93OjAgMCAwIDFweCByZ2JhKDAsMCwwLDAuMik7LXdlYmtpdC10cmFuc2l0aW9uOmFsbCAyMDBtcyBlYXNlLW91dDstbW96LXRyYW5zaXRpb246YWxsIDIwMG1zIGVhc2Utb3V0O3RyYW5zaXRpb246YWxsIDIwMG1zIGVhc2Utb3V0fS50aDpob3ZlciwudGg6Zm9jdXN7LXdlYmtpdC1ib3gtc2hhZG93OjAgMCA2cHggMXB4IHJnYmEoNDMsMTY2LDIwMywwLjUpO2JveC1zaGFkb3c6MCAwIDZweCAxcHggcmdiYSg0MywxNjYsMjAzLDAuNSl9LnRoLnJhZGl1c3std2Via2l0LWJvcmRlci1yYWRpdXM6M3B4O2JvcmRlci1yYWRpdXM6M3B4fS5oYXMtdGlwe2JvcmRlci1ib3R0b206ZG90dGVkIDFweCAjY2NjO2N1cnNvcjpoZWxwO2ZvbnQtd2VpZ2h0OmJvbGQ7Y29sb3I6IzMzM30uaGFzLXRpcDpob3ZlciwuaGFzLXRpcDpmb2N1c3tib3JkZXItYm90dG9tOmRvdHRlZCAxcHggIzE5NjE3Nztjb2xvcjojMmJhNmNifS5oYXMtdGlwLnRpcC1sZWZ0LC5oYXMtdGlwLnRpcC1yaWdodHtmbG9hdDpub25lICFpbXBvcnRhbnR9LnRvb2x0aXB7ZGlzcGxheTpub25lO3Bvc2l0aW9uOmFic29sdXRlO3otaW5kZXg6OTk5O2ZvbnQtd2VpZ2h0OmJvbGQ7Zm9udC1zaXplOjAuOTM3NWVtO2xpbmUtaGVpZ2h0OjEuMztwYWRkaW5nOjAuNWVtO21heC13aWR0aDo4NSU7bGVmdDo1MCU7d2lkdGg6MTAwJTtjb2xvcjojZmZmO2JhY2tncm91bmQ6IzAwMDstd2Via2l0LWJvcmRlci1yYWRpdXM6M3B4O2JvcmRlci1yYWRpdXM6M3B4fS50b29sdGlwPi5udWJ7ZGlzcGxheTpibG9jaztsZWZ0OjVweDtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDowO2hlaWdodDowO2JvcmRlcjpzb2xpZCA1cHg7Ym9yZGVyLWNvbG9yOnRyYW5zcGFyZW50IHRyYW5zcGFyZW50ICMwMDAgdHJhbnNwYXJlbnQ7dG9wOi0xMHB4fS50b29sdGlwLm9wZW5lZHtjb2xvcjojMmJhNmNiICFpbXBvcnRhbnQ7Ym9yZGVyLWJvdHRvbTpkb3R0ZWQgMXB4ICMxOTYxNzcgIWltcG9ydGFudH0udGFwLXRvLWNsb3Nle2Rpc3BsYXk6YmxvY2s7Zm9udC1zaXplOjAuNjI1ZW07Y29sb3I6Izg4ODtmb250LXdlaWdodDpub3JtYWx9QG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA0OGVtKXsudG9vbHRpcD4ubnVie2JvcmRlci1jb2xvcjp0cmFuc3BhcmVudCB0cmFuc3BhcmVudCAjMDAwIHRyYW5zcGFyZW50O3RvcDotMTBweH0udG9vbHRpcC50aXAtdG9wPi5udWJ7Ym9yZGVyLWNvbG9yOiMwMDAgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQ7dG9wOmF1dG87Ym90dG9tOi0xMHB4fS50b29sdGlwLnRpcC1sZWZ0LC50b29sdGlwLnRpcC1yaWdodHtmbG9hdDpub25lICFpbXBvcnRhbnR9LnRvb2x0aXAudGlwLWxlZnQ+Lm51Yntib3JkZXItY29sb3I6dHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgIzAwMDtyaWdodDotMTBweDtsZWZ0OmF1dG87dG9wOjUwJTttYXJnaW4tdG9wOi01cHh9LnRvb2x0aXAudGlwLXJpZ2h0Pi5udWJ7Ym9yZGVyLWNvbG9yOnRyYW5zcGFyZW50ICMwMDAgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQ7cmlnaHQ6YXV0bztsZWZ0Oi0xMHB4O3RvcDo1MCU7bWFyZ2luLXRvcDotNXB4fX1AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2N3B4KXsuZi1kcm9wZG93bnttYXgtd2lkdGg6MTAwJTtsZWZ0OjB9fS5mLWRyb3Bkb3due3Bvc2l0aW9uOmFic29sdXRlO3RvcDotOTk5OXB4O2xpc3Qtc3R5bGU6bm9uZTtwYWRkaW5nOjEuMjVlbTt3aWR0aDoxMDAlO2hlaWdodDphdXRvO21heC1oZWlnaHQ6bm9uZTtiYWNrZ3JvdW5kOiNmZmY7Ym9yZGVyOnNvbGlkIDFweCAjY2NjO2ZvbnQtc2l6ZToxNnB4O3otaW5kZXg6OTk7bWFyZ2luLXRvcDoycHg7bWF4LXdpZHRoOjIwMHB4fS5mLWRyb3Bkb3duICo6Zmlyc3QtY2hpbGR7bWFyZ2luLXRvcDowfS5mLWRyb3Bkb3duICo6bGFzdC1jaGlsZHttYXJnaW4tYm90dG9tOjB9LmYtZHJvcGRvd246YmVmb3Jle2NvbnRlbnQ6IiI7ZGlzcGxheTpibG9jazt3aWR0aDowO2hlaWdodDowO2JvcmRlcjpzb2xpZCA2cHg7Ym9yZGVyLWNvbG9yOnRyYW5zcGFyZW50IHRyYW5zcGFyZW50ICNmZmYgdHJhbnNwYXJlbnQ7cG9zaXRpb246YWJzb2x1dGU7dG9wOi0xMnB4O2xlZnQ6MTBweDt6LWluZGV4Ojk5fS5mLWRyb3Bkb3duOmFmdGVye2NvbnRlbnQ6IiI7ZGlzcGxheTpibG9jazt3aWR0aDowO2hlaWdodDowO2JvcmRlcjpzb2xpZCA3cHg7Ym9yZGVyLWNvbG9yOnRyYW5zcGFyZW50IHRyYW5zcGFyZW50ICNjY2MgdHJhbnNwYXJlbnQ7cG9zaXRpb246YWJzb2x1dGU7dG9wOi0xNHB4O2xlZnQ6OXB4O3otaW5kZXg6OTh9LmYtZHJvcGRvd24ucmlnaHQ6YmVmb3Jle2xlZnQ6YXV0bztyaWdodDoxMHB4fS5mLWRyb3Bkb3duLnJpZ2h0OmFmdGVye2xlZnQ6YXV0bztyaWdodDo5cHh9LmYtZHJvcGRvd24gbGl7Zm9udC1zaXplOjAuODc1ZW07Y3Vyc29yOnBvaW50ZXI7cGFkZGluZzowLjMxMjVlbSAwLjYyNWVtO2xpbmUtaGVpZ2h0OjEuMTI1ZW07bWFyZ2luOjB9LmYtZHJvcGRvd24gbGk6aG92ZXIsLmYtZHJvcGRvd24gbGk6Zm9jdXN7YmFja2dyb3VuZDojZWVlfS5mLWRyb3Bkb3duIGxpIGF7Y29sb3I6IzU1NX0uZi1kcm9wZG93bi5jb250ZW50e3Bvc2l0aW9uOmFic29sdXRlO3RvcDotOTk5OXB4O2xpc3Qtc3R5bGU6bm9uZTtwYWRkaW5nOjEuMjVlbTt3aWR0aDoxMDAlO2hlaWdodDphdXRvO21heC1oZWlnaHQ6bm9uZTtiYWNrZ3JvdW5kOiNmZmY7Ym9yZGVyOnNvbGlkIDFweCAjY2NjO2ZvbnQtc2l6ZToxNnB4O3otaW5kZXg6OTk7bWF4LXdpZHRoOjIwMHB4fS5mLWRyb3Bkb3duLmNvbnRlbnQgKjpmaXJzdC1jaGlsZHttYXJnaW4tdG9wOjB9LmYtZHJvcGRvd24uY29udGVudCAqOmxhc3QtY2hpbGR7bWFyZ2luLWJvdHRvbTowfS5mLWRyb3Bkb3duLnRpbnl7bWF4LXdpZHRoOjIwMHB4fS5mLWRyb3Bkb3duLnNtYWxse21heC13aWR0aDozMDBweH0uZi1kcm9wZG93bi5tZWRpdW17bWF4LXdpZHRoOjUwMHB4fS5mLWRyb3Bkb3duLmxhcmdle21heC13aWR0aDo4MDBweH0K";
$files["public/css"]["normalize.css"] = "";
$files["public/css"]["reset.css"] = "LyoKKiBUaGUgcHVycG9zZSBvZiB0aGlzIENTUyByZXNldCBmaWxlIGlzIHRvIGEgcHJvdmlkZSBhIHNhbmUgc3RhcnRpbmcgcGxhY2UgZm9yIHN0eWxlc2hlZXQgZGV2ZWxvcG1lbnQgYnkKKiBub3JtYWxpemluZyBicm93c2VyIGRpZmZlcmVuY2VzLCBlbGltaW5hdGluZyBtYXJnaW4gYW5kIHBhZGRpbmcsIGFuZCBwcm92aWRpbmcgYSBjbGVhci1maXguCiovCmh0bWwsIGJvZHkge3RleHQtYWxpZ246bGVmdDtmb250LXNpemU6IDFlbTt9Cmh0bWwsYm9keSxpbWcsZm9ybSx0ZXh0YXJlYSxpbnB1dCxmaWVsZHNldCxkaXYscCxkaXYsdWwsbGksb2wsZGwsZHQsZGQsaDEsaDIsaDMsaDQsaDUsaDYscHJlLGNvZGUgeyBtYXJnaW46IDA7cGFkZGluZzogMDt9CnVsLGxpIHtsaXN0LXN0eWxlOiBub25lO30KaW1nIHtkaXNwbGF5OiBibG9jazt9CmEgaW1ne2JvcmRlcjpub25lO30KYSB7dGV4dC1kZWNvcmF0aW9uOm5vbmU7Zm9udC13ZWlnaHQ6IG5vcm1hbDtmb250LWZhbWlseTogaW5oZXJpdDt9Cio6YWN0aXZlLCo6Zm9jdXMgeyAgLyogQ2xlYXIgbW96aWxsYS9pZSBkb3R0ZWQgbGluZSBhcm91bmQgYWN0aXZlIGxpbmtzICovCiAgICBvdXRsaW5lOiBub25lOwogICAgLW1vei1vdXRsaW5lLXN0eWxlOiBub25lOwogfQpoMSxoMixoMyxoNCxoNSxoNixoNyB7Zm9udC13ZWlnaHQ6IG5vcm1hbDsgZm9udC1zaXplOjFlbTt9IC8qIEZpeCBoZWFkaW5nIGZvbnQgc3R5bGVzIGFuZCBzaXplICovCmRpdi5jbGVhciB7Y2xlYXI6Ym90aDt9";
$files["view/home"]["index.php"] = "PHA+RXhhbXBsZSB2aWV3PC9wPg==";
?>
<?php
/**
 * @author Nate Good <me@nategood.com>
 */

class Command implements \ArrayAccess, \Iterator
{
    const OPTION_TYPE_ARGUMENT  = 1; // e.g. foo
    const OPTION_TYPE_SHORT     = 2; // e.g. -u
    const OPTION_TYPE_VERBOSE   = 4; // e.g. --username

    private
        $current_option             = null,
        $name                       = null,
        $options                    = array(),
        $arguments                  = array(),
        $flags                      = array(),
        $nameless_option_counter    = 0,
        $tokens                     = array(),
        $help                       = null,
        $parsed                     = false,
        $use_default_help           = true,
        $trap_errors                = true,
        $beep_on_error              = true,
        $position                   = 0,
        $sorted_keys                = array();

    /**
     * @var array Valid "option" options, mapped to their aliases
     */
    public static $methods = array(

        'option' => 'option',
        'o' => 'option',

        'flag' => 'flag',
        'argument' => 'argument',

        'boolean' => 'boolean',
        'bool' => 'boolean',
        'b' => 'boolean',
        // mustBeBoolean

        'require' => 'require',
        'required' => 'require',
        'r' => 'require',

        'alias' => 'alias',
        'aka' => 'alias',
        'a' => 'alias',

        'title' => 'title',
        'referToAs' => 'title',
        'referredToAs' => 'title',

        'describe' => 'describe',
        'd' => 'describe',
        'describeAs' => 'describe',
        'description' => 'describe',
        'describedAs' => 'describe',

        'map' => 'map',
        'mapTo' => 'map',
        'cast' => 'map',
        'castWith' => 'map',

        'must' => 'must',
        // mustBeNumeric
        // mustBeInt
        // mustBeFloat

        'file' => 'file',
        'expectsFile' => 'file',
        // 'expectsFileGlob' => 'file',
        // 'mustBeAFile' => 'file',
    );

    public function __construct($tokens = null)
    {
        if (empty($tokens)) {
            $tokens = $_SERVER['argv'];
        }

        $this->setTokens($tokens);
    }

    public function __destruct()
    {
        if (!$this->parsed) {
            $this->parse();
        }
    }

    /**
     * Factory style reads a little nicer
     * @param array $tokens defaults to $argv
     * @return Commando
     */
    public static function define($tokens = null)
    {
        return new Command($tokens);
    }

    /**
     * This is the meat of Command.  Any time we are operating on
     * an individual option for command (e.g. $cmd->option()->require()...)
     * it relies on this magic method.  It allows us to handle some logic
     * that is applicable across the board and also allows easy aliasing of
     * methods (e.g. "o" for "option")... since it is a CLI library, such
     * minified aliases would only be fitting :-).
     *
     * @param string $name
     * @param array $arguments
     * @return Command
     */
    public function __call($name, $arguments)
    {
        if (empty(self::$methods[$name])) {
            throw new \Exception(sprintf('Unknown function, %s, called', $name));
        }

        // use the fully quantified name, e.g. "option" when "o"
        $name = self::$methods[$name];

        // set the option we'll be acting on
        if (empty($this->current_option) && $name !== 'option' &&
                $name !== 'flag' && $name !== 'argument') {
            throw new \Exception(sprintf('Invalid Option Chain: Attempting to call %s before an "option" declaration', $name));
        }

        array_unshift($arguments, $this->current_option);
        $option = call_user_func_array(array($this, "_$name"), $arguments);

        return $this;
    }

    /**
     * @param Option|null $option
     * @param string|int name
     * @return Option
     */
    private function _option($option, $name = null)
    {
        // Is this a previously declared option?
        if (isset($name) && !empty($this->options[$name])) {
            $this->current_option = $this->getOption($name);
        } else {
            if (!isset($name)) {
                $name = $this->nameless_option_counter++;
            }
            $this->current_option = $this->options[$name] = new Option($name);
        }

        return $this->current_option;
    }

    /**
     * @param Option|null $option
     * @param string name
     * @return Option
     *
     * Like _option but only for named flags
     */
    private function _flag($option, $name)
    {
        if (isset($name) && is_numeric($name))
            throw new \Exception('Attempted to reference flag with a numeric index');
        return $this->_option($option, $name);
    }

    /**
     * @param Option|null $option
     * @param int $index [optional] only used when referencing an existing option
     * @return Option
     *
     * Like _option but only for annonymous arguments
     */
    private function _argument($option, $index = null)
    {
        if (isset($index) && !is_numeric($index))
            throw new \Exception('Attempted to reference argument with a string name');
        return $this->_option($option, $index);
    }

    /**
     * @param Option $option
     * @return Option
     */
    private function _boolean(Option $option, $boolean = true)
    {
        return $option->setBoolean($boolean);
    }

    /**
     * @param Option $option
     * @return Option
     */
    private function _require(Option $option, $require = true)
    {
        return $option->setRequired($require);
    }

    /**
     * @param Option $option
     * @param string $alias
     * @return Option
     */
    private function _alias(Option $option, $alias)
    {
        $this->options[$alias] = $this->current_option;
        return $option->addAlias($alias);
    }

    /**
     * @param Option $option
     * @param string $description
     * @return Option
     */
    private function _describe(Option $option, $description)
    {
        return $option->setDescription($description);
    }

    /**
     * @param Option $option
     * @param string $title
     * @return Option
     */
    private function _title(Option $option, $title)
    {
        return $option->setTitle($title);
    }

    /**
     * @param Option $option
     * @param \Closure $callback (string $value) -> boolean
     * @return Option
     */
    private function _must(Option $option, \Closure $callback)
    {
        return $option->setRule($callback);
    }

    /**
     * @param Option $option
     * @param \Closure $callback
     * @return Option
     */
    private function _map(Option $option, \Closure $callback)
    {
        return $option->setMap($callback);
    }

    private function _file(Option $option, $require_exists = true, $allow_globbing = false)
    {
        return $option->setFileRequirements($require_exists, $allow_globbing);
    }


    public function useDefaultHelp($help = true)
    {
        $this->use_default_help = $help;
    }

    /**
     * Rare that you would need to use this other than for testing,
     * allows defining the cli tokens, instead of using $argv
     * @param array $cli_tokens
     * @return Command
     */
    public function setTokens(array $cli_tokens)
    {
        // todo also slice on "=" or other delimiters
        $this->tokens = $cli_tokens;
        return $this;
    }

    /**
     * @throws \Exception
     */
    private function parseIfNotParsed()
    {
        if ($this->isParsed()) {
            return;
        }
        $this->parse();
    }

    /**
     * @throws \Exception
     */
    public function parse()
    {
        try {
            $tokens = $this->tokens;
            // the executed filename
            $this->name = array_shift($tokens);

            $keyvals = array();
            $count = 0; // standalone argument count

            while (!empty($tokens)) {
                $token = array_shift($tokens);

                list($name, $type) = $this->_parseOption($token);

                if ($type === self::OPTION_TYPE_ARGUMENT) {
                    // its an argument, use an int as the index
                    $keyvals[$count] = $name;

                    // We allow for "dynamic" annonymous arguments, so we
                    // add an option for any annonymous arguments that
                    // weren't predefined
                    if (!$this->hasOption($count)) {
                        $this->options[$count] = new Option($count);
                    }

                    $count++;
                } else {
                    // Short circuit if the help flag was set and we're using default help
                    if ($this->use_default_help === true && $name === 'help') {
                        $this->printHelp();
                        exit;
                    }

                    $option = $this->getOption($name);
                    if ($option->isBoolean()) {
                        $keyvals[$name] = true;
                    } else {
                        // the next token MUST be an "argument" and not another flag/option
                        $token = array_shift($tokens);
                        list($val, $type) = $this->_parseOption($token);
                        if ($type !== self::OPTION_TYPE_ARGUMENT)
                            throw new \Exception(sprintf('Unable to parse option %s: Expected an argument', $token));
                        $keyvals[$name] = $val;
                    }
                }
            }

            // Set values (validates and performs map when applicable)
            foreach ($keyvals as $key => $value) {
                $this->getOption($key)->setValue($value);
            }

            // todo protect against duplicates caused by aliases
            foreach ($this->options as $option) {
                if (is_null($option->getValue()) && $option->isRequired()) {
                    throw new \Exception(sprintf('Required %s %s must be specified',
                        $option->getType() & Option::TYPE_NAMED ?
                            'option' : 'argument', $option->getName()));
                }
            }

            // keep track of our argument vs. flag keys
            // done here to allow for flags/arguments added
            // at run time.  okay because option values are
            // not mutable after parsing.
            foreach($this->options as $k => $v) {
                if (is_numeric($k)) {
                    $this->arguments[$k] = $v;
                } else {
                    $this->flags[$k] = $v;
                }
            }

            // Used in the \Iterator implementation
            $this->sorted_keys = array_keys($this->options);
            natsort($this->sorted_keys);

            $this->parsed = true;

        } catch(\Exception $e) {
            $this->error($e);
        }
    }

    public function error(\Exception $e)
    {
        if ($this->beep_on_error === true) {
            Terminal::beep();
        }

        if ($this->trap_errors !== true) {
            throw $e;
        }

        $color = new \Colors\Color();
        $error = sprintf('ERROR: %s ', $e->getMessage());
        echo $color($error)->bg('red')->bold()->white() . PHP_EOL;
        exit(1);
    }

    /**
     * Has this Command instance parsed its arguments?
     * @return bool
     */
    public function isParsed()
    {
        return $this->parsed;
    }

    /**
     * @param string $token
     * @return array [option name/value, OPTION_TYPE_*]
     */
    private function _parseOption($token)
    {
        $matches = array();

        if (substr($token, 0, 1) === '-' && !preg_match('/(?P<hyphen>\-{1,2})(?P<name>[a-z][a-z0-9_]*)/i', $token, $matches)) {
            throw new \Exception(sprintf('Unable to parse option %s: Invalid syntax', $token));
        }

        if (!empty($matches['hyphen'])) {
            $type = (strlen($matches['hyphen']) === 1) ?
                self::OPTION_TYPE_SHORT:
                self::OPTION_TYPE_VERBOSE;
            return array($matches['name'], $type);
        }

        return array($token, self::OPTION_TYPE_ARGUMENT);
    }


    /**
     * @param string $option
     * @return Option
     * @throws \Exception if $option does not exist
     */
    public function getOption($option)
    {
        if (!$this->hasOption($option)) {
            throw new \Exception(sprintf('Unknown option, %s, specified', $option));
        }

        return $this->options[$option];
    }

    /**
     * @return array of argument `Option` only
     */
    public function getArguments()
    {
        $this->parseIfNotParsed();
        return $this->arguments;
    }

    /**
     * @return array of flag `Option` only
     */
    public function getFlags()
    {
        $this->parseIfNotParsed();
        return $this->flags;
    }

    /**
     * @return array of argument values only
     *
     * If your command was `php filename -f flagvalue argument1 argument2`
     * `getArguments` would return array("argument1", "argument2");
     */
    public function getArgumentValues()
    {
        $this->parseIfNotParsed();
        return array_map(function(Option $argument) {
            return $argument->getValue();
        }, $this->arguments);
    }

    /**
     * @return array of flag values only
     *
     * If your command was `php filename -f flagvalue argument1 argument2`
     * `getFlags` would return array("-f" => "flagvalue");
     */
    public function getFlagValues()
    {
        $this->parseIfNotParsed();
        return array_map(function(Option $flag) {
            return $flag->getValue();
        }, $this->dedupeFlags());
    }

    /**
     * @return array of deduped flag Options.  Needed because of
     *    how the flags are mapped internally to make alias lookup
     *    simpler/faster.
     */
    private function dedupeFlags()
    {
        $seen = array();
        foreach ($this->flags as $flag) {
            if (empty($flags[$flag->getName()])) {
                $seen[$flag->getName()] = $flag;
            }
        }
        return $seen;
    }

    /**
     * @param string $option name (named option) or index (annonymous option)
     * @return boolean
     */
    public function hasOption($option)
    {
        return !empty($this->options[$option]);
    }

    /**
     * @return string dump values
     */
    public function __toString()
    {
        // todo return values of set options as map of option name => value
        return $this->getHelp();
    }

    /**
     * @return int
     */
    public function getSize()
    {
        return count($this->options);
    }

    /**
     * @param string $help
     * @return Command
     */
    public function setHelp($help)
    {
        $this->help = $help;
        return $this;
    }

    /**
     * @param bool $trap when true, exceptions will be caught by Commando and
     *    printed cleanly to standard error.
     * @return Command
     */
    public function trapErrors($trap = true)
    {
        $this->trap_errors = $trap;
        return $this;
    }

    /**
     * @return Command
     */
    public function doNotTrapErrors()
    {
        return $this->trapErrors(false);
    }

    /**
     * Terminal beep on error
     * @param bool $beep
     * @return Command
     */
    public function beepOnError($beep = true)
    {
        $this->beep_on_error = $beep;
        return $this;
    }

    /**
     * @return string help docs
     */
    public function getHelp()
    {
        $this->attachHelp();

        if (empty($this->name) && isset($this->tokens[0])) {
            $this->name = $this->tokens[0];
        }

        $color = new \Colors\Color();

        $help = '';

        $help .= $color(Terminal::header(' ' . $this->name))
            ->white()->bg('green')->bold() . PHP_EOL;

        if (!empty($this->help)) {
            $help .= PHP_EOL . Terminal::wrap($this->help)
                . PHP_EOL;
        }

        $help .= PHP_EOL;

        $seen = array();
        $keys = array_keys($this->options);
        natsort($keys);
        foreach ($keys as $key) {
            $option = $this->getOption($key);
            if (in_array($option, $seen)) {
                continue;
            }
            $help .= $option->getHelp() . PHP_EOL;
            $seen[] = $option;
        }

        return $help;
    }

    public function printHelp()
    {
        echo $this->getHelp();
    }

    private function attachHelp()
    {
        // Add in a default help method
        $this->option('help')
            ->describe('Show the help page for this command.')
            ->boolean();
    }

    /**
     * @param string $offset
     * @see \ArrayAccess
     */
    public function offsetExists($offset)
    {
        return isset($this->options[$offset]);
    }

    /**
     * @param string $offset
     * @see \ArrayAccess
     */
    public function offsetGet($offset)
    {
        // Support implicit/lazy parsing
        $this->parseIfNotParsed();
        if (!isset($this->options[$offset])) {
            return null; // follows normal php convention
        }
        return $this->options[$offset]->getValue();
    }

    /**
     * @param string $offset
     * @param string $value
     * @throws \Exception
     * @see \ArrayAccess
     */
    public function offsetSet($offset, $value)
    {
        throw new \Exception('Setting an option value via array syntax is not permitted');
    }

    /**
     * @param string $offset
     * @see \ArrayAccess
     */
    public function offsetUnset($offset)
    {
        $this->options[$offset]->setValue(null);
    }

    /**
     * @see \Iterator
     */
    public function rewind()
    {
        $this->position = 0;
    }

    /**
     * @return mixed value of current option
     * @see \Iterator
     */
    public function current()
    {
        return $this->options[$this->sorted_keys[$this->position]]->getValue();
    }

    /**
     * @return int
     * @see \Iterator
     */
    public function key()
    {
        return $this->position;
    }

    /**
     * @see \Iterator
     */
    public function next()
    {
        ++$this->position;
    }

    /**
     * @return bool
     * @see \Iterator
     */
    public function valid()
    {
        return isset($this->sorted_keys[$this->position]);
    }
}
?><?php

class Option
{
    private
        $name, /* string optional name of argument */
        $title, /* a formal way to reference this argument */
        $aliases = array(), /* aliases for this argument */
        $value = null, /* mixed */
        $description, /* string */
        $required = false, /* bool */
        $boolean = false, /* bool */
        $type = 0, /* int see constants */
        $rule, /* closure */
        $map, /* closure */
        $file = false, /* bool */
        $file_require_exists, /* bool require that the file path is valid */
        $file_allow_globbing; /* bool allow globbing for files */

    const TYPE_SHORT        = 1;
    const TYPE_VERBOSE      = 2;
    const TYPE_NAMED        = 3; // 1|2
    const TYPE_ANONYMOUS    = 4;

    /**
     * @param string|int $name single char name or int index for this option
     * @return Option
     */
    public function __construct($name)
    {
        if (!is_int($name) && empty($name)) {
            throw new \Exception(sprintf('Invalid option name %s: Must be identified by a single character or an integer', $name));
        }

        if (!is_int($name)) {
            $this->type = mb_strlen($name, 'UTF-8') === 1 ?
                self::TYPE_SHORT : self::TYPE_VERBOSE;
        } else {
            $this->type = self::TYPE_ANONYMOUS;
        }

        $this->name = $name;
    }

    /**
     * @param string $alias
     * @return Option
     */
    public function addAlias($alias)
    {
        $this->aliases[] = $alias;
        return $this;
    }

    /**
     * @param string $description
     * @return Option
     */
    public function setDescription($description)
    {
        $this->description = $description;
        return $this;
    }

    /**
     * @param bool $bool
     * @return Option
     */
    public function setBoolean($bool = true)
    {
        $this->boolean = $bool;
        return $this;
    }

    /**
     * Require that the argument is a file.  This will
     * make sure the argument is a valid file, will expand
     * the file path provided to a full path (e.g. map relative
     * paths), and in the case where $allow_globbing is set,
     * supports file globbing and returns an array of matching
     * files.
     *
     * @return string|array of full file path|paths
     * @param bool $require_exists
     * @param bool $allow_globbing
     * @throws \Exception if the file does not exists
     */
    public function setFileRequirements($require_exists = true, $allow_globbing = true)
    {
        $this->file = true;
        $this->file_require_exists = $require_exists;
        $this->file_allow_globbing = $allow_globbing;
    }

    /**
     * @param string $title
     * @return Option
     */
    public function setTitle($title)
    {
        $this->title = $title;
        return $this;
    }

    /**
     * @param bool $bool required?
     * @return Option
     */
    public function setRequired($bool = true)
    {
        $this->required = $bool;
        return $this;
    }

    /**
     * @param closure|string $rule regex, closure
     * @return Option
     */
    public function setRule($rule)
    {
        $this->rule = $rule;
        return $this;
    }

    /**
     * @param closure|string $rule regex, closure
     * @return Option
     */
    public function setMap(\Closure $map)
    {
        $this->map = $map;
        return $this;
    }


    /**
     * @param closure|string $rule regex, closure
     * @return Option
     */
    public function map($value)
    {
        if (!is_callable($this->map))
            return $value;

        // todo add int, float and regex special case

        // todo double check syntax
        return call_user_func($this->map, $value);
    }


    /**
     * @return bool
     */
    public function validate($value)
    {
        if (!is_callable($this->rule))
            return true;

        // todo add int, float and regex special case

        // todo double check syntax
        return call_user_func($this->rule, $value);
    }

    /**
     * @param string $path
     * @return string|array full file path or an array of file paths in the
     *     case where "globbing" is supported
     */
    public function parseFilePath($file_path)
    {
        $path = realpath($file_path);
        if ($this->file_allow_globbing) {
            $files = glob($file_path);
            if (empty($files)) {
                return $files;
            }
            return array_map(function($file) {
                return realpath($file);
            }, $files);
        }

        return $path;
    }

    /**
     * @return string|int name of the option
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * @return int type (see OPTION_TYPE_CONST)
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * @return mixed value of the option
     */
    public function getValue()
    {
        return $this->value;
    }

    /**
     * @return array list of aliases
     */
    public function getAliases()
    {
        return $this->aliases;
    }

    /**
     * @return bool is this option a boolean
     */
    public function isBoolean()
    {
        // $this->value = false; // ?
        return $this->boolean;
    }

    /**
     * @return bool is this option a boolean
     */
    public function isFile()
    {
        return $this->file;
    }

    /**
     * @return bool is this option required?
     */
    public function isRequired()
    {
        return $this->required;
    }

    /**
     * @param mixed value for this option (set on the command line)
     */
    public function setValue($value)
    {
        if ($this->isBoolean() && !is_bool($value)) {
            throw new \Exception(sprintf('Boolean option expected for option -%s, received %s value instead', $this->name, $value));
        }
        if (!$this->validate($value)) {
            throw new \Exception(sprintf('Invalid value, %s, for option -%s', $value, $this->name));
        }
        if ($this->isFile()) {
            $file_path = $this->parseFilePath($value);
            if (empty($file_path)) {
                if ($this->file_require_exists) {
                    throw new \Exception(sprintf('Expected %s to be a valid file', $value, $this->name));
                }
            } else {
                $value = $file_path;
            }
        }
        $this->value = $this->map($value);
    }

    /**
     * @return string
     */
    public function getHelp()
    {
        $color = new \Colors\Color();
        $help = '';

        if ($this->type & self::TYPE_NAMED) {
            $help .=  PHP_EOL . (mb_strlen($this->name, 'UTF-8') === 1 ?
                '-' : '--') . $this->name;
            if (!empty($this->aliases)) {
                foreach($this->aliases as $alias) {
                    $help .= (mb_strlen($alias, 'UTF-8') === 1 ?
                        '/-' : '/--') . $alias;
                }
            }
            if (!$this->isBoolean()) {
                $help .= ' ' . $color('<argument>')->underline();
            }
            $help .= PHP_EOL;
        } else {
            $help .= (empty($this->title) ? "arg {$this->name}" : $this->title) . PHP_EOL;
        }

        $description = $this->description;
        if ($this->isRequired()) {
            $description = 'Required.  ' . $description;
        }

        if (!empty($description)) {
            $help .= Terminal::wrap(
                $this->title . $description, 5, 1);
        }

        return $help;
    }

    /**
     * @return string
     */
    public function __toString()
    {
        return $this->getHelp();
    }
}
?><?php

class Terminal
{
    /**
     * Width of current terminal window
     * On Linux/Mac flavor systems, will use tput.  Falls back to a
     * default value of $default.  On Windows, will always fall back
     * to default.
     *
     * @param int $default
     * @return int
     */
    public static function getWidth($default = 80)
    {
        return self::tput($default, 'cols');
    }

    /**
     * Height of current terminal window
     * @see getWidth
     * @param int $default
     * @return int
     */
    public static function getHeight($default = 32)
    {
        return self::tput($default, 'lines');
    }

    /**
     * Make that terminal beep
     * Ask and ye shall receive
     * https://twitter.com/philsturgeon/status/240825183487791104
     */
    public static function beep()
    {
        echo "\x7";
    }

    /**
     * Sadly if you attempt to redirect stderr, e.g. "tput cols 2>/dev/null"
     * tput does not return the expected values.  As a result, to prevent tput
     * from writing to stderr, we first check the exit code and call it again
     * to get the value :-(.
     * @param int $default
     * @param string $param
     * @return int
     */
    private static function tput($default, $param = 'cols')
    {
        $test = exec('tput ' . $param . ' 2>/dev/null');
        if (empty($test))
            return $default;
        $result = intval(exec('tput ' . $param));
        return empty($result) ? $default : $result;
    }

    /**
     * Wrap text for printing
     * @param string $text
     * @param int $left_margin
     * @param int $right_margin
     * @param int $width attempts to use current terminal width by default
     * @return string
     */
    public static function wrap($text, $left_margin = 0, $right_margin = 0,
        $width = null)
    {
        if (empty($width)) {
            $width = self::getWidth();
        }
        $width = $width - abs($left_margin) - abs($right_margin);
        $margin = str_repeat(' ', $left_margin);
        return $margin . wordwrap($text, $width, PHP_EOL . $margin);
    }

    /**
     * @param string $text
     * @param int $width defaults to terminal width
     * @return string
     */
    public static function header($text, $width = null)
    {
        if (empty($width)) {
            $width = self::getWidth();
        }
        return self::pad($text, $width);
    }

    /**
     * A UT8 compatible string pad
     * @return string
     */
    public static function pad($text, $width, $pad = ' ', $mode = STR_PAD_RIGHT)
    {
        $width = strlen($text) - mb_strlen($text, 'UTF-8') + $width;
        return str_pad($text, $width, $pad, $mode);
    }
}
?><?php

// REMOVE END

$pk = new Command();

$pk->option('n')
	->aka('new')
	->describeAs('Create new application')
	->must(function($app_name){
		return ctype_alnum($app_name);
	})
	->map(function($app_name){
		global $files;
		
		$path = "./{$app_name}/";
		
		// Create the app folders
		mkdir($path);
		mkdir($path . "config");
		mkdir($path . "controller");
		mkdir($path . "layouts");
		mkdir($path . "model");
		mkdir($path . "plugins");
		mkdir($path . "public");
		mkdir($path . "public/images");
		mkdir($path . "public/css");
		mkdir($path . "public/js");
		mkdir($path . "view");
		mkdir($path . "view/home");
		
		file_put_contents($path . "/PK_project", "");
		
		foreach ($files as $folder=>$_files):
			foreach($_files as $file=>$content):
				$file = $path . $folder . "/{$file}";
				file_put_contents($file, base64_decode($content));
			endforeach;
		endforeach;
	});
?>
